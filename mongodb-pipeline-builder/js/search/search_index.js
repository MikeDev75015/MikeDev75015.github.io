var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/BucketAutoStageInterface.html",[0,0.268,1,2.283]],["body/interfaces/BucketAutoStageInterface.html",[0,0.335,1,2.857,2,0.282,3,0.282,4,0.282,5,0.207,6,1.792,7,1.792,8,0.605,9,0.282,10,1.792,11,0.453,12,0.207,13,0.513,14,5.453,15,1.481,16,5.453,17,4.543,18,2.65,19,2.428,20,0.489,21,0.034,22,3.292,23,3.292,24,3.951,25,2.857,26,2.362,27,1.873,28,1.411,29,3.951,30,4.149,31,0.992,32,4.98,33,3.951,34,1.813,35,3.951,36,3.292,37,3.292,38,3.951,39,3.951,40,2.857,41,3.951,42,3.951,43,2.857,44,2.857,45,2.157,46,3.292,47,3.951,48,3.951,49,3.951,50,3.817,51,3.817,52,3.817,53,3.817,54,3.817,55,3.023,56,3.313,57,3.313,58,3.817,59,3.817,60,3.817,61,3.817,62,3.817,63,3.817,64,3.817,65,2.361,66,2.058,67,1.986,68,1.527,69,2.274,70,2.533,71,1.114,72,2.533,73,2.857,74,2.857,75,2.857,76,1.568,77,1.824,78,2.058,79,2.84,80,2.857,81,2.058,82,2.274,83,2.533,84,1.873,85,2.585,86,2.857,87,1.214,88,3.292,89,3.292,90,2.857,91,0.399,92,1.326,93,2.329,94,0.014,95,0.02,96,0.014]],["title/interfaces/BucketStageInterface.html",[0,0.268,97,2.283]],["body/interfaces/BucketStageInterface.html",[0,0.31,2,0.253,3,0.253,4,0.253,5,0.186,6,1.607,8,0.543,9,0.253,11,0.406,12,0.186,13,0.475,15,1.439,17,4.918,18,2.557,19,2.181,20,0.503,21,0.034,26,2.052,27,2.246,28,1.439,31,1.09,34,1.331,37,3.946,43,2.642,45,2.409,46,3.044,65,2.732,66,1.903,67,2.15,68,1.554,69,2.726,70,2.342,71,1.031,72,2.342,73,2.642,74,2.642,75,2.642,76,1.88,77,2.01,78,2.467,79,2.467,80,2.642,81,2.467,82,2.103,83,2.342,84,2.732,85,2.246,86,2.642,87,1.77,88,3.044,91,0.253,92,1.732,94,0.022,95,0.019,96,0.013,97,2.642,98,3.483,99,6.209,100,1.45,101,3.044,102,4.167,103,3.654,104,3.044,105,3.654,106,3.654,107,3.654,108,3.654,109,3.654,110,3.044,111,3.654,112,2.342,113,1.903,114,3.654,115,3.654,116,3.654,117,1.903,118,3.654,119,3.654,120,2.342,121,1.732,122,2.642,123,3.044,124,3.044,125,4.737,126,1.665,127,3.946,128,3.037,129,4.737,130,3.037,131,3.654,132,2.342,133,3.654,134,3.654,135,3.654,136,2.642,137,3.654,138,2.642,139,3.654,140,3.946,141,3.654,142,3.044,143,3.654,144,2.642,145,3.044,146,3.037,147,2.642]],["title/interfaces/BuilderOptionsInterface.html",[0,0.268,148,2.283]],["body/interfaces/BuilderOptionsInterface.html",[0,0.383,2,0.455,3,0.455,4,0.455,5,0.335,9,0.455,12,0.335,13,0.702,20,0.471,21,0.033,91,0.455,94,0.023,95,0.028,96,0.023,148,3.907,149,3.758,150,3.262,151,2.892,152,2.892,153,3.758,154,3.758,155,3.758,156,3.758,157,3.988,158,5.183,159,3.342,160,4.994,161,3.907]],["title/interfaces/CollStatsStageInterface.html",[0,0.268,162,2.283]],["body/interfaces/CollStatsStageInterface.html",[0,0.346,2,0.295,3,0.295,4,0.295,5,0.217,8,0.634,9,0.295,11,0.474,12,0.217,13,0.53,19,2.035,20,0.505,21,0.034,25,3.674,28,1.314,34,1.85,55,2.924,67,2.212,68,1.055,71,1.151,76,2.016,77,1.992,84,1.934,85,2.746,87,1.561,89,3.399,91,0.295,94,0.015,95,0.021,96,0.015,101,3.399,117,2.125,126,1.151,146,2.615,147,3.674,159,1.525,162,2.951,163,2.439,164,2.439,165,1.876,166,5.534,167,5.081,168,5.791,169,4.963,170,2.951,171,1.364,172,3.712,173,2.348,174,4.08,175,4.08,176,2.951,177,4.08,178,4.08,179,4.08,180,1.934,181,4.08,182,5.081,183,5.534,184,4.08,185,4.08,186,4.08,187,3.399,188,2.951,189,2.951,190,4.08,191,4.08,192,2.615,193,6.34,194,5.231,195,5.081,196,3.257,197,4.233,198,4.08,199,5.081,200,5.534,201,2.924,202,4.08,203,4.08,204,4.08,205,2.348,206,3.257,207,2.924,208,4.08,209,4.08,210,4.08,211,2.951,212,4.08,213,4.08,214,4.08,215,4.08,216,2.927]],["title/interfaces/DebugBuildInterface.html",[0,0.268,217,2.283]],["body/interfaces/DebugBuildInterface.html",[0,0.491,2,0.454,3,0.454,4,0.454,5,0.334,9,0.454,12,0.334,13,0.701,20,0.471,21,0.034,91,0.454,94,0.023,95,0.028,96,0.023,152,3.459,157,3.704,159,3.01,217,3.902,218,3.256,219,3.751,220,5.396,221,4.495,222,5.991,223,6.219,224,3.84,225,5.396,226,1.787,227,4.502]],["title/interfaces/DebugHistoryInterface.html",[0,0.268,224,2.023]],["body/interfaces/DebugHistoryInterface.html",[0,0.472,2,0.417,3,0.417,4,0.417,5,0.307,9,0.417,12,0.307,13,0.665,15,1.505,20,0.508,21,0.034,31,1.319,45,2.218,71,1.444,91,0.417,94,0.021,95,0.026,96,0.021,126,1.641,152,3.283,218,2.988,224,3.283,226,1.64,228,3.442,229,4.266,230,3.703,231,4.626,232,5.076,233,1.872,234,5.121,235,2.758,236,4.207,237,5.121,238,5.121,239,5.121,240,4.132]],["title/interfaces/FacetStageInterface.html",[0,0.268,241,2.283]],["body/interfaces/FacetStageInterface.html",[0,0.494,2,0.462,3,0.462,4,0.462,5,0.34,8,0.992,9,0.462,11,0.883,18,2.362,21,0.033,31,1.18,67,1.986,68,1.411,71,1.538,87,1.675,91,0.462,92,2.585,94,0.024,95,0.028,96,0.024,102,3.944,226,1.819,233,1.675,235,2.76,241,3.944,242,4.543,243,3.496,244,3.818,245,2.173,246,4.583,247,2.938]],["title/interfaces/GeoNearStageInterface.html",[0,0.268,248,2.283]],["body/interfaces/GeoNearStageInterface.html",[0,0.255,2,0.195,3,0.195,4,0.195,5,0.144,8,0.419,9,0.195,11,0.596,12,0.447,13,0.391,15,1.616,18,1.8,19,2.286,20,0.471,21,0.034,26,1.302,28,1.443,31,1.031,34,2.155,36,2.503,67,2.222,68,1.508,69,1.729,77,1.593,78,1.565,84,1.425,87,1.578,91,0.195,92,2.557,94,0.01,95,0.021,96,0.028,104,3.462,110,2.503,121,1.97,123,3.462,126,0.847,127,3.968,128,3.458,130,1.926,132,1.926,144,2.173,146,2.664,153,2.503,159,2.481,171,1.005,172,2.664,176,2.173,187,3.462,188,3.005,189,4.331,194,2.503,197,2.503,201,2.391,206,3.793,207,2.391,211,3.005,248,2.173,249,1.611,250,4.397,251,2.362,252,4.155,253,4.763,254,4.155,255,4.155,256,4.155,257,5.394,258,4.763,259,5.99,260,4.155,261,4.155,262,2.173,263,4.155,264,2.173,265,4.763,266,3.005,267,3.005,268,3.005,269,3.005,270,3.005,271,4.763,272,2.173,273,3.005,274,4.155,275,2.503,276,3.968,277,3.005,278,4.763,279,4.155,280,3.005,281,5.719,282,3.462,283,5.579,284,3.444,285,3.968,286,4.155,287,1.425,288,1.926,289,2.503,290,5.139,291,5.99,292,4.763,293,4.155,294,4.763,295,5.139,296,5.139,297,4.155,298,3.005,299,3.005,300,2.503,301,3.005,302,3.444,303,1.513,304,2.664,305,3.005,306,3.005,307,3.005,308,1.926,309,3.462,310,3.005,311,3.005,312,3.005,313,4.155,314,4.763,315,3.462,316,3.005,317,3.005,318,3.005,319,3.005,320,3.005,321,2.503,322,3.005,323,2.173,324,3.005,325,3.005,326,1.926,327,3.005]],["title/interfaces/GetResultResponseInterface.html",[0,0.268,328,2.283]],["body/interfaces/GetResultResponseInterface.html",[0,0.449,2,0.44,3,0.44,4,0.44,5,0.323,9,0.44,12,0.323,19,2.567,21,0.033,28,1.533,91,0.44,94,0.03,95,0.027,96,0.022,144,3.826,151,2.793,170,3.826,245,2.508,272,4.285,328,3.826,329,4.747,330,3.63,331,4.358,332,2.793,333,4.358,334,4.408,335,5.925,336,5.925,337,4.358,338,3.798,339,5.925,340,4.936,341,4.358,342,4.408]],["title/interfaces/GraphLookupStageInterface.html",[0,0.268,343,2.283]],["body/interfaces/GraphLookupStageInterface.html",[0,0.314,2,0.257,3,0.257,4,0.257,5,0.189,8,0.552,9,0.257,11,0.704,12,0.189,13,0.481,15,1.532,18,1.602,19,2.196,20,0.488,21,0.034,26,1.602,27,1.753,28,1.496,31,1.329,34,1.347,45,1.602,65,2.263,68,1.579,69,2.747,71,1.575,76,1.468,77,2.015,87,1.136,91,0.257,94,0.013,95,0.025,96,0.013,100,2.098,102,4.04,112,2.37,113,1.926,117,1.926,120,2.37,121,1.753,122,2.674,126,1.722,130,3.06,138,2.674,146,2.37,171,1.768,173,2.128,180,1.753,189,3.452,201,2.128,205,2.128,207,2.128,272,2.674,287,1.753,289,3.081,300,3.081,303,1.738,304,3.06,343,2.674,344,2.124,345,1.727,346,3.496,347,5.783,348,5.587,349,4.774,350,4.774,351,4.774,352,5.287,353,3.698,354,4.774,355,3.698,356,3.698,357,4.774,358,4.774,359,3.081,360,4.774,361,4.774,362,3.452,363,4.774,364,4.774,365,3.081,366,1.602,367,3.581,368,5.287,369,5.587,370,3.698,371,3.698,372,3.698,373,4.774,374,3.698,375,3.081,376,1.926,377,3.081,378,3.698,379,3.698,380,3.977,381,3.081,382,4.774,383,3.698,384,3.452,385,1.753,386,4.818,387,3.698,388,3.698,389,3.698,390,3.081,391,3.081,392,3.698]],["title/interfaces/GroupStageInterface.html",[0,0.268,393,2.283]],["body/interfaces/GroupStageInterface.html",[0,0.447,2,0.436,3,0.436,4,0.436,5,0.321,8,0.936,9,0.436,11,0.919,12,0.321,13,0.684,15,1.362,20,0.377,21,0.033,27,2.497,28,1.362,31,1.14,45,2.282,66,2.958,67,1.918,68,1.362,81,3.209,82,3.031,91,0.436,92,2.497,94,0.022,95,0.027,96,0.022,126,1.667,244,3.603,245,2.051,302,3.809,309,4.388,393,3.809,394,4.388,395,4.325,396,5.267,397,4.388,398,5.267,399,3.031,400,5.267,401,5.267,402,5.267]],["title/interfaces/InitOptionsInterface.html",[0,0.268,403,2.283]],["body/interfaces/InitOptionsInterface.html",[0,0.38,2,0.452,3,0.452,4,0.452,5,0.332,9,0.452,12,0.332,13,0.699,15,1.547,20,0.469,21,0.033,91,0.452,94,0.023,95,0.028,96,0.023,150,3.237,151,2.869,152,2.869,154,3.729,155,3.729,156,3.729,157,3.981,158,5.174,159,3.338,160,4.981,161,3.888,403,3.888,404,3.729,405,3.729]],["title/interfaces/LookupConditionInterface.html",[0,0.268,406,2.283]],["body/interfaces/LookupConditionInterface.html",[0,0.322,2,0.204,3,0.204,4,0.204,5,0.15,9,0.204,11,0.884,12,0.316,13,0.405,15,1.35,20,0.467,21,0.034,26,2.26,27,2.738,28,1.413,31,1.158,34,2.235,45,1.349,67,1.767,68,1.413,71,1.201,76,1.69,77,1.966,78,3.172,79,1.622,80,2.252,81,1.622,83,3.111,87,0.957,91,0.204,94,0.01,95,0.022,96,0.01,100,1.69,113,1.622,117,2.218,120,2.73,121,1.477,171,1.994,172,1.996,173,2.451,180,1.477,192,1.996,205,3.002,207,2.451,226,0.804,233,1.949,235,2.019,245,2.019,284,3.773,287,2.019,288,1.996,303,2.196,304,3.344,308,1.996,323,3.773,326,3.768,345,2.238,366,1.349,376,1.622,385,2.019,406,2.252,407,1.299,408,1.688,409,3.114,410,2.252,411,2.528,412,2.102,413,1.622,414,2.73,415,2.252,416,2.252,417,2.252,418,4.519,419,2.887,420,1.996,421,3.822,422,3.08,423,3.548,424,3.548,425,4.346,426,3.548,427,3.08,428,3.548,429,3.08,430,4.362,431,3.08,432,3.548,433,3.08,434,3.548,435,3.548,436,3.773,437,3.08,438,2.73,439,2.73,440,2.252,441,3.548,442,2.595,443,1.134,444,1.236,445,3.114,446,3.114,447,3.114,448,3.114,449,3.114,450,3.114]],["title/interfaces/LookupEqualityInterface.html",[0,0.268,451,2.283]],["body/interfaces/LookupEqualityInterface.html",[0,0.384,2,0.344,3,0.344,4,0.344,5,0.253,9,0.344,11,0.732,12,0.253,13,0.588,20,0.472,21,0.033,26,2.599,27,2.908,28,1.61,31,1.348,68,1.61,71,1.526,77,1.936,87,1.39,91,0.344,94,0.018,95,0.031,96,0.018,100,2.148,113,2.356,121,2.145,126,1.526,171,2.082,180,2.145,288,2.9,303,1.971,345,2.454,366,1.96,376,2.356,399,3.114,407,2.184,410,2.463,412,2.344,413,2.356,414,2.9,415,3.271,416,3.271,417,3.271,436,4.073,451,3.271,452,2.838,453,4.435,454,4.435,455,4.508,456,3.913,457,4.508,458,4.508,459,3.271]],["title/interfaces/LookupStageInterface.html",[0,0.268,460,2.283]],["body/interfaces/LookupStageInterface.html",[0,0.311,2,0.194,3,0.194,4,0.194,5,0.142,8,0.415,9,0.194,11,0.924,12,0.142,13,0.388,15,1.392,20,0.447,21,0.034,26,2.412,27,2.836,28,1.528,31,1.221,34,2.219,67,1.087,68,1.477,71,1.167,76,1.185,77,1.976,78,2.974,79,1.555,83,3.043,87,0.917,91,0.194,92,0.909,94,0.01,95,0.026,96,0.01,100,1.642,113,1.555,117,2.155,120,2.652,121,1.415,126,1.167,171,2.038,172,1.914,173,2.38,180,1.415,192,1.914,205,2.949,207,2.38,226,0.761,233,1.94,235,1.961,245,1.961,247,1.23,284,3.706,287,1.961,288,1.914,303,2.219,304,3.285,308,1.914,323,3.706,326,3.73,345,2.398,366,1.293,376,1.555,385,1.961,399,2.38,407,1.23,412,1.792,413,1.555,414,1.914,415,2.159,416,2.159,417,2.159,418,4.493,419,2.865,420,1.914,421,3.787,422,2.991,423,3.446,424,3.446,425,4.269,426,3.446,427,2.991,428,3.446,429,2.991,430,4.326,431,2.991,432,3.446,433,2.991,434,3.446,435,3.446,436,4.026,437,2.991,438,2.652,439,2.652,440,2.159,441,3.446,442,2.487,443,1.087,444,1.185,453,3.892,454,3.892,455,3.446,456,2.991,457,3.446,458,3.446,459,2.159,460,2.159]],["title/interfaces/MergeStageInterface.html",[0,0.268,461,2.283]],["body/interfaces/MergeStageInterface.html",[0,0.226,2,0.121,3,0.121,4,0.121,5,0.089,8,0.26,9,0.354,11,0.617,12,0.402,13,0.265,15,1.353,18,2.662,20,0.389,21,0.034,26,0.884,28,1.193,31,1.028,34,1.557,44,1.476,45,1.357,55,3.01,57,2.266,65,0.968,67,1.773,68,1.577,70,1.309,71,1.301,72,1.309,76,0.81,77,2.081,78,3.012,79,1.632,81,3.066,84,1.808,87,1.495,91,0.268,92,2.251,93,1.701,94,0.023,95,0.022,96,0.03,100,1.513,112,2.008,113,2.227,117,1.632,121,1.485,124,1.701,126,1.513,128,2.008,130,2.741,132,3.121,138,2.266,140,1.701,142,2.61,147,3.092,169,1.701,171,2.096,173,2.194,180,2.187,201,2.917,205,1.175,206,2.444,211,1.476,226,0.478,231,3.092,232,1.701,233,1.628,235,1.485,245,1.808,247,0.771,276,1.701,287,0.968,302,1.476,303,0.743,308,1.309,326,1.309,366,0.884,376,2.536,377,1.701,380,1.701,385,2.543,390,1.701,399,1.175,411,1.063,412,2.266,413,2.403,414,3.622,418,2.757,419,0.968,420,3.249,421,2.957,422,1.476,429,1.476,437,1.476,440,1.476,443,0.743,444,2.192,456,3.092,461,1.476,462,0.87,463,4.144,464,3.133,465,2.042,466,2.042,467,2.042,468,4.223,469,2.61,470,1.701,471,1.632,472,1.701,473,1.701,474,2.042,475,4.276,476,1.476,477,3.133,478,3.133,479,3.133,480,3.133,481,2.042,482,2.042,483,4.868,484,4.357,485,2.042,486,2.042,487,2.042,488,3.133,489,2.042,490,4.276,491,1.701,492,2.61,493,3.133,494,2.042,495,2.042,496,3.133,497,2.042,498,2.042,499,3.133,500,2.042,501,2.042,502,3.813,503,1.701,504,2.042,505,2.042,506,1.701,507,2.042,508,2.042,509,2.042,510,4.276,511,2.61,512,3.133,513,3.133,514,3.133,515,3.713,516,3.133,517,1.701,518,3.133,519,2.61,520,4.276,521,3.133,522,3.133,523,2.444,524,3.133,525,2.216,526,2.042,527,2.042,528,1.476,529,3.813,530,3.133,531,3.133,532,3.843,533,3.133,534,2.61,535,2.042,536,3.133,537,2.042,538,2.042,539,1.701,540,1.175,541,3.176,542,1.175,543,1.309,544,2.266,545,2.042,546,2.266,547,2.042,548,2.042,549,2.042,550,2.923,551,3.386,552,2.923,553,2.042,554,1.701]],["title/interfaces/OutStageInterface.html",[0,0.268,555,2.283]],["body/interfaces/OutStageInterface.html",[0,0.443,2,0.429,3,0.429,4,0.429,5,0.316,8,0.921,9,0.429,11,0.688,12,0.316,13,0.677,18,2.718,20,0.455,21,0.033,31,1.328,71,1.657,87,1.601,91,0.429,94,0.022,95,0.027,96,0.022,171,1.743,180,2.472,376,3.269,413,2.715,443,2.053,468,4.895,469,4.343,470,4.343,471,2.715,472,4.343,473,4.343,555,3.77,556,3.544,557,4.895,558,5.876]],["title/classes/PipelineError.html",[559,2.283,560,2.283]],["body/classes/PipelineError.html",[3,0.445,4,0.445,5,0.327,9,0.445,12,0.327,13,0.692,15,1.14,20,0.465,21,0.034,31,1.287,71,1.745,84,2.09,91,0.445,94,0.023,95,0.027,96,0.023,126,1.243,132,3.67,233,1.354,245,2.526,342,4.77,559,3.187,560,4.404,561,3.672,562,3.672,563,5.328,564,5.328,565,5.328,566,3.672,567,4.77,568,4.408,569,4.408,570,4.408,571,4.408,572,4.408]],["title/interfaces/ReplaceRootStageInterface.html",[0,0.268,573,2.283]],["body/interfaces/ReplaceRootStageInterface.html",[0,0.461,2,0.459,3,0.459,4,0.459,5,0.337,8,0.984,9,0.459,11,0.939,12,0.337,13,0.705,20,0.397,21,0.033,65,2.573,77,2.084,91,0.459,94,0.023,95,0.028,96,0.023,476,3.288,517,4.522,542,2.616,573,3.925,574,3.788,575,6.233,576,5.428,577,4.522,578,5.428,579,5.428,580,5.428]],["title/interfaces/SampleStageInterface.html",[0,0.268,581,2.283]],["body/interfaces/SampleStageInterface.html",[0,0.458,2,0.453,3,0.453,4,0.453,5,0.333,8,0.973,9,0.453,11,0.727,12,0.333,13,0.7,19,2.501,20,0.392,21,0.033,22,4.49,25,3.898,28,1.394,91,0.453,94,0.023,95,0.028,96,0.023,171,1.802,196,4.111,233,1.656,581,3.898,582,3.744,583,2.586,584,5.987,585,5.39,586,5.39,587,5.39,588,5.39]],["title/interfaces/StageErrorInterface.html",[0,0.268,589,2.283]],["body/interfaces/StageErrorInterface.html",[0,0.466,2,0.468,3,0.468,4,0.468,5,0.344,9,0.468,12,0.344,13,0.714,20,0.479,21,0.033,31,1.355,91,0.468,94,0.024,95,0.028,96,0.024,567,5.216,589,4.232,590,2.973,591,3.864,592,6.261]],["title/interfaces/UnionWithStageInterface.html",[0,0.268,593,2.283]],["body/interfaces/UnionWithStageInterface.html",[0,0.473,2,0.418,3,0.418,4,0.418,5,0.307,8,0.896,9,0.418,11,0.83,12,0.307,13,0.666,15,1.506,20,0.447,21,0.034,31,1.205,79,3.032,87,1.575,91,0.418,94,0.029,95,0.026,96,0.029,122,3.707,171,1.714,226,1.643,233,1.946,235,2.76,247,2.653,385,2.43,419,2.43,443,1.867,444,2.034,471,2.67,557,5.078,593,3.707,594,3.448,595,2.95,596,5.127,597,5.127,598,5.127]],["title/interfaces/UnwindStageInterface.html",[0,0.268,599,2.283]],["body/interfaces/UnwindStageInterface.html",[0,0.408,2,0.376,3,0.376,4,0.376,5,0.277,8,0.808,9,0.376,11,0.604,12,0.394,13,0.624,15,1.582,18,2.08,20,0.463,21,0.034,31,1.285,67,1.748,68,1.612,69,3.631,70,3.078,71,1.674,72,3.593,73,4.053,74,3.472,75,3.472,77,1.874,84,2.276,91,0.376,94,0.019,95,0.025,96,0.019,100,2.428,126,1.354,159,2.765,188,3.472,192,3.593,315,4.67,359,4,391,4,399,3.226,412,2.08,491,4.67,599,3.472,600,3.108,601,3.718,602,5.605,603,5.605,604,4.801,605,4.801]],["title/changelog.html",[606,1.91,607,1.91,608,2.2]],["body/changelog.html",[5,0.167,7,1.439,11,0.545,15,0.871,21,0.021,23,1.87,43,1.623,85,1.064,94,0.012,95,0.017,96,0.017,98,1.937,145,1.87,157,1.439,161,1.623,221,2.805,226,1.336,230,1.623,233,1.379,303,0.817,321,1.87,332,1.439,334,1.87,338,3.083,345,0.891,366,2.552,410,2.921,411,1.753,412,0.972,413,1.169,419,1.064,439,1.439,443,0.817,444,1.336,492,1.87,503,1.87,506,1.87,534,2.805,540,1.291,541,1.87,544,1.623,566,1.87,583,1.291,595,1.291,608,1.87,609,2.244,610,2.244,611,2.244,612,2.244,613,2.244,614,2.244,615,5.48,616,6.578,617,4.489,618,2.244,619,2.244,620,5.697,621,2.244,622,2.244,623,2.244,624,4.207,625,2.244,626,2.244,627,2.244,628,1.439,629,1.439,630,2.244,631,2.244,632,1.87,633,2.244,634,2.244,635,2.244,636,2.244,637,1.623,638,4.487,639,2.244,640,2.244,641,5.237,642,2.244,643,2.244,644,2.244,645,4.489,646,4.489,647,2.244,648,2.244,649,2.244,650,2.244,651,2.244,652,2.244,653,2.244,654,2.244,655,2.244,656,2.244,657,2.244,658,2.244,659,2.244,660,1.623,661,2.244,662,2.244,663,5.237,664,2.244,665,6.543,666,2.244,667,1.623,668,2.244,669,1.623,670,2.244,671,1.623,672,2.244,673,2.244,674,1.623,675,2.244,676,2.244,677,2.244,678,2.244,679,3.366,680,2.244,681,2.244,682,2.244,683,2.244,684,2.244,685,2.244,686,2.244,687,2.244,688,5.237,689,2.244,690,2.244,691,2.244,692,2.244,693,2.244,694,1.623,695,2.434,696,2.244,697,2.244,698,2.244,699,2.244,700,2.244,701,2.244,702,2.244,703,2.244,704,3.366,705,2.244,706,2.244,707,2.244,708,4.489,709,2.244,710,2.244,711,2.244,712,2.244,713,6.121,714,2.244,715,2.244,716,2.244,717,2.244,718,2.244,719,2.244,720,2.244,721,2.244,722,2.244,723,2.244,724,2.244,725,2.244,726,2.244,727,2.244,728,2.244,729,2.244,730,2.244,731,2.244,732,2.244,733,6.325,734,2.244,735,2.244,736,2.244,737,2.244,738,2.244,739,2.244,740,2.244,741,2.244,742,2.244,743,2.244,744,2.244,745,2.244,746,2.244,747,5.237,748,3.366,749,2.244,750,2.244,751,2.244,752,2.244,753,2.244,754,3.366,755,2.244,756,2.244,757,2.244,758,2.244,759,2.244,760,2.244,761,2.244,762,2.244,763,2.244,764,2.244]],["title/coverage.html",[765,3.581]],["body/coverage.html",[0,0.494,1,1.053,5,0.108,6,1.535,7,0.933,8,1.158,20,0.209,21,0.034,40,1.053,65,0.69,68,0.377,76,0.578,82,0.838,90,1.053,94,0.012,95,0.012,96,0.007,97,1.053,136,1.053,148,1.053,149,1.213,150,1.731,162,1.053,163,1.213,164,1.213,196,0.933,217,1.053,218,1.731,219,1.213,224,0.933,228,1.213,235,0.69,236,1.053,241,1.053,242,1.213,248,1.053,249,1.213,250,1.213,262,1.053,264,1.053,287,0.69,328,1.053,329,1.213,330,1.213,332,0.933,343,1.053,344,1.213,345,0.578,366,0.631,384,1.053,393,1.053,394,1.213,403,1.053,404,1.213,406,1.053,407,1.955,408,1.213,412,0.631,420,4.218,438,0.933,451,1.053,452,1.213,460,1.053,461,1.053,462,1.053,476,1.053,484,1.213,528,1.053,546,1.053,555,1.053,556,1.213,559,1.731,560,1.053,562,1.213,573,1.053,574,1.213,581,1.053,582,1.213,589,1.053,590,1.535,591,1.213,593,1.053,594,1.213,599,1.053,600,1.213,637,1.053,660,1.053,667,1.053,669,1.053,671,1.053,674,1.053,695,1.053,765,1.213,766,1.053,767,1.456,768,6.601,769,4.634,770,1.456,771,1.456,772,6.582,773,1.456,774,2.394,775,2.394,776,1.213,777,1.213,778,1.456,779,1.456,780,3.532,781,1.456,782,1.213,783,1.213,784,1.456,785,1.456,786,1.456,787,3.903,788,1.053,789,1.456,790,1.456,791,1.456,792,1.456,793,1.456,794,3.049,795,2.394,796,1.456,797,1.456,798,1.456,799,1.213,800,1.456,801,1.456,802,4.634,803,1.213,804,1.213,805,1.213,806,1.213,807,1.213,808,1.213,809,1.213,810,5.489,811,1.213,812,1.213,813,1.213,814,1.213,815,1.213,816,1.213,817,1.213,818,1.213,819,1.213,820,1.213,821,1.213,822,1.213,823,1.213,824,5.55,825,1.213,826,1.213,827,1.213,828,1.213,829,1.213,830,1.213,831,1.213,832,1.213,833,1.213,834,1.213,835,1.213,836,3.049,837,4.436,838,1.213,839,1.213,840,1.213,841,1.213,842,1.213,843,1.213,844,3.049,845,1.213,846,1.213,847,1.213,848,2.394,849,2.394,850,1.213,851,2.394,852,2.394,853,1.213,854,1.213,855,5.604,856,1.213,857,1.213,858,1.213,859,1.213,860,1.213,861,1.213,862,1.213,863,1.213,864,1.213,865,1.213,866,1.213,867,1.213,868,1.213,869,1.213,870,1.213,871,1.213,872,1.213,873,4.436,874,1.213,875,1.213,876,1.213,877,4.436,878,1.213,879,1.213,880,1.213,881,1.213,882,1.213,883,1.213,884,1.213,885,5.742,886,1.213,887,1.213,888,1.213,889,1.213,890,1.213,891,1.213,892,1.213,893,1.213,894,1.213,895,1.213,896,1.213,897,1.213,898,1.213,899,1.213,900,1.213,901,1.213,902,1.213,903,1.213,904,1.213,905,1.213,906,1.213,907,5.423,908,1.213,909,1.213,910,1.213,911,1.213,912,1.213,913,1.213,914,1.213,915,1.213,916,1.213,917,1.213,918,1.213,919,1.213,920,1.213,921,1.213,922,1.213,923,4.8,924,1.213,925,1.213,926,1.213,927,1.213,928,1.213,929,1.213,930,1.213,931,1.456,932,1.456,933,1.456,934,3.532,935,1.456,936,1.456,937,1.456,938,2.394,939,1.456,940,1.456,941,1.456,942,1.456,943,1.456,944,1.456]],["title/miscellaneous/enumerations.html",[945,1.693,946,3.161]],["body/miscellaneous/enumerations.html",[10,3.15,12,0.287,21,0.034,28,1.001,66,2.559,85,2.33,94,0.02,95,0.025,96,0.02,98,2.828,100,1.535,126,1.853,165,3.15,233,1.509,243,3.15,251,3.15,303,1.789,338,3.15,345,1.95,346,3.15,362,2.798,367,3.15,385,1.834,411,2.559,419,2.56,443,1.789,444,1.95,471,2.559,523,3.15,540,2.828,542,2.828,543,3.15,583,2.828,590,2.48,595,2.828,601,3.15,628,3.15,629,3.15,694,2.798,788,3.553,945,2.48,946,3.223,947,4.914,948,3.223,949,3.223,950,3.223,951,3.223,952,3.223,953,3.553,954,3.553,955,3.553,956,3.553,957,3.553,958,3.553]],["title/index.html",[12,0.196,606,1.91,607,1.91]],["body/index.html",[10,2.01,11,0.617,19,0.885,20,0.178,21,0.034,28,0.987,34,1.142,40,1.478,44,2.267,55,2.195,65,2.028,66,1.064,68,1.353,76,0.811,81,1.064,82,1.176,85,0.969,90,1.478,94,0.016,95,0.016,96,0.016,98,1.804,100,0.811,112,1.31,126,0.576,128,1.31,136,3.094,165,1.31,170,1.478,171,0.683,176,1.478,196,1.31,201,1.176,206,3.122,226,1.698,229,1.703,230,2.759,233,1.794,236,1.478,243,1.31,251,1.31,262,1.478,264,1.478,275,1.703,285,3.178,287,0.969,303,1.389,332,2.01,338,3.25,340,2.612,345,1.698,346,1.31,362,1.478,365,1.703,366,0.885,367,1.31,375,2.612,384,1.478,385,2.028,386,2.612,397,1.703,405,1.703,411,2.228,412,1.358,419,2.028,421,1.31,430,1.478,431,1.478,438,1.31,439,2.01,443,1.142,444,1.244,453,1.478,454,1.478,459,1.478,471,1.633,523,2.445,528,1.478,540,2.462,542,1.176,543,1.31,546,1.478,577,1.703,583,1.804,595,1.804,601,1.31,628,1.31,629,1.31,632,2.612,637,1.478,638,1.703,660,1.478,667,1.478,669,1.478,671,1.478,674,1.478,694,2.267,695,1.478,766,1.478,776,1.703,777,3.564,782,1.703,783,3.564,799,2.612,803,1.703,804,1.703,805,1.703,806,1.703,807,1.703,808,1.703,809,1.703,811,1.703,812,1.703,813,1.703,814,1.703,815,1.703,816,1.703,817,1.703,818,1.703,819,1.703,820,1.703,821,1.703,822,1.703,823,1.703,825,3.845,826,1.703,827,1.703,828,1.703,829,1.703,830,1.703,831,1.703,832,1.703,833,1.703,834,1.703,835,1.703,838,1.703,839,1.703,840,1.703,841,1.703,842,1.703,843,1.703,845,1.703,846,1.703,847,1.703,850,1.703,853,1.703,854,1.703,856,1.703,857,1.703,858,1.703,859,1.703,860,1.703,861,1.703,862,1.703,863,1.703,864,1.703,865,1.703,866,1.703,867,1.703,868,1.703,869,1.703,870,1.703,871,1.703,872,1.703,874,1.703,875,1.703,876,1.703,878,1.703,879,1.703,880,1.703,881,1.703,882,1.703,883,1.703,884,1.703,886,1.703,887,1.703,888,1.703,889,1.703,890,1.703,891,1.703,892,1.703,893,1.703,894,1.703,895,1.703,896,1.703,897,1.703,898,1.703,899,1.703,900,1.703,901,1.703,902,1.703,903,1.703,904,1.703,905,1.703,906,1.703,908,1.703,909,1.703,910,1.703,911,1.703,912,1.703,913,1.703,914,1.703,915,1.703,916,1.703,917,1.703,918,1.703,919,1.703,920,1.703,921,1.703,922,1.703,924,1.703,925,1.703,926,1.703,927,1.703,928,1.703,929,1.703,930,1.703,949,1.703,950,1.703,951,1.703,952,1.703,953,1.478,954,1.478,955,1.478,956,1.478,957,2.267,958,1.478,959,2.044,960,2.044,961,3.815,962,2.044,963,2.044,964,2.044,965,2.044,966,2.044,967,2.044,968,2.044,969,2.044,970,3.815,971,2.044,972,2.044,973,2.044,974,4.87,975,2.044,976,2.044,977,3.136,978,3.136,979,3.136,980,2.044,981,3.136,982,2.044,983,4.279,984,3.136,985,3.136,986,4.279,987,3.136,988,3.136,989,3.136,990,3.136,991,2.044,992,4.615,993,3.136,994,2.044,995,2.044,996,2.044,997,2.044,998,2.044,999,2.044,1000,3.136,1001,2.044,1002,2.044,1003,2.044,1004,2.044,1005,2.044,1006,2.044,1007,2.044,1008,2.044,1009,2.044,1010,2.044,1011,2.044,1012,2.044,1013,2.044,1014,2.044,1015,2.044,1016,2.044,1017,3.815,1018,2.044,1019,2.044,1020,2.044]],["title/license.html",[606,1.91,607,1.91,1021,2.2]],["body/license.html",[21,0.027,34,1.894,86,3.065,94,0.022,95,0.027,96,0.022,151,2.717,231,3.065,282,3.531,381,3.531,427,3.761,433,4.07,443,1.543,444,1.682,519,3.531,539,3.531,544,3.065,615,3.531,766,3.065,1021,3.531,1022,4.238,1023,5.628,1024,4.238,1025,4.238,1026,4.238,1027,5.202,1028,4.238,1029,4.238,1030,4.238,1031,4.238,1032,4.238,1033,4.238,1034,5.202,1035,6.319,1036,4.238,1037,4.238,1038,4.238,1039,4.238,1040,4.238,1041,4.238,1042,4.238,1043,4.238,1044,4.238,1045,4.238,1046,5.202,1047,4.238,1048,4.238,1049,4.238,1050,4.238,1051,4.238,1052,5.202,1053,5.202,1054,4.238,1055,4.238,1056,4.238,1057,4.238,1058,4.238,1059,4.238,1060,4.238,1061,4.238,1062,4.238,1063,4.238,1064,4.238,1065,4.238,1066,4.238,1067,4.238,1068,4.238,1069,4.238,1070,4.238,1071,4.238,1072,4.238,1073,4.238,1074,4.238,1075,4.238,1076,4.238,1077,4.238,1078,4.238,1079,4.238]],["title/modules.html",[1080,3.581]],["body/modules.html",[21,0.03,94,0.026,95,0.03,96,0.026,1080,4.248]],["title/overview.html",[1081,3.581]],["body/overview.html",[2,0.51,21,0.03,56,3.655,94,0.026,95,0.03,96,0.026,561,4.211,624,4.211,1081,4.211]],["title/miscellaneous/typealiases.html",[945,1.693,1082,3.794]],["body/miscellaneous/typealiases.html",[6,2.514,7,3.177,8,1.274,10,2.514,11,0.635,12,0.291,20,0.432,21,0.034,30,4.129,45,2.147,50,3.267,51,3.267,52,3.267,53,3.267,54,3.267,55,2.256,56,2.836,57,2.836,58,3.267,59,3.267,60,3.267,61,3.267,62,3.267,63,3.267,64,3.267,66,2.042,85,1.859,94,0.02,95,0.026,96,0.02,98,2.256,165,2.514,233,1.522,243,2.514,251,2.514,303,1.428,345,1.556,346,2.514,367,2.514,411,2.042,443,1.428,444,1.967,462,2.836,463,3.267,471,2.042,511,4.129,515,3.267,523,2.514,525,3.267,532,4.129,540,2.256,542,2.256,543,2.514,550,4.527,551,3.267,552,3.267,554,4.129,583,2.256,590,2.514,595,2.256,601,2.514,628,2.514,629,2.514,788,3.584,945,2.514,948,3.267,953,2.836,954,2.836,955,2.836,956,2.836,957,2.836,958,2.836,1083,3.921,1084,3.921,1085,4.956,1086,4.956]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":992,"title":{},"body":{"index.html":{}}}],["0.0.2",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["03fb8d6",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":55,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["1.0.0",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":43,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"changelog.html":{}}}],["100",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["1023",{"_index":209,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["1023.999",{"_index":208,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["1024",{"_index":204,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["11",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["11/11",{"_index":792,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["123456",{"_index":984,"title":{},"body":{"index.html":{}}}],["13",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":56,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["2.0.0",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["2.0.2",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["2.0.3",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["2.0.4",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["2.3.2",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["2.4.0",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["2.4.1",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["2.4.2",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["2.6",{"_index":322,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["2/2",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":615,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["21",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":624,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["24",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["281fb81",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["2d",{"_index":281,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["2dsphere",{"_index":283,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["3/3",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["31/31",{"_index":791,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":23,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"changelog.html":{}}}],["33",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["34",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["344b46c",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["35",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["38",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["4.2.2",{"_index":478,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["4/4",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["43",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["45",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["46",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["47",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["48",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["49",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":57,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["5/5",{"_index":787,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["51",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["52",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["54",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["56",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["57/57",{"_index":800,"title":{},"body":{"coverage.html":{}}}],["58",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["59",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["6/6",{"_index":795,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["62855da",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["663f2bf",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["67",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["69",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["6913cb3",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["6c243e1",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["7/7",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["71",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["826ac37",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["8dc7919",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["9/9",{"_index":793,"title":{},"body":{"coverage.html":{}}}],["91b73f1",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["938bcaa",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["9b859cf",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["9c97026",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["_id",{"_index":81,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{}}}],["a973cb0",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":1051,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":811,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["access",{"_index":421,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{}}}],["accessed",{"_index":426,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["accessible",{"_index":474,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["accumulated",{"_index":401,"title":{},"body":{"interfaces/GroupStageInterface.html":{}}}],["accumulator",{"_index":82,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["acos",{"_index":908,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["acosh",{"_index":909,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["act",{"_index":390,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["action",{"_index":231,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"interfaces/MergeStageInterface.html":{},"license.html":{}}}],["actionlist",{"_index":222,"title":{},"body":{"interfaces/DebugBuildInterface.html":{}}}],["activate",{"_index":160,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/InitOptionsInterface.html":{}}}],["acts",{"_index":105,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["add",{"_index":366,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["added",{"_index":353,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["addfields",{"_index":540,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["addfieldspayloadvalidator",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["adding",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["addition",{"_index":80,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/LookupConditionInterface.html":{}}}],["additional",{"_index":120,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["adds",{"_index":169,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["addstage",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["addtoset",{"_index":803,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["adjacent",{"_index":103,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["affect",{"_index":210,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["against",{"_index":358,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["aggregate",{"_index":1006,"title":{},"body":{"index.html":{}}}],["aggregation",{"_index":385,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["aggregation/index.ts",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["aggregation’s",{"_index":497,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["alias",{"_index":541,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"changelog.html":{}}}],["aliases",{"_index":1083,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allelementstrue",{"_index":878,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["allows",{"_index":431,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"index.html":{}}}],["alpha.0",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":413,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"changelog.html":{}}}],["alternatively",{"_index":449,"title":{},"body":{"interfaces/LookupConditionInterface.html":{}}}],["although",{"_index":495,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["and/or",{"_index":282,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"license.html":{}}}],["anyelementtrue",{"_index":879,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["appear",{"_index":951,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["apply",{"_index":598,"title":{},"body":{"interfaces/UnionWithStageInterface.html":{}}}],["argument",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["arguments",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["arising",{"_index":1077,"title":{},"body":{"license.html":{}}}],["array",{"_index":100,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["arrayelemat",{"_index":825,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arrayelemat('$profile.availability",{"_index":999,"title":{},"body":{"index.html":{}}}],["arrayelemat('$profile.skills",{"_index":998,"title":{},"body":{"index.html":{}}}],["arraytoobject",{"_index":826,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ascending",{"_index":111,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["asin",{"_index":910,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["asinh",{"_index":911,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["associated",{"_index":1036,"title":{},"body":{"license.html":{}}}],["asynchronous",{"_index":1000,"title":{},"body":{"index.html":{}}}],["atan",{"_index":912,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["atan2",{"_index":913,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["atanh",{"_index":914,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["authors",{"_index":1069,"title":{},"body":{"license.html":{}}}],["auto",{"_index":7,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["auto/index.ts",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["automatically",{"_index":492,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"changelog.html":{}}}],["availability",{"_index":993,"title":{},"body":{"index.html":{}}}],["available",{"_index":44,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{}}}],["avg",{"_index":804,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["avoid",{"_index":520,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["await",{"_index":1008,"title":{},"body":{"index.html":{}}}],["b",{"_index":529,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["b258e26",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["b4066e0",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":101,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{}}}],["behavior",{"_index":512,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["between",{"_index":310,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["binarysize",{"_index":853,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bit",{"_index":24,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["boolean",{"_index":159,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["boundaries",{"_index":99,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["boundary",{"_index":37,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{}}}],["branch",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["breaking",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["bsonsize",{"_index":854,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bucket",{"_index":98,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["bucketauto",{"_index":10,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["bucketautostageinterface",{"_index":1,"title":{"interfaces/BucketAutoStageInterface.html":{}},"body":{"interfaces/BucketAutoStageInterface.html":{},"coverage.html":{}}}],["bucketpayloadvalidator",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["buckets",{"_index":14,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["bucketstageinterface",{"_index":97,"title":{"interfaces/BucketStageInterface.html":{}},"body":{"interfaces/BucketStageInterface.html":{},"coverage.html":{}}}],["bug",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["build.interface.ts",{"_index":219,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"coverage.html":{}}}],["builder",{"_index":230,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"changelog.html":{},"index.html":{}}}],["builder\").pipelinebuilder",{"_index":976,"title":{},"body":{"index.html":{}}}],["builder's",{"_index":154,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/InitOptionsInterface.html":{}}}],["builder/helpers",{"_index":978,"title":{},"body":{"index.html":{}}}],["builder/operators",{"_index":979,"title":{},"body":{"index.html":{}}}],["builder@latest",{"_index":972,"title":{},"body":{"index.html":{}}}],["builderoptionsinterface",{"_index":148,"title":{"interfaces/BuilderOptionsInterface.html":{}},"body":{"interfaces/BuilderOptionsInterface.html":{},"coverage.html":{}}}],["building",{"_index":572,"title":{},"body":{"classes/PipelineError.html":{}}}],["built",{"_index":547,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["bundle",{"_index":156,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/InitOptionsInterface.html":{}}}],["bytes",{"_index":200,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["c",{"_index":1024,"title":{},"body":{"license.html":{}}}],["c8d05f7",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["cache",{"_index":215,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["calculate",{"_index":273,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["calculated",{"_index":36,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["calculates",{"_index":309,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GroupStageInterface.html":{}}}],["calculating",{"_index":280,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["ceil",{"_index":812,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["center",{"_index":290,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["change",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":608,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":534,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"changelog.html":{}}}],["charge",{"_index":1031,"title":{},"body":{"license.html":{}}}],["check",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["circleci",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":1072,"title":{},"body":{"license.html":{}}}],["class",{"_index":559,"title":{"classes/PipelineError.html":{}},"body":{"classes/PipelineError.html":{},"coverage.html":{}}}],["classes",{"_index":561,"title":{},"body":{"classes/PipelineError.html":{},"overview.html":{}}}],["clause",{"_index":435,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["closest",{"_index":301,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["cluster",{"_index":473,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{}}}],["clusters",{"_index":181,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["code",{"_index":980,"title":{},"body":{"index.html":{}}}],["coll",{"_index":557,"title":{},"body":{"interfaces/OutStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{}}}],["coll:\"myoutput",{"_index":467,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["collation",{"_index":496,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["collection",{"_index":171,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"index.html":{}}}],["collectionpayload",{"_index":671,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["collections",{"_index":377,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["collection’s",{"_index":174,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["collstats",{"_index":165,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["collstatsstageinterface",{"_index":162,"title":{"interfaces/CollStatsStageInterface.html":{}},"body":{"interfaces/CollStatsStageInterface.html":{},"coverage.html":{}}}],["combination",{"_index":486,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["comma",{"_index":1020,"title":{},"body":{"index.html":{}}}],["commit",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":1018,"title":{},"body":{"index.html":{}}}],["compare",{"_index":838,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["complete",{"_index":220,"title":{},"body":{"interfaces/DebugBuildInterface.html":{}}}],["complex",{"_index":1014,"title":{},"body":{"index.html":{}}}],["computed",{"_index":396,"title":{},"body":{"interfaces/GroupStageInterface.html":{}}}],["concat",{"_index":886,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["concatarrays",{"_index":827,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["cond",{"_index":845,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["condition",{"_index":409,"title":{},"body":{"interfaces/LookupConditionInterface.html":{}}}],["condition.interface.ts",{"_index":408,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"coverage.html":{}}}],["conditionpayload",{"_index":776,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["conditions",{"_index":381,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"license.html":{}}}],["connectfromfield",{"_index":347,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["connection",{"_index":1078,"title":{},"body":{"license.html":{}}}],["connecttofield",{"_index":348,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["consist",{"_index":538,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["const",{"_index":974,"title":{},"body":{"index.html":{}}}],["constant",{"_index":400,"title":{},"body":{"interfaces/GroupStageInterface.html":{}}}],["constructor",{"_index":342,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{},"classes/PipelineError.html":{}}}],["constructor(message",{"_index":564,"title":{},"body":{"classes/PipelineError.html":{}}}],["contain",{"_index":456,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["containing",{"_index":145,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"changelog.html":{}}}],["contains",{"_index":121,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["context",{"_index":389,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["contract",{"_index":151,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/InitOptionsInterface.html":{},"license.html":{}}}],["convert",{"_index":264,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["coordinate",{"_index":296,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["copies",{"_index":1046,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1034,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1023,"title":{},"body":{"license.html":{}}}],["core/stage.interface",{"_index":247,"title":{},"body":{"interfaces/FacetStageInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{}}}],["correspond",{"_index":494,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["corresponding",{"_index":499,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["corresponds",{"_index":374,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["cos",{"_index":915,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["cosh",{"_index":916,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["count",{"_index":85,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["coverage",{"_index":765,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":503,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"changelog.html":{}}}],["created",{"_index":501,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["creates",{"_index":469,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{}}}],["creating",{"_index":504,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["current",{"_index":234,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{}}}],["currently",{"_index":214,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["custom",{"_index":1016,"title":{},"body":{"index.html":{}}}],["customerid",{"_index":487,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["d744405",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1073,"title":{},"body":{"license.html":{}}}],["data",{"_index":197,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["database",{"_index":376,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{}}}],["dataset",{"_index":968,"title":{},"body":{"index.html":{}}}],["date",{"_index":232,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["datefromparts",{"_index":856,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datefromstring",{"_index":857,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datetoparts",{"_index":858,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datetostring",{"_index":859,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dayofmonth",{"_index":860,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dayofweek",{"_index":861,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dayofyear",{"_index":862,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["db",{"_index":558,"title":{},"body":{"interfaces/OutStageInterface.html":{}}}],["db.aggregate",{"_index":950,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["db.collection.aggregate",{"_index":949,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["db:\"mydb",{"_index":466,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["dbcollpayload",{"_index":637,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["deal",{"_index":1038,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1079,"title":{},"body":{"license.html":{}}}],["debug",{"_index":157,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/InitOptionsInterface.html":{},"changelog.html":{}}}],["debugbuildinterface",{"_index":217,"title":{"interfaces/DebugBuildInterface.html":{}},"body":{"interfaces/DebugBuildInterface.html":{},"coverage.html":{}}}],["debughistoryinterface",{"_index":224,"title":{"interfaces/DebugHistoryInterface.html":{}},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"coverage.html":{}}}],["declare",{"_index":93,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["default",{"_index":84,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/UnwindStageInterface.html":{}}}],["defaults",{"_index":475,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["define",{"_index":424,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["defined",{"_index":245,"title":{},"body":{"interfaces/FacetStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"classes/PipelineError.html":{}}}],["degreestoradians",{"_index":917,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["delete",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["depending",{"_index":586,"title":{},"body":{"interfaces/SampleStageInterface.html":{}}}],["depends",{"_index":500,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["deprecated",{"_index":320,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["deprecatedmethodwarning",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["depth",{"_index":369,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["depthfield",{"_index":349,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["desired",{"_index":505,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["determines",{"_index":308,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["dev",{"_index":1026,"title":{},"body":{"license.html":{}}}],["develop",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":138,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["directly",{"_index":422,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["discard",{"_index":552,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["display",{"_index":202,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["displays",{"_index":198,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["distance",{"_index":259,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["distancefield",{"_index":252,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["distancemultiplier",{"_index":253,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["distances",{"_index":263,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["distribute",{"_index":1043,"title":{},"body":{"license.html":{}}}],["divide",{"_index":813,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["document",{"_index":77,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["documentation",{"_index":766,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["documents",{"_index":28,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["document’s",{"_index":319,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["dollar",{"_index":72,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["dot",{"_index":260,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["double",{"_index":481,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["duplicate",{"_index":325,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["e12",{"_index":59,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["e192",{"_index":63,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["e24",{"_index":60,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["e48",{"_index":61,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["e6",{"_index":58,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["e96",{"_index":62,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["each",{"_index":102,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{}}}],["earth",{"_index":269,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["easier",{"_index":965,"title":{},"body":{"index.html":{}}}],["easy",{"_index":1002,"title":{},"body":{"index.html":{}}}],["edges",{"_index":38,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["edit",{"_index":966,"title":{},"body":{"index.html":{}}}],["element",{"_index":359,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["email",{"_index":989,"title":{},"body":{"index.html":{}}}],["embedded",{"_index":187,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["empty",{"_index":192,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["enable",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["enclose",{"_index":74,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["end",{"_index":39,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["ensure",{"_index":35,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["entries",{"_index":139,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["enumerations",{"_index":946,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["eq",{"_index":997,"title":{},"body":{"index.html":{}}}],["equal",{"_index":136,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["equality",{"_index":436,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["equality.interface.ts",{"_index":452,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"coverage.html":{}}}],["equalitypayload",{"_index":777,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["equivalent",{"_index":996,"title":{},"body":{"index.html":{}}}],["error",{"_index":132,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"classes/PipelineError.html":{}}}],["error.interface.ts",{"_index":591,"title":{},"body":{"interfaces/StageErrorInterface.html":{},"coverage.html":{}}}],["errors",{"_index":579,"title":{},"body":{"interfaces/ReplaceRootStageInterface.html":{}}}],["etc",{"_index":524,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["even",{"_index":318,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["event",{"_index":1068,"title":{},"body":{"license.html":{}}}],["example",{"_index":201,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{}}}],["examples",{"_index":1015,"title":{},"body":{"index.html":{}}}],["exception",{"_index":114,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["exclusion",{"_index":450,"title":{},"body":{"interfaces/LookupConditionInterface.html":{}}}],["exclusive",{"_index":108,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["execution",{"_index":190,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["exist",{"_index":468,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{}}}],["existent",{"_index":508,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["existing",{"_index":414,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["exists",{"_index":288,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["explicitly",{"_index":88,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{}}}],["exponent",{"_index":814,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["export",{"_index":91,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["expr",{"_index":430,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"index.html":{}}}],["express",{"_index":1059,"title":{},"body":{"license.html":{}}}],["expression",{"_index":65,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["expressions",{"_index":83,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["extends",{"_index":563,"title":{},"body":{"classes/PipelineError.html":{}}}],["f78cfb5",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["facet",{"_index":243,"title":{},"body":{"interfaces/FacetStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["facetstageinterface",{"_index":241,"title":{"interfaces/FacetStageInterface.html":{}},"body":{"interfaces/FacetStageInterface.html":{},"coverage.html":{}}}],["factor",{"_index":194,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["fail",{"_index":532,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["fails",{"_index":580,"title":{},"body":{"interfaces/ReplaceRootStageInterface.html":{}}}],["fall",{"_index":123,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["falls",{"_index":143,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["false",{"_index":315,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["fast",{"_index":177,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["fd11909",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":68,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["field(s",{"_index":490,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["fields",{"_index":78,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["field’s",{"_index":545,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":1037,"title":{},"body":{"license.html":{}}}],["filter",{"_index":384,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["find",{"_index":300,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{}}}],["first",{"_index":287,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["firstname",{"_index":988,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":1064,"title":{},"body":{"license.html":{}}}],["fix",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["floor",{"_index":815,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["followed",{"_index":361,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["following",{"_index":539,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"license.html":{}}}],["foreignfield",{"_index":453,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"index.html":{}}}],["found",{"_index":340,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{},"index.html":{}}}],["free",{"_index":1030,"title":{},"body":{"license.html":{}}}],["full",{"_index":153,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["functionoperator",{"_index":850,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["furnished",{"_index":1049,"title":{},"body":{"license.html":{}}}],["geojson",{"_index":294,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["geometry",{"_index":314,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["geonear",{"_index":251,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["geonearstageinterface",{"_index":248,"title":{"interfaces/GeoNearStageInterface.html":{}},"body":{"interfaces/GeoNearStageInterface.html":{},"coverage.html":{}}}],["geospatial",{"_index":278,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["getcount",{"_index":335,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{}}}],["getdocs",{"_index":336,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{}}}],["getpipeline",{"_index":995,"title":{},"body":{"index.html":{}}}],["getresult",{"_index":332,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["getresultresponseinterface",{"_index":328,"title":{"interfaces/GetResultResponseInterface.html":{}},"body":{"interfaces/GetResultResponseInterface.html":{},"coverage.html":{}}}],["getstagetypevalue",{"_index":789,"title":{},"body":{"coverage.html":{}}}],["getting",{"_index":606,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["github",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["granted",{"_index":1029,"title":{},"body":{"license.html":{}}}],["granularity",{"_index":16,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["granularityvalues",{"_index":30,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["graphlookup",{"_index":346,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["graphlookupstageinterface",{"_index":343,"title":{"interfaces/GraphLookupStageInterface.html":{}},"body":{"interfaces/GraphLookupStageInterface.html":{},"coverage.html":{}}}],["greater",{"_index":135,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["greaterthan",{"_index":839,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["greaterthanequal",{"_index":840,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["group",{"_index":66,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["groupby",{"_index":17,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{}}}],["groupbyautopayload",{"_index":667,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["groupbypayload",{"_index":674,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["grouped",{"_index":29,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["groupstageinterface",{"_index":393,"title":{"interfaces/GroupStageInterface.html":{}},"body":{"interfaces/GroupStageInterface.html":{},"coverage.html":{}}}],["guaranteed",{"_index":356,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["guidelines",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["having",{"_index":459,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"index.html":{}}}],["helper",{"_index":638,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["helpers",{"_index":1017,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1028,"title":{},"body":{"license.html":{}}}],["highest",{"_index":137,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["histogram",{"_index":185,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["histograms",{"_index":216,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["history.interface",{"_index":227,"title":{},"body":{"interfaces/DebugBuildInterface.html":{}}}],["history.interface.ts",{"_index":228,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"coverage.html":{}}}],["historylist",{"_index":225,"title":{},"body":{"interfaces/DebugBuildInterface.html":{}}}],["hold",{"_index":604,"title":{},"body":{"interfaces/UnwindStageInterface.html":{}}}],["holders",{"_index":1070,"title":{},"body":{"license.html":{}}}],["hour",{"_index":863,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["i.e",{"_index":147,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["id",{"_index":983,"title":{},"body":{"index.html":{}}}],["identical",{"_index":383,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["identifier",{"_index":484,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"coverage.html":{}}}],["identifies",{"_index":270,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["ifnull",{"_index":846,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ignore",{"_index":781,"title":{},"body":{"coverage.html":{}}}],["ignorepayload",{"_index":782,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["impact",{"_index":327,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["implement",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["implied",{"_index":1060,"title":{},"body":{"license.html":{}}}],["import",{"_index":226,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"changelog.html":{},"index.html":{}}}],["inaccurate",{"_index":179,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["include",{"_index":79,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{}}}],["includearrayindex",{"_index":602,"title":{},"body":{"interfaces/UnwindStageInterface.html":{}}}],["included",{"_index":86,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"license.html":{}}}],["includelocs",{"_index":254,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["includes",{"_index":141,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["including",{"_index":427,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"license.html":{}}}],["inclusion",{"_index":446,"title":{},"body":{"interfaces/LookupConditionInterface.html":{}}}],["inclusive",{"_index":106,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":244,"title":{},"body":{"interfaces/FacetStageInterface.html":{},"interfaces/GroupStageInterface.html":{}}}],["indexed",{"_index":279,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["indexes",{"_index":284,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["indexofarray",{"_index":828,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["indexofbytes",{"_index":887,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["indexofcp",{"_index":888,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["indexstats",{"_index":953,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["individually",{"_index":360,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["information",{"_index":186,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["initoptionsinterface",{"_index":403,"title":{"interfaces/InitOptionsInterface.html":{}},"body":{"interfaces/InitOptionsInterface.html":{},"coverage.html":{}}}],["input",{"_index":27,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["insert",{"_index":551,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["inside",{"_index":432,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["instead",{"_index":423,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["integer",{"_index":25,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/SampleStageInterface.html":{}}}],["integral",{"_index":379,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["interface",{"_index":0,"title":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"overview.html":{}}}],["intopayload",{"_index":660,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["isarray",{"_index":829,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isnumber",{"_index":924,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isodayofweek",{"_index":864,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isoweek",{"_index":865,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isoweekyear",{"_index":866,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["javascript",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":417,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["joined",{"_index":441,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["keep",{"_index":526,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["keepexisting",{"_index":525,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["key",{"_index":92,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["keys",{"_index":493,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["kilobytes",{"_index":203,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["kilometers",{"_index":266,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["kind",{"_index":1058,"title":{},"body":{"license.html":{}}}],["last",{"_index":236,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"coverage.html":{},"index.html":{}}}],["lastname",{"_index":386,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"index.html":{}}}],["latency",{"_index":182,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["latencystats",{"_index":166,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["latencystats.histograms",{"_index":184,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["legacy",{"_index":295,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["less",{"_index":133,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["lessthan",{"_index":841,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["lessthanequal",{"_index":842,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["liability",{"_index":1074,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1071,"title":{},"body":{"license.html":{}}}],["lib/.../bucket",{"_index":1084,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../merge",{"_index":1086,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../stage",{"_index":948,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/errors/pipeline/pipeline.error.ts",{"_index":562,"title":{},"body":{"classes/PipelineError.html":{},"coverage.html":{}}}],["lib/errors/pipeline/pipeline.error.ts:8",{"_index":565,"title":{},"body":{"classes/PipelineError.html":{}}}],["lib/helpers/bucket",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/bucket/index.ts",{"_index":773,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/commons/index.ts",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/lookup/index.ts",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/merge/index.ts",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/out/index.ts",{"_index":779,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/project/index.ts",{"_index":780,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/sample/index.ts",{"_index":784,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/union",{"_index":785,"title":{},"body":{"coverage.html":{}}}],["lib/interfaces/core/builder",{"_index":149,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"coverage.html":{}}}],["lib/interfaces/core/debug",{"_index":218,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"coverage.html":{}}}],["lib/interfaces/core/get",{"_index":329,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{},"coverage.html":{}}}],["lib/interfaces/core/init",{"_index":404,"title":{},"body":{"interfaces/InitOptionsInterface.html":{},"coverage.html":{}}}],["lib/interfaces/core/stage",{"_index":590,"title":{},"body":{"interfaces/StageErrorInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["lib/interfaces/core/stage.interface.ts",{"_index":790,"title":{},"body":{"coverage.html":{}}}],["lib/interfaces/stages/bucket",{"_index":6,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/interfaces/stages/coll",{"_index":163,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/facet",{"_index":242,"title":{},"body":{"interfaces/FacetStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/geo",{"_index":249,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/graph",{"_index":344,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/group",{"_index":394,"title":{},"body":{"interfaces/GroupStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/lookup",{"_index":407,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/merge",{"_index":462,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/interfaces/stages/out",{"_index":556,"title":{},"body":{"interfaces/OutStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/replace",{"_index":574,"title":{},"body":{"interfaces/ReplaceRootStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/sample",{"_index":582,"title":{},"body":{"interfaces/SampleStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/union",{"_index":594,"title":{},"body":{"interfaces/UnionWithStageInterface.html":{},"coverage.html":{}}}],["lib/interfaces/stages/unwind",{"_index":600,"title":{},"body":{"interfaces/UnwindStageInterface.html":{},"coverage.html":{}}}],["lib/main.ts",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["lib/methods/index.ts",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["lib/operators/accumulator/index.ts",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["lib/operators/arithmetic/index.ts",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["lib/operators/array/index.ts",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["lib/operators/boolean/index.ts",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["lib/operators/comparison/index.ts",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["lib/operators/conditional/index.ts",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["lib/operators/custom",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["lib/operators/data",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["lib/operators/date/index.ts",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["lib/operators/misc/index.ts",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["lib/operators/set/index.ts",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["lib/operators/string/index.ts",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["lib/operators/trigonometry/index.ts",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["lib/operators/type/index.ts",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["lib/validators/index.ts",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/addfields",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/bucket",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/lookup",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["lib/warnings/index.ts",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["library",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":1021,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":629,"title":{},"body":{"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["limitation",{"_index":1040,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1061,"title":{},"body":{"license.html":{}}}],["limits",{"_index":292,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["list",{"_index":695,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["listsessions",{"_index":954,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["literal",{"_index":76,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["localfield",{"_index":454,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"index.html":{}}}],["location",{"_index":271,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["locations",{"_index":277,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["log",{"_index":816,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["log10",{"_index":817,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["logs",{"_index":158,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/InitOptionsInterface.html":{}}}],["longer",{"_index":324,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["looks",{"_index":286,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["lookup",{"_index":345,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["lookupconditioninterface",{"_index":406,"title":{"interfaces/LookupConditionInterface.html":{}},"body":{"interfaces/LookupConditionInterface.html":{},"coverage.html":{}}}],["lookupequalityinterface",{"_index":451,"title":{"interfaces/LookupEqualityInterface.html":{}},"body":{"interfaces/LookupEqualityInterface.html":{},"coverage.html":{}}}],["lookupequalityvalidator",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["lookuppayloadvalidator",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["lookupstageinterface",{"_index":460,"title":{"interfaces/LookupStageInterface.html":{}},"body":{"interfaces/LookupStageInterface.html":{},"coverage.html":{}}}],["lower",{"_index":107,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["lowest",{"_index":134,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["ltrim",{"_index":889,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["making",{"_index":962,"title":{},"body":{"index.html":{}}}],["mapoperator",{"_index":830,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["match",{"_index":303,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["matches",{"_index":437,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["matching",{"_index":95,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["matter",{"_index":488,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["max",{"_index":805,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["maxdepth",{"_index":350,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["maxdistance",{"_index":255,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["maximum",{"_index":289,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{}}}],["measurement",{"_index":213,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["merchantability",{"_index":1063,"title":{},"body":{"license.html":{}}}],["merge",{"_index":444,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["merged",{"_index":531,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["mergeobjects",{"_index":528,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["mergestageinterface",{"_index":461,"title":{"interfaces/MergeStageInterface.html":{}},"body":{"interfaces/MergeStageInterface.html":{},"coverage.html":{}}}],["message",{"_index":567,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/StageErrorInterface.html":{}}}],["meta",{"_index":874,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["metadata",{"_index":175,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["meters",{"_index":293,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["method",{"_index":338,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["methods",{"_index":334,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{},"changelog.html":{}}}],["mike",{"_index":1025,"title":{},"body":{"license.html":{}}}],["millisecond",{"_index":867,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["min",{"_index":806,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["mindistance",{"_index":256,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["minimum",{"_index":298,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["minute",{"_index":868,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["miscellaneous",{"_index":945,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":491,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["mit",{"_index":1022,"title":{},"body":{"license.html":{}}}],["mixed",{"_index":115,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["mod",{"_index":818,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["mode",{"_index":161,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/InitOptionsInterface.html":{},"changelog.html":{}}}],["model",{"_index":1005,"title":{},"body":{"index.html":{}}}],["modification",{"_index":518,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["modify",{"_index":544,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"changelog.html":{},"license.html":{}}}],["modifying",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["modules",{"_index":1080,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["moment.js",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["mongodb",{"_index":206,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{}}}],["mongoose",{"_index":1004,"title":{},"body":{"index.html":{}}}],["month",{"_index":546,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["more",{"_index":285,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"index.html":{}}}],["much",{"_index":964,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":276,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["multiply",{"_index":262,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["multiplying",{"_index":267,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["mynewpipeline",{"_index":981,"title":{},"body":{"index.html":{}}}],["myoutput",{"_index":465,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["n",{"_index":584,"title":{},"body":{"interfaces/SampleStageInterface.html":{}}}],["name",{"_index":71,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/UnwindStageInterface.html":{}}}],["nan",{"_index":48,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["naturallog",{"_index":819,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ne",{"_index":387,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["near",{"_index":250,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"coverage.html":{}}}],["nearsphere",{"_index":312,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["necessary",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["negative",{"_index":378,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["nested",{"_index":428,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["new",{"_index":412,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["newroot",{"_index":575,"title":{},"body":{"interfaces/ReplaceRootStageInterface.html":{}}}],["non",{"_index":205,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["none",{"_index":47,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["noninfringement",{"_index":1067,"title":{},"body":{"license.html":{}}}],["notable",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["notation",{"_index":261,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["note",{"_index":173,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["notequal",{"_index":843,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["notice",{"_index":1052,"title":{},"body":{"license.html":{}}}],["npm",{"_index":970,"title":{},"body":{"index.html":{}}}],["null",{"_index":399,"title":{},"body":{"interfaces/GroupStageInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["number",{"_index":19,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"index.html":{}}}],["numberint(30",{"_index":119,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["numberlong",{"_index":371,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["numberlong(20",{"_index":118,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["numbers",{"_index":41,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["numeric",{"_index":46,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{}}}],["object",{"_index":221,"title":{},"body":{"interfaces/DebugBuildInterface.html":{},"changelog.html":{}}}],["objecttoarray",{"_index":831,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["obtain",{"_index":339,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{}}}],["obtaining",{"_index":1033,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":571,"title":{},"body":{"classes/PipelineError.html":{}}}],["omitted",{"_index":548,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["once",{"_index":317,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["one",{"_index":128,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{}}}],["onlypayload",{"_index":783,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["operation",{"_index":130,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["operator",{"_index":326,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["operators",{"_index":397,"title":{},"body":{"interfaces/GroupStageInterface.html":{},"index.html":{}}}],["option",{"_index":274,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["optional",{"_index":15,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{}}}],["optionally",{"_index":392,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["options",{"_index":155,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/InitOptionsInterface.html":{}}}],["options.interface.ts",{"_index":150,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/InitOptionsInterface.html":{},"coverage.html":{}}}],["order",{"_index":112,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{}}}],["otherwise",{"_index":519,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"license.html":{}}}],["out",{"_index":443,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["output",{"_index":18,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["outputs",{"_index":605,"title":{},"body":{"interfaces/UnwindStageInterface.html":{}}}],["outside",{"_index":299,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["outstageinterface",{"_index":555,"title":{"interfaces/OutStageInterface.html":{}},"body":{"interfaces/OutStageInterface.html":{},"coverage.html":{}}}],["overridden",{"_index":480,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["overview",{"_index":1081,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":415,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["package",{"_index":971,"title":{},"body":{"index.html":{}}}],["paginate",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["paging",{"_index":632,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["pair",{"_index":104,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["pairs",{"_index":297,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["param",{"_index":569,"title":{},"body":{"classes/PipelineError.html":{}}}],["parameter",{"_index":365,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"index.html":{}}}],["parameters",{"_index":566,"title":{},"body":{"classes/PipelineError.html":{},"changelog.html":{}}}],["parent",{"_index":1007,"title":{},"body":{"index.html":{}}}],["part",{"_index":89,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{}}}],["partial",{"_index":405,"title":{},"body":{"interfaces/InitOptionsInterface.html":{},"index.html":{}}}],["particular",{"_index":1065,"title":{},"body":{"license.html":{}}}],["pass",{"_index":694,"title":{},"body":{"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["path",{"_index":69,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["payload",{"_index":410,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"changelog.html":{}}}],["payload.validator.ts",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["payload_validation_enabled",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["perform",{"_index":416,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["performing",{"_index":516,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["performs",{"_index":455,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["permission",{"_index":1027,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1047,"title":{},"body":{"license.html":{}}}],["person",{"_index":1032,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1048,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":233,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["pipelinebuilder",{"_index":799,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["pipelinebuilder('name",{"_index":982,"title":{},"body":{"index.html":{}}}],["pipelineerror",{"_index":560,"title":{"classes/PipelineError.html":{}},"body":{"classes/PipelineError.html":{},"coverage.html":{}}}],["pipelines",{"_index":961,"title":{},"body":{"index.html":{}}}],["planar",{"_index":316,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["plancachestats",{"_index":955,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["point",{"_index":291,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["points",{"_index":311,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["portions",{"_index":1055,"title":{},"body":{"license.html":{}}}],["position",{"_index":588,"title":{},"body":{"interfaces/SampleStageInterface.html":{}}}],["positive",{"_index":22,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/SampleStageInterface.html":{}}}],["possible",{"_index":554,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["pow",{"_index":820,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["powers",{"_index":42,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["powersof2",{"_index":64,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["pre",{"_index":513,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["preceding",{"_index":522,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["predicate",{"_index":307,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["preferred",{"_index":32,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["prefix",{"_index":70,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["preservenullandemptyarrays",{"_index":603,"title":{},"body":{"interfaces/UnwindStageInterface.html":{}}}],["previous",{"_index":535,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["process",{"_index":364,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["profile",{"_index":986,"title":{},"body":{"index.html":{}}}],["profile.availability",{"_index":994,"title":{},"body":{"index.html":{}}}],["profile.skills",{"_index":991,"title":{},"body":{"index.html":{}}}],["profileid",{"_index":987,"title":{},"body":{"index.html":{}}}],["profiles",{"_index":985,"title":{},"body":{"index.html":{}}}],["project",{"_index":411,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/MergeStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":13,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["property",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["provided",{"_index":1056,"title":{},"body":{"license.html":{}}}],["provides",{"_index":176,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"index.html":{}}}],["publish",{"_index":1042,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1066,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":458,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["push",{"_index":807,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["queries",{"_index":323,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["query",{"_index":189,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{}}}],["queryexecstats",{"_index":167,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["quotes",{"_index":75,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["r10",{"_index":51,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["r20",{"_index":52,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["r40",{"_index":53,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["r5",{"_index":50,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["r80",{"_index":54,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["radians",{"_index":265,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["radianstodegrees",{"_index":918,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["radius",{"_index":268,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["rand",{"_index":875,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["random",{"_index":585,"title":{},"body":{"interfaces/SampleStageInterface.html":{}}}],["range",{"_index":438,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["ranges",{"_index":129,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["reach",{"_index":355,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["read",{"_index":306,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["readable",{"_index":963,"title":{},"body":{"index.html":{}}}],["ready",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["received",{"_index":239,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{}}}],["recorded",{"_index":238,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{}}}],["recursion",{"_index":368,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["recursive",{"_index":382,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["recursively",{"_index":357,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["redact",{"_index":956,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["reduce",{"_index":832,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["refer",{"_index":434,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["reference",{"_index":425,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["regexfind",{"_index":890,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["regexfindall",{"_index":891,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["regexmatch",{"_index":892,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["release",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":521,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["replace",{"_index":515,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["replaceall",{"_index":893,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["replacement",{"_index":517,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{}}}],["replacementdocument",{"_index":576,"title":{},"body":{"interfaces/ReplaceRootStageInterface.html":{}}}],["replaceone",{"_index":894,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["replaceroot",{"_index":542,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["replacerootstageinterface",{"_index":573,"title":{"interfaces/ReplaceRootStageInterface.html":{}},"body":{"interfaces/ReplaceRootStageInterface.html":{},"coverage.html":{}}}],["replacewith",{"_index":543,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["replica",{"_index":470,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{}}}],["represent",{"_index":331,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{}}}],["represented",{"_index":370,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["representing",{"_index":152,"title":{},"body":{"interfaces/BuilderOptionsInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/InitOptionsInterface.html":{}}}],["require",{"_index":439,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"changelog.html":{},"index.html":{}}}],["require(\"mongodb",{"_index":975,"title":{},"body":{"index.html":{}}}],["require('mongodb",{"_index":977,"title":{},"body":{"index.html":{}}}],["required",{"_index":398,"title":{},"body":{"interfaces/GroupStageInterface.html":{}}}],["requires",{"_index":429,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["reserved",{"_index":479,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["resetting",{"_index":448,"title":{},"body":{"interfaces/LookupConditionInterface.html":{}}}],["resolve",{"_index":125,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["resolves",{"_index":578,"title":{},"body":{"interfaces/ReplaceRootStageInterface.html":{}}}],["response",{"_index":333,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{}}}],["response.interface.ts",{"_index":330,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{},"coverage.html":{}}}],["response.interface.ts:15",{"_index":337,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{}}}],["response.interface.ts:9",{"_index":341,"title":{},"body":{"interfaces/GetResultResponseInterface.html":{}}}],["restriction",{"_index":1039,"title":{},"body":{"license.html":{}}}],["restrictsearchwithmatch",{"_index":351,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["result",{"_index":94,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["result.getcount",{"_index":1010,"title":{},"body":{"index.html":{}}}],["result.getdocs",{"_index":1009,"title":{},"body":{"index.html":{}}}],["resulting",{"_index":442,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["results",{"_index":96,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":172,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["returned",{"_index":146,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{}}}],["returns",{"_index":144,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{}}}],["reversearray",{"_index":833,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["reverted",{"_index":536,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["rights",{"_index":1041,"title":{},"body":{"license.html":{}}}],["root",{"_index":476,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"coverage.html":{}}}],["round",{"_index":40,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["rtrim",{"_index":895,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["run",{"_index":440,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["runkit",{"_index":1012,"title":{},"body":{"index.html":{}}}],["same",{"_index":113,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["sample",{"_index":583,"title":{},"body":{"interfaces/SampleStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["samplerate",{"_index":876,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["samplestageinterface",{"_index":581,"title":{"interfaces/SampleStageInterface.html":{}},"body":{"interfaces/SampleStageInterface.html":{},"coverage.html":{}}}],["sample’s",{"_index":587,"title":{},"body":{"interfaces/SampleStageInterface.html":{}}}],["save",{"_index":229,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"index.html":{}}}],["scale",{"_index":193,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["script",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["search",{"_index":367,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["second",{"_index":869,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["section",{"_index":507,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["see",{"_index":506,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"changelog.html":{}}}],["sell",{"_index":1045,"title":{},"body":{"license.html":{}}}],["semantics",{"_index":313,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["separated",{"_index":1019,"title":{},"body":{"index.html":{}}}],["sequence",{"_index":952,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["series",{"_index":33,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["set",{"_index":471,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["setdifference",{"_index":880,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setequals",{"_index":881,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setintersection",{"_index":882,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setissubset",{"_index":883,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setunion",{"_index":884,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["shall",{"_index":1053,"title":{},"body":{"license.html":{}}}],["shard",{"_index":510,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["sharded",{"_index":180,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{}}}],["sign",{"_index":73,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["signs",{"_index":482,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["similar",{"_index":527,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["simplify",{"_index":960,"title":{},"body":{"index.html":{}}}],["sin",{"_index":919,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["single",{"_index":485,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["sinh",{"_index":920,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["size",{"_index":196,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["size/index.ts",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["sizepayload",{"_index":669,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["sizes",{"_index":199,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["skills",{"_index":990,"title":{},"body":{"index.html":{}}}],["skip",{"_index":628,"title":{},"body":{"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["slice",{"_index":834,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["software",{"_index":1035,"title":{},"body":{"license.html":{}}}],["sometimes",{"_index":178,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["soon",{"_index":1013,"title":{},"body":{"index.html":{}}}],["sort",{"_index":957,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["sortbycount",{"_index":958,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["sparse",{"_index":498,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["specification",{"_index":142,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["specified",{"_index":87,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{}}}],["specifies",{"_index":26,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["specify",{"_index":67,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["specifying",{"_index":380,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["spherical",{"_index":257,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["split",{"_index":896,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["sqrt",{"_index":821,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stage",{"_index":11,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stage.interface",{"_index":240,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{}}}],["stage.interface.ts",{"_index":8,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["stage.interface.ts:6",{"_index":246,"title":{},"body":{"interfaces/FacetStageInterface.html":{}}}],["stage.interface.ts:9",{"_index":395,"title":{},"body":{"interfaces/GroupStageInterface.html":{}}}],["stageerrorinterface",{"_index":589,"title":{"interfaces/StageErrorInterface.html":{}},"body":{"interfaces/StageErrorInterface.html":{},"coverage.html":{}}}],["stageinterface",{"_index":235,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"coverage.html":{}}}],["stagelabel",{"_index":1085,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stages",{"_index":419,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["stagetype",{"_index":592,"title":{},"body":{"interfaces/StageErrorInterface.html":{}}}],["stagetypeenum",{"_index":947,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["standalone",{"_index":472,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{}}}],["standard",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":391,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["started",{"_index":607,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":477,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["starts",{"_index":372,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["startwith",{"_index":352,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["state",{"_index":237,"title":{},"body":{"interfaces/DebugHistoryInterface.html":{}}}],["statements",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":183,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["stats",{"_index":164,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"coverage.html":{}}}],["status",{"_index":223,"title":{},"body":{"interfaces/DebugBuildInterface.html":{}}}],["stddevpop",{"_index":808,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stddevsamp",{"_index":809,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stop",{"_index":533,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["storage",{"_index":191,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["storagestats",{"_index":168,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["strcasecmp",{"_index":897,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["string",{"_index":31,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/FacetStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["strings",{"_index":514,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["strlenbytes",{"_index":898,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["strlencp",{"_index":899,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["subject",{"_index":1050,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1044,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1054,"title":{},"body":{"license.html":{}}}],["substr",{"_index":900,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["substrbytes",{"_index":901,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["substrcp",{"_index":902,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["subtract",{"_index":822,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["such",{"_index":117,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["sum",{"_index":90,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"coverage.html":{},"index.html":{}}}],["super",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["super(message",{"_index":570,"title":{},"body":{"classes/PipelineError.html":{}}}],["suppported",{"_index":49,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{}}}],["suppression",{"_index":447,"title":{},"body":{"interfaces/LookupConditionInterface.html":{}}}],["switch",{"_index":847,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["syntax",{"_index":304,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["table",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":445,"title":{},"body":{"interfaces/LookupConditionInterface.html":{}}}],["tan",{"_index":921,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tanh",{"_index":922,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["target",{"_index":375,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"index.html":{}}}],["technical",{"_index":959,"title":{},"body":{"index.html":{}}}],["test",{"_index":967,"title":{},"body":{"index.html":{}}}],["those",{"_index":211,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["through",{"_index":362,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["throws",{"_index":131,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["times",{"_index":489,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["tip",{"_index":502,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["tobool",{"_index":925,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["todate",{"_index":870,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["todecimal",{"_index":926,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["todouble",{"_index":927,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["toint",{"_index":928,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tolong",{"_index":929,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tolower",{"_index":903,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["toobjectid",{"_index":930,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tort",{"_index":1076,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":904,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["total",{"_index":170,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"index.html":{}}}],["toupper",{"_index":905,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["traversal",{"_index":363,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["traversed",{"_index":354,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["treats",{"_index":457,"title":{},"body":{"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["trim",{"_index":906,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["true",{"_index":188,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/UnwindStageInterface.html":{}}}],["trunc",{"_index":823,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["try",{"_index":1011,"title":{},"body":{"index.html":{}}}],["two",{"_index":110,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/BuilderOptionsInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugBuildInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/InitOptionsInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"interfaces/OutStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/ReplaceRootStageInterface.html":{},"interfaces/SampleStageInterface.html":{},"interfaces/StageErrorInterface.html":{},"interfaces/UnionWithStageInterface.html":{},"interfaces/UnwindStageInterface.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type.interface.ts",{"_index":788,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1082,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":116,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["unionwith",{"_index":595,"title":{},"body":{"interfaces/UnionWithStageInterface.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["unionwithstageinterface",{"_index":593,"title":{"interfaces/UnionWithStageInterface.html":{}},"body":{"interfaces/UnionWithStageInterface.html":{},"coverage.html":{}}}],["unique",{"_index":483,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["uniquedocs",{"_index":258,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["unit",{"_index":212,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["unless",{"_index":140,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["unset",{"_index":523,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["unsharded",{"_index":509,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["unspecified",{"_index":124,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["unwind",{"_index":601,"title":{},"body":{"interfaces/UnwindStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["unwindstageinterface",{"_index":599,"title":{"interfaces/UnwindStageInterface.html":{}},"body":{"interfaces/UnwindStageInterface.html":{},"coverage.html":{}}}],["update",{"_index":537,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["upper",{"_index":109,"title":{},"body":{"interfaces/BucketStageInterface.html":{}}}],["usage",{"_index":973,"title":{},"body":{"index.html":{}}}],["use",{"_index":34,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":272,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GetResultResponseInterface.html":{},"interfaces/GraphLookupStageInterface.html":{}}}],["useful",{"_index":275,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"index.html":{}}}],["user",{"_index":549,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["uses",{"_index":207,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{}}}],["using",{"_index":302,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["usual",{"_index":305,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{}}}],["valid",{"_index":577,"title":{},"body":{"interfaces/ReplaceRootStageInterface.html":{},"index.html":{}}}],["validator",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["value",{"_index":126,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/CollStatsStageInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/GeoNearStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupEqualityInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"classes/PipelineError.html":{},"interfaces/UnwindStageInterface.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["values",{"_index":45,"title":{},"body":{"interfaces/BucketAutoStageInterface.html":{},"interfaces/BucketStageInterface.html":{},"interfaces/DebugHistoryInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/GroupStageInterface.html":{},"interfaces/LookupConditionInterface.html":{},"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":420,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{},"coverage.html":{}}}],["variables",{"_index":418,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"interfaces/MergeStageInterface.html":{}}}],["various",{"_index":195,"title":{},"body":{"interfaces/CollStatsStageInterface.html":{}}}],["verify",{"_index":969,"title":{},"body":{"index.html":{}}}],["version",{"_index":321,"title":{},"body":{"interfaces/GeoNearStageInterface.html":{},"changelog.html":{}}}],["very",{"_index":1001,"title":{},"body":{"index.html":{}}}],["view",{"_index":596,"title":{},"body":{"interfaces/UnionWithStageInterface.html":{}}}],["warranties",{"_index":1062,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1057,"title":{},"body":{"license.html":{}}}],["way",{"_index":1003,"title":{},"body":{"index.html":{}}}],["week",{"_index":871,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["whenmatched",{"_index":463,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["whenmatchedtype",{"_index":511,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["whennotmatched",{"_index":464,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["whennotmatchedtype",{"_index":550,"title":{},"body":{"interfaces/MergeStageInterface.html":{},"miscellaneous/typealiases.html":{}}}],["whether",{"_index":1075,"title":{},"body":{"license.html":{}}}],["whole",{"_index":402,"title":{},"body":{"interfaces/GroupStageInterface.html":{}}}],["whose",{"_index":122,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GraphLookupStageInterface.html":{},"interfaces/UnionWithStageInterface.html":{}}}],["wish",{"_index":597,"title":{},"body":{"interfaces/UnionWithStageInterface.html":{}}}],["with/index.ts",{"_index":786,"title":{},"body":{"coverage.html":{}}}],["within",{"_index":127,"title":{},"body":{"interfaces/BucketStageInterface.html":{},"interfaces/GeoNearStageInterface.html":{}}}],["without",{"_index":433,"title":{},"body":{"interfaces/LookupConditionInterface.html":{},"interfaces/LookupStageInterface.html":{},"license.html":{}}}],["work",{"_index":388,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["written",{"_index":553,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["year",{"_index":872,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["yes",{"_index":568,"title":{},"body":{"classes/PipelineError.html":{}}}],["z",{"_index":530,"title":{},"body":{"interfaces/MergeStageInterface.html":{}}}],["zero",{"_index":373,"title":{},"body":{"interfaces/GraphLookupStageInterface.html":{}}}],["zip",{"_index":835,"title":{},"body":{"coverage.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BucketAutoStageInterface.html":{"url":"interfaces/BucketAutoStageInterface.html","title":"interface - BucketAutoStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BucketAutoStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/bucket-auto-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                BucketAuto Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        buckets\n                                \n                                \n                                            Optional\n                                        granularity\n                                \n                                \n                                        groupBy\n                                \n                                \n                                            Optional\n                                        output\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buckets\n                                    \n                                \n                                \n                                    \n                                        buckets:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A positive 32-bit integer that specifies the number of buckets into which input documents are grouped.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        granularity\n                                    \n                                \n                                \n                                    \n                                        granularity:         GranularityValues\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GranularityValues\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. A string that specifies the preferred number series to use to ensure that the calculated boundary edges\nend on preferred round numbers or their powers of 10.\nAvailable only if the all groupBy values are numeric and none of them are NaN.\nThe suppported values of granularity are:\n'R5'\n'R10'\n'R20'\n'R40'\n'R80'\n'1-2-5'\n'E6'\n'E12'\n'E24'\n'E48'\n'E96'\n'E192'\n'POWERSOF2'\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groupBy\n                                    \n                                \n                                \n                                    \n                                        groupBy:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An expression to group documents by. To specify a field path, prefix the field name with a dollar sign $ and\nenclose it in quotes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        output\n                                    \n                                \n                                \n                                    \n                                        output:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. A document that specifies the fields to include in the output documents in addition to the _id field.\nTo specify the field to include, you must use accumulator expressions:\n: { :  },\n...\nThe default count field is not included in the output document when output is specified. Explicitly specify the\ncount expression as part of the output document to include it:\noutput: {\n: { :  },\n...\ncount: { $sum: 1 }\n}\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BucketAutoStageInterface {\n    /**\n     * An expression to group documents by. To specify a field path, prefix the field name with a dollar sign $ and\n     * enclose it in quotes.\n     */\n    groupBy: any;\n    /**\n     * A positive 32-bit integer that specifies the number of buckets into which input documents are grouped.\n     */\n    buckets: number;\n    /**\n     * Optional. A document that specifies the fields to include in the output documents in addition to the _id field.\n     * To specify the field to include, you must use accumulator expressions:\n     *\n     * : { :  },\n     *\n     * ...\n     *\n     * The default count field is not included in the output document when output is specified. Explicitly specify the\n     * count expression as part of the output document to include it:\n     *\n     * output: {\n     *\n     * : { :  },\n     *\n     * ...\n     *\n     * count: { $sum: 1 }\n     *\n     * }\n     */\n    output?: {\n        [key: string]: any;\n    };\n    /**\n     * Optional. A string that specifies the preferred number series to use to ensure that the calculated boundary edges\n     * end on preferred round numbers or their powers of 10.\n     *\n     * Available only if the all groupBy values are numeric and none of them are NaN.\n     *\n     * The suppported values of granularity are:\n     *\n     * 'R5'\n     * 'R10'\n     * 'R20'\n     * 'R40'\n     * 'R80'\n     * '1-2-5'\n     * 'E6'\n     * 'E12'\n     * 'E24'\n     * 'E48'\n     * 'E96'\n     * 'E192'\n     * 'POWERSOF2'\n     */\n    granularity?: GranularityValues;\n}\n\nexport declare type GranularityValues = 'R5' | 'R10' | 'R20' | 'R40' | 'R80' | '1-2-5' | 'E6' | 'E12' | 'E24' | 'E48' |\n    'E96' | 'E192' | 'POWERSOF2';\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketStageInterface.html":{"url":"interfaces/BucketStageInterface.html","title":"interface - BucketStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BucketStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/bucket-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Bucket Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        boundaries\n                                \n                                \n                                            Optional\n                                        default\n                                \n                                \n                                        groupBy\n                                \n                                \n                                            Optional\n                                        output\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        boundaries\n                                    \n                                \n                                \n                                    \n                                        boundaries:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An array of values based on the groupBy expression that specify the boundaries for each bucket. Each adjacent\npair of values acts as the inclusive lower boundary and the exclusive upper boundary for the bucket. You must\nspecify at least two boundaries.\nThe specified values must be in ascending order and all of the same type. The exception is if the values are of\nmixed numeric types, such as:\n[ 10, NumberLong(20), NumberInt(30) ]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                    \n                                \n                                \n                                    \n                                        default:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. A literal that specifies the _id of an additional bucket that contains all documents whose groupBy\nexpression result does not fall into a bucket specified by boundaries.\nIf unspecified, each input document must resolve the groupBy expression to a value within one of the bucket\nranges specified by boundaries or the operation throws an error.\nThe default value must be less than the lowest boundaries value, or greater than or equal to the highest\nboundaries value.\nThe default value can be of a different type than the entries in boundaries.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groupBy\n                                    \n                                \n                                \n                                    \n                                        groupBy:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An expression to group documents by. To specify a field path, prefix the field name with a dollar sign $ and\nenclose it in quotes.\nUnless $bucket includes a default specification, each input document must resolve the groupBy field path or\nexpression to a value that falls within one of the ranges specified by the boundaries.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        output\n                                    \n                                \n                                \n                                    \n                                        output:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. A document that specifies the fields to include in the output documents in addition to the _id field.\nTo specify the field to include, you must use accumulator expressions.\n: { :  },\n...\n: { :  }\nIf you do not specify an output document, the operation returns a count field containing the number of documents\nin each bucket.\nIf you specify an output document, only the fields specified in the document are returned; i.e. the count field\nis not returned unless it is explicitly included in the output document.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BucketStageInterface {\n    /**\n     * An expression to group documents by. To specify a field path, prefix the field name with a dollar sign $ and\n     * enclose it in quotes.\n     *\n     * Unless $bucket includes a default specification, each input document must resolve the groupBy field path or\n     * expression to a value that falls within one of the ranges specified by the boundaries.\n     */\n    groupBy: any;\n    /**\n     * An array of values based on the groupBy expression that specify the boundaries for each bucket. Each adjacent\n     * pair of values acts as the inclusive lower boundary and the exclusive upper boundary for the bucket. You must\n     * specify at least two boundaries.\n     *\n     * The specified values must be in ascending order and all of the same type. The exception is if the values are of\n     * mixed numeric types, such as:\n     *\n     * [ 10, NumberLong(20), NumberInt(30) ]\n     */\n    boundaries: any[];\n    /**\n     * Optional. A literal that specifies the _id of an additional bucket that contains all documents whose groupBy\n     * expression result does not fall into a bucket specified by boundaries.\n     *\n     * If unspecified, each input document must resolve the groupBy expression to a value within one of the bucket\n     * ranges specified by boundaries or the operation throws an error.\n     *\n     * The default value must be less than the lowest boundaries value, or greater than or equal to the highest\n     * boundaries value.\n     *\n     * The default value can be of a different type than the entries in boundaries.\n     */\n    default?: string | number;\n    /**\n     * Optional. A document that specifies the fields to include in the output documents in addition to the _id field.\n     * To specify the field to include, you must use accumulator expressions.\n     *\n     * : { :  },\n     *\n     * ...\n     *\n     * : { :  }\n     *\n     * If you do not specify an output document, the operation returns a count field containing the number of documents\n     * in each bucket.\n     *\n     * If you specify an output document, only the fields specified in the document are returned; i.e. the count field\n     * is not returned unless it is explicitly included in the output document.\n     */\n    output?: {\n        [key: string]: { [key: string]: any };\n    };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BuilderOptionsInterface.html":{"url":"interfaces/BuilderOptionsInterface.html","title":"interface - BuilderOptionsInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BuilderOptionsInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/core/builder-options.interface.ts\n        \n\n            \n                Description\n            \n            \n                Contract representing a full builder's options bundle\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        debug\n                                \n                                \n                                        logs\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A boolean to activate or not the debug mode\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logs\n                                    \n                                \n                                \n                                    \n                                        logs:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A boolean to activate or not the logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BuilderOptionsInterface {\n    /**\n     * A boolean to activate or not the debug mode\n     */\n    debug: boolean;\n    /**\n     * A boolean to activate or not the logs\n     */\n    logs: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CollStatsStageInterface.html":{"url":"interfaces/CollStatsStageInterface.html","title":"interface - CollStatsStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CollStatsStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/coll-stats-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                CollStats Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        latencyStats\n                                \n                                \n                                        queryExecStats\n                                \n                                \n                                        storageStats\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Adds the total number of documents in the collection to the return document.\nNOTE\nThe count is based on the collection’s metadata, which provides a fast but sometimes inaccurate count for\nsharded clusters.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        latencyStats\n                                    \n                                \n                                \n                                    \n                                        latencyStats:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Adds latency statistics to the return document.\nlatencyStats.histograms    Adds latency histogram information to the embedded documents in latencyStats if true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryExecStats\n                                    \n                                \n                                \n                                    \n                                        queryExecStats:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Adds query execution statistics to the return document.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        storageStats\n                                    \n                                \n                                \n                                    \n                                        storageStats:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Adds storage statistics to the return document.\nSpecify an empty document (i.e. storageStats: {}) to use the default scale factor of 1 for the various size data.\nScale factor of 1 displays the returned sizes in bytes.\nSpecify the scale factor (i.e. storageStats: { scale:  }) to use the specified scale factor for the\nvarious size data. For example, to display kilobytes rather than bytes, specify a scale value of 1024.\nIf you specify a non-integer scale factor, MongoDB uses the integer part of the specified factor. For example,\nif you specify a scale factor of 1023.999, MongoDB uses 1023 as the scale factor.\nThe scale factor does not affect those sizes that specify the unit of measurement in the field name, such as\n\"bytes currently in the cache\".\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface CollStatsStageInterface {\n    /**\n     * Adds latency statistics to the return document.\n     *\n     * latencyStats.histograms\tAdds latency histogram information to the embedded documents in latencyStats if true.\n     */\n    latencyStats: { histograms: boolean; };\n    /**\n     * Adds storage statistics to the return document.\n     *\n     * Specify an empty document (i.e. storageStats: {}) to use the default scale factor of 1 for the various size data.\n     * Scale factor of 1 displays the returned sizes in bytes.\n     *\n     * Specify the scale factor (i.e. storageStats: { scale:  }) to use the specified scale factor for the\n     * various size data. For example, to display kilobytes rather than bytes, specify a scale value of 1024.\n     *\n     * If you specify a non-integer scale factor, MongoDB uses the integer part of the specified factor. For example,\n     * if you specify a scale factor of 1023.999, MongoDB uses 1023 as the scale factor.\n     *\n     * The scale factor does not affect those sizes that specify the unit of measurement in the field name, such as\n     * \"bytes currently in the cache\".\n     */\n    storageStats: { scale: number; };\n    /**\n     * Adds the total number of documents in the collection to the return document.\n     *\n     * NOTE\n     *\n     * The count is based on the collection’s metadata, which provides a fast but sometimes inaccurate count for\n     * sharded clusters.\n     */\n    count: any;\n    /**\n     * Adds query execution statistics to the return document.\n     */\n    queryExecStats: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DebugBuildInterface.html":{"url":"interfaces/DebugBuildInterface.html","title":"interface - DebugBuildInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DebugBuildInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/core/debug-build.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the complete debug object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        actionList\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actionList\n                                    \n                                \n                                \n                                    \n                                        actionList:         DebugHistoryInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DebugHistoryInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    historyList\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    status\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {DebugHistoryInterface} from \"./debug-history.interface\";\n\n/**\n * Interface representing the complete debug object\n */\nexport interface DebugBuildInterface {\n    /**\n     * status\n     */\n    status: boolean;\n    /**\n     * historyList\n     */\n    actionList: DebugHistoryInterface[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DebugHistoryInterface.html":{"url":"interfaces/DebugHistoryInterface.html","title":"interface - DebugHistoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DebugHistoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/core/debug-history.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing a save of a builder action\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        action\n                                \n                                \n                                        date\n                                \n                                \n                                            Optional\n                                        pipeline\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                    \n                                \n                                \n                                    \n                                        action:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the action\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current date of the action\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pipeline\n                                    \n                                \n                                \n                                    \n                                        pipeline:         StageInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StageInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The last state of the pipeline when the action was recorded\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The last values received\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StageInterface} from \"./stage.interface\";\n\n/**\n * Interface representing a save of a builder action\n */\nexport interface DebugHistoryInterface {\n    /**\n     * The current date of the action\n     */\n    date: string;\n    /**\n     * The name of the action\n     */\n    action: string;\n    /**\n     * The last values received\n     */\n    value?: any;\n    /**\n     * The last state of the pipeline when the action was recorded\n     */\n    pipeline?: StageInterface[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetStageInterface.html":{"url":"interfaces/FacetStageInterface.html","title":"interface - FacetStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FacetStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/facet-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Facet Stage Interface\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        StageInterface[]\n\n                    \n                \n                        \n                            \n                                Defined in lib/interfaces/stages/facet-stage.interface.ts:6\n                            \n                        \n                \n                    \n                        Specify the output field name for each specified pipeline.\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {StageInterface} from \"../core/stage.interface\";\n\n/**\n * Facet Stage Interface\n */\nexport interface FacetStageInterface {\n    /**\n     * Specify the output field name for each specified pipeline.\n     */\n    [key: string]: StageInterface[]\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GeoNearStageInterface.html":{"url":"interfaces/GeoNearStageInterface.html","title":"interface - GeoNearStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GeoNearStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/geo-near-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                GeoNear Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        distanceField\n                                \n                                \n                                            Optional\n                                        distanceMultiplier\n                                \n                                \n                                            Optional\n                                        includeLocs\n                                \n                                \n                                            Optional\n                                        key\n                                \n                                \n                                            Optional\n                                        maxDistance\n                                \n                                \n                                            Optional\n                                        minDistance\n                                \n                                \n                                        near\n                                \n                                \n                                            Optional\n                                        query\n                                \n                                \n                                            Optional\n                                        spherical\n                                \n                                \n                                            Optional\n                                        uniqueDocs\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        distanceField\n                                    \n                                \n                                \n                                    \n                                        distanceField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The output field that contains the calculated distance. To specify a field within an embedded document, use dot\nnotation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        distanceMultiplier\n                                    \n                                \n                                \n                                    \n                                        distanceMultiplier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. The factor to multiply all distances returned by the query. For example, use the distanceMultiplier to\nconvert radians, as returned by a spherical query, to kilometers by multiplying by the radius of the Earth.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeLocs\n                                    \n                                \n                                \n                                    \n                                        includeLocs:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. This specifies the output field that identifies the location used to calculate the distance. This\noption is useful when a location field contains multiple locations. To specify a field within an embedded\ndocument, use dot notation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                    \n                                \n                                \n                                    \n                                        key:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Specify the geospatial indexed field to use when calculating the distance.\nIf your collection has multiple 2d and/or multiple 2dsphere indexes, you must use the key option to specify the\nindexed field path to use. Specify Which Geospatial Index to Use provides a full example.\nIf there is more than one 2d index or more than one 2dsphere index and you do not specify a key, MongoDB will\nreturn an error.\nIf you do not specify the key, and you have at most only one 2d index and/or only one 2dsphere index, MongoDB\nlooks first for a 2d index to use. If a 2d index does not exists, then MongoDB looks for a 2dsphere index to use.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxDistance\n                                    \n                                \n                                \n                                    \n                                        maxDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. The maximum distance from the center point that the documents can be. MongoDB limits the results to\nthose documents that fall within the specified distance from the center point.\nSpecify the distance in meters if the specified point is GeoJSON and in radians if the specified point is legacy\ncoordinate pairs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minDistance\n                                    \n                                \n                                \n                                    \n                                        minDistance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. The minimum distance from the center point that the documents can be. MongoDB limits the results to\nthose documents that fall outside the specified distance from the center point.\nSpecify the distance in meters for GeoJSON data and in radians for legacy coordinate pairs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        near\n                                    \n                                \n                                \n                                    \n                                        near:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The point for which to find the closest documents.\nIf using a 2dsphere index, you can specify the point as either a GeoJSON point or legacy coordinate pair.\nIf using a 2d index, specify the point as a legacy coordinate pair.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                    \n                                \n                                \n                                    \n                                        query:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Limits the results to the documents that match the query. The query syntax is the usual MongoDB read\noperation query syntax.\nYou cannot specify a $near predicate in the query field of the $geoNear stage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        spherical\n                                    \n                                \n                                \n                                    \n                                        spherical:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Determines how MongoDB calculates the distance between two points:\nWhen true, MongoDB uses $nearSphere semantics and calculates distances using spherical geometry.\nWhen false, MongoDB uses $near semantics: spherical geometry for 2dsphere indexes and planar geometry for 2d\nindexes.\nDefault: false.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uniqueDocs\n                                    \n                                \n                                \n                                    \n                                        uniqueDocs:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. If this value is true, the query returns a matching document once, even if more than one of the\ndocument’s location fields match the query.\nDeprecated since version 2.6: Geospatial queries no longer return duplicate results. The $uniqueDocs operator\nhas no impact on results.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface GeoNearStageInterface {\n    /**\n     * The point for which to find the closest documents.\n     * If using a 2dsphere index, you can specify the point as either a GeoJSON point or legacy coordinate pair.\n     *\n     * If using a 2d index, specify the point as a legacy coordinate pair.\n     */\n    near: any;\n    /**\n     * The output field that contains the calculated distance. To specify a field within an embedded document, use dot\n     * notation.\n     */\n    distanceField: string;\n    /**\n     * Optional. Determines how MongoDB calculates the distance between two points:\n     *\n     * When true, MongoDB uses $nearSphere semantics and calculates distances using spherical geometry.\n     * When false, MongoDB uses $near semantics: spherical geometry for 2dsphere indexes and planar geometry for 2d\n     * indexes.\n     *\n     * Default: false.\n     */\n    spherical?: boolean;\n    /**\n     * Optional. The maximum distance from the center point that the documents can be. MongoDB limits the results to\n     * those documents that fall within the specified distance from the center point.\n     *\n     * Specify the distance in meters if the specified point is GeoJSON and in radians if the specified point is legacy\n     * coordinate pairs.\n     */\n    maxDistance?: number;\n    /**\n     * Optional. Limits the results to the documents that match the query. The query syntax is the usual MongoDB read\n     * operation query syntax.\n     *\n     * You cannot specify a $near predicate in the query field of the $geoNear stage.\n     */\n    query?: any;\n    /**\n     * Optional. The factor to multiply all distances returned by the query. For example, use the distanceMultiplier to\n     * convert radians, as returned by a spherical query, to kilometers by multiplying by the radius of the Earth.\n     */\n    distanceMultiplier?: number;\n    /**\n     * Optional. This specifies the output field that identifies the location used to calculate the distance. This\n     * option is useful when a location field contains multiple locations. To specify a field within an embedded\n     * document, use dot notation.\n     */\n    includeLocs?: string;\n    /**\n     * Optional. If this value is true, the query returns a matching document once, even if more than one of the\n     * document’s location fields match the query.\n     * Deprecated since version 2.6: Geospatial queries no longer return duplicate results. The $uniqueDocs operator\n     * has no impact on results.\n     */\n    uniqueDocs?: boolean;\n    /**\n     * Optional. The minimum distance from the center point that the documents can be. MongoDB limits the results to\n     * those documents that fall outside the specified distance from the center point.\n     * Specify the distance in meters for GeoJSON data and in radians for legacy coordinate pairs.\n     */\n    minDistance?: number;\n    /**\n     * Optional. Specify the geospatial indexed field to use when calculating the distance.\n     *\n     * If your collection has multiple 2d and/or multiple 2dsphere indexes, you must use the key option to specify the\n     * indexed field path to use. Specify Which Geospatial Index to Use provides a full example.\n     * If there is more than one 2d index or more than one 2dsphere index and you do not specify a key, MongoDB will\n     * return an error.\n     *\n     * If you do not specify the key, and you have at most only one 2d index and/or only one 2dsphere index, MongoDB\n     * looks first for a 2d index to use. If a 2d index does not exists, then MongoDB looks for a 2dsphere index to use.\n     */\n    key?: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetResultResponseInterface.html":{"url":"interfaces/GetResultResponseInterface.html","title":"interface - GetResultResponseInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GetResultResponseInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/core/get-result-response.interface.ts\n        \n\n            \n                Description\n            \n            \n                The interface that represent the contract for a Getresult response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    GetCount\n                                \n                                \n                                    GetDocs\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            GetCount\n                        \n                        \n                    \n                \n            \n            \n                \nGetCount()\n                \n            \n\n\n            \n                \n                    Defined in lib/interfaces/core/get-result-response.interface.ts:15\n                \n            \n\n\n            \n                \n                    The method used to obtain the total number of documents found\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            GetDocs\n                        \n                        \n                    \n                \n            \n            \n                \nGetDocs()\n                \n            \n\n\n            \n                \n                    Defined in lib/interfaces/core/get-result-response.interface.ts:9\n                \n            \n\n\n            \n                \n                    The method used to obtain the documents found\n\n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface GetResultResponseInterface {\n    /**\n     * The method used to obtain the documents found\n     * @constructor\n     */\n    GetDocs(): any[];\n\n    /**\n     * The method used to obtain the total number of documents found\n     * @constructor\n     */\n    GetCount(): number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GraphLookupStageInterface.html":{"url":"interfaces/GraphLookupStageInterface.html","title":"interface - GraphLookupStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GraphLookupStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/graph-lookup-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                GraphLookup Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        as\n                                \n                                \n                                        connectFromField\n                                \n                                \n                                        connectToField\n                                \n                                \n                                            Optional\n                                        depthField\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        maxDepth\n                                \n                                \n                                            Optional\n                                        restrictSearchWithMatch\n                                \n                                \n                                        startWith\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        as\n                                    \n                                \n                                \n                                    \n                                        as:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the array field added to each output document. Contains the documents traversed in the $graphLookup stage\nto reach the document.\nDocuments returned in the as field are not guaranteed to be in any order.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connectFromField\n                                    \n                                \n                                \n                                    \n                                        connectFromField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Field name whose value $graphLookup uses to recursively match against the connectToField of other documents in\nthe collection. If the value is an array, each element is individually followed through the traversal process.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        connectToField\n                                    \n                                \n                                \n                                    \n                                        connectToField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Field name in other documents against which to match the value of the field specified by the connectFromField\nparameter.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        depthField\n                                    \n                                \n                                \n                                    \n                                        depthField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Name of the field to add to each traversed document in the search path. The value of this field is the\nrecursion depth for the document, represented as a NumberLong. Recursion depth value starts at zero, so the first\nlookup corresponds to zero depth.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Target collection for the $graphLookup operation to search, recursively matching the connectFromField to the\nconnectToField. The from collection cannot be sharded and must be in the same database as any other collections\nused in the operation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxDepth\n                                    \n                                \n                                \n                                    \n                                        maxDepth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Non-negative integral number specifying the maximum recursion depth.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        restrictSearchWithMatch\n                                    \n                                \n                                \n                                    \n                                        restrictSearchWithMatch:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. A document specifying additional conditions for the recursive search. The syntax is identical to query\nfilter syntax.\nNOTE\nYou cannot use any aggregation expression in this filter. For example, a query document such as\n{ lastName: { $ne: \"$lastName\" } }\nwill not work in this context to find documents in which the lastName value is different from the lastName value\nof the input document, because \"$lastName\" will act as a string literal, not a field path.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startWith\n                                    \n                                \n                                \n                                    \n                                        startWith:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Expression that specifies the value of the connectFromField with which to start the recursive search. Optionally,\nstartWith may be array of values, each of which is individually followed through the traversal process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface GraphLookupStageInterface {\n    /**\n     * Target collection for the $graphLookup operation to search, recursively matching the connectFromField to the\n     * connectToField. The from collection cannot be sharded and must be in the same database as any other collections\n     * used in the operation.\n     */\n    from: string;\n    /**\n     * Expression that specifies the value of the connectFromField with which to start the recursive search. Optionally,\n     * startWith may be array of values, each of which is individually followed through the traversal process.\n     */\n    startWith: any;\n    /**\n     * Field name whose value $graphLookup uses to recursively match against the connectToField of other documents in\n     * the collection. If the value is an array, each element is individually followed through the traversal process.\n     */\n    connectFromField: string;\n    /**\n     * Field name in other documents against which to match the value of the field specified by the connectFromField\n     * parameter.\n     */\n    connectToField: string;\n    /**\n     * Name of the array field added to each output document. Contains the documents traversed in the $graphLookup stage\n     * to reach the document.\n     *\n     * Documents returned in the as field are not guaranteed to be in any order.\n     */\n    as: string;\n    /**\n     * Optional. Non-negative integral number specifying the maximum recursion depth.\n     */\n    maxDepth?: number;\n    /**\n     * Optional. Name of the field to add to each traversed document in the search path. The value of this field is the\n     * recursion depth for the document, represented as a NumberLong. Recursion depth value starts at zero, so the first\n     * lookup corresponds to zero depth.\n     */\n    depthField?: string;\n    /**\n     * Optional. A document specifying additional conditions for the recursive search. The syntax is identical to query\n     * filter syntax.\n     *\n     * NOTE\n     *\n     * You cannot use any aggregation expression in this filter. For example, a query document such as\n     *\n     * { lastName: { $ne: \"$lastName\" } }\n     *\n     * will not work in this context to find documents in which the lastName value is different from the lastName value\n     * of the input document, because \"$lastName\" will act as a string literal, not a field path.\n     */\n    restrictSearchWithMatch?: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GroupStageInterface.html":{"url":"interfaces/GroupStageInterface.html","title":"interface - GroupStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GroupStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/group-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Group Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in lib/interfaces/stages/group-stage.interface.ts:9\n                            \n                        \n                \n                    \n                        field Optional. Computed using the accumulator operators.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Required. If you specify an _id value of null, or any other constant value, the $group stage calculates\naccumulated values for all the input documents as a whole.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface GroupStageInterface {\n    /**\n     * Required. If you specify an _id value of null, or any other constant value, the $group stage calculates\n     * accumulated values for all the input documents as a whole.\n     */\n    _id: any;\n    /**\n     * field Optional. Computed using the accumulator operators.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InitOptionsInterface.html":{"url":"interfaces/InitOptionsInterface.html","title":"interface - InitOptionsInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InitOptionsInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/core/init-options.interface.ts\n        \n\n            \n                Description\n            \n            \n                Contract representing a partial builder's options bundle\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        debug\n                                \n                                \n                                            Optional\n                                        logs\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A boolean to activate or not the debug mode\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logs\n                                    \n                                \n                                \n                                    \n                                        logs:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A boolean to activate or not the logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface InitOptionsInterface {\n    /**\n     * A boolean to activate or not the debug mode\n     */\n    debug?: boolean;\n    /**\n     * A boolean to activate or not the logs\n     */\n    logs?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LookupConditionInterface.html":{"url":"interfaces/LookupConditionInterface.html","title":"interface - LookupConditionInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LookupConditionInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/lookup-condition.interface.ts\n        \n\n            \n                Description\n            \n            \n                Lookup Condition Payload Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        as\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        let\n                                \n                                \n                                            Optional\n                                        pipeline\n                                \n                                \n                                            Optional\n                                        project\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        as\n                                    \n                                \n                                \n                                    \n                                        as:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the name of the new array field to add to the input documents. The new array field contains the\nmatching documents from the from collection. If the specified name already exists in the input document, the\nexisting field is overwritten.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the collection in the same database to perform the join with. The from collection cannot be sharded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        let\n                                    \n                                \n                                \n                                    \n                                        let:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Specifies variables to use in the pipeline field stages. Use the variable expressions to access the\nfields from the documents input to the $lookup stage.\nThe pipeline cannot directly access the input document fields. Instead, first define the variables for the input\ndocument fields, and then reference the variables in the stages in the pipeline.\nNOTE\nTo reference variables in pipeline stages, use the \"$$\" syntax.\nThe let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\nthe pipeline.\nA $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\nexpressions inside of the $match syntax.\nWithout the use of the $expr operator, $match can refer to fields in a document but cannot access variables\ndefined by a $lookup let clause.\nThe $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\nsuch as range queries, cannot use indexes on the from collection.\nOther (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pipeline\n                                    \n                                \n                                \n                                    \n                                        pipeline:         StageInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StageInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Specifies the pipeline to run on the joined collection. The pipeline determines the resulting documents from the\njoined collection. To return all documents, specify an empty pipeline [].\nThe pipeline cannot include the $out stage or the $merge stage.\nThe pipeline cannot directly access the input document fields. Instead, first define the variables for the input\ndocument fields, and then reference the variables in the stages in the pipeline.\nNOTE\nTo reference variables in pipeline stages, use the \"$$\" syntax.\nThe let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\nthe pipeline.\nA $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\nexpressions inside of the $match syntax.\nWithout the use of the $expr operator, $match can refer to fields in a document but cannot access variables\ndefined by a $lookup let clause.\nThe $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\nsuch as range queries, cannot use indexes on the from collection.\nOther (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        project\n                                    \n                                \n                                \n                                    \n                                        project:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The project takes a document that can specify the inclusion of fields, the suppression of the _id field, the\naddition of new fields, and the resetting of the values of existing fields. Alternatively, you may specify the\nexclusion of fields.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StageInterface} from \"../index\";\n\n/**\n * Lookup Condition Payload Interface\n */\nexport interface LookupConditionInterface {\n    /**\n     * Specifies the collection in the same database to perform the join with. The from collection cannot be sharded.\n     */\n    from: string;\n    /**\n     * Optional. Specifies variables to use in the pipeline field stages. Use the variable expressions to access the\n     * fields from the documents input to the $lookup stage.\n     *\n     * The pipeline cannot directly access the input document fields. Instead, first define the variables for the input\n     * document fields, and then reference the variables in the stages in the pipeline.\n     *\n     * NOTE\n     *\n     * To reference variables in pipeline stages, use the \"$$\" syntax.\n     *\n     * The let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\n     * the pipeline.\n     *\n     * A $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\n     * expressions inside of the $match syntax.\n     *\n     * Without the use of the $expr operator, $match can refer to fields in a document but cannot access variables\n     * defined by a $lookup let clause.\n     *\n     * The $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\n     * such as range queries, cannot use indexes on the from collection.\n     *\n     * Other (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n     */\n    let?: { [index: string]: string };\n    /**\n     * The project takes a document that can specify the inclusion of fields, the suppression of the _id field, the\n     * addition of new fields, and the resetting of the values of existing fields. Alternatively, you may specify the\n     * exclusion of fields.\n     */\n    project?: { [index: string]: any };\n    /**\n     * Specifies the pipeline to run on the joined collection. The pipeline determines the resulting documents from the\n     * joined collection. To return all documents, specify an empty pipeline [].\n     *\n     * The pipeline cannot include the $out stage or the $merge stage.\n     *\n     * The pipeline cannot directly access the input document fields. Instead, first define the variables for the input\n     * document fields, and then reference the variables in the stages in the pipeline.\n     *\n     * NOTE\n     *\n     * To reference variables in pipeline stages, use the \"$$\" syntax.\n     *\n     * The let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\n     * the pipeline.\n     *\n     * A $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\n     * expressions inside of the $match syntax.\n     *\n     * Without the use of the $expr operator, $match can refer to fields in a document but cannot access variables\n     * defined by a $lookup let clause.\n     *\n     * The $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\n     * such as range queries, cannot use indexes on the from collection.\n     *\n     *\n     * Other (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n     */\n    pipeline?: StageInterface[];\n    /**\n     * Specifies the name of the new array field to add to the input documents. The new array field contains the\n     * matching documents from the from collection. If the specified name already exists in the input document, the\n     * existing field is overwritten.\n     */\n    as: string\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LookupEqualityInterface.html":{"url":"interfaces/LookupEqualityInterface.html","title":"interface - LookupEqualityInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LookupEqualityInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/lookup-equality.interface.ts\n        \n\n            \n                Description\n            \n            \n                Lookup Equality Payload Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        as\n                                \n                                \n                                        foreignField\n                                \n                                \n                                        from\n                                \n                                \n                                        localField\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        as\n                                    \n                                \n                                \n                                    \n                                        as:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the name of the new array field to add to the input documents. The new array field contains the\nmatching documents from the from collection. If the specified name already exists in the input document, the\nexisting field is overwritten.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        foreignField\n                                    \n                                \n                                \n                                    \n                                        foreignField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the field from the documents in the from collection. $lookup performs an equality match on the\nforeignField to the localField from the input documents. If a document in the from collection does not contain\nthe foreignField, the $lookup treats the value as null for matching purposes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the collection in the same database to perform the join with. The from collection cannot be sharded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localField\n                                    \n                                \n                                \n                                    \n                                        localField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the field from the documents input to the $lookup stage. $lookup performs an equality match on the\nlocalField to the foreignField from the documents of the from collection. If an input document does not contain\nthe localField, the $lookup treats the field as having a value of null for matching purposes.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LookupEqualityInterface {\n    /**\n     * Specifies the collection in the same database to perform the join with. The from collection cannot be sharded.\n     */\n    from: string;\n    /**\n     * Specifies the field from the documents input to the $lookup stage. $lookup performs an equality match on the\n     * localField to the foreignField from the documents of the from collection. If an input document does not contain\n     * the localField, the $lookup treats the field as having a value of null for matching purposes.\n     */\n    localField: string;\n    /**\n     * Specifies the field from the documents in the from collection. $lookup performs an equality match on the\n     * foreignField to the localField from the input documents. If a document in the from collection does not contain\n     * the foreignField, the $lookup treats the value as null for matching purposes.\n     */\n    foreignField: string;\n    /**\n     * Specifies the name of the new array field to add to the input documents. The new array field contains the\n     * matching documents from the from collection. If the specified name already exists in the input document, the\n     * existing field is overwritten.\n     */\n    as: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LookupStageInterface.html":{"url":"interfaces/LookupStageInterface.html","title":"interface - LookupStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LookupStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/lookup-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Lookup Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        as\n                                \n                                \n                                            Optional\n                                        foreignField\n                                \n                                \n                                        from\n                                \n                                \n                                            Optional\n                                        let\n                                \n                                \n                                            Optional\n                                        localField\n                                \n                                \n                                            Optional\n                                        pipeline\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        as\n                                    \n                                \n                                \n                                    \n                                        as:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the name of the new array field to add to the input documents. The new array field contains the\nmatching documents from the from collection. If the specified name already exists in the input document, the\nexisting field is overwritten.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        foreignField\n                                    \n                                \n                                \n                                    \n                                        foreignField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Specifies the field from the documents in the from collection. $lookup performs an equality match on the\nforeignField to the localField from the input documents. If a document in the from collection does not contain\nthe foreignField, the $lookup treats the value as null for matching purposes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the collection in the same database to perform the join with. The from collection cannot be sharded.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        let\n                                    \n                                \n                                \n                                    \n                                        let:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Specifies variables to use in the pipeline field stages. Use the variable expressions to access the\nfields from the documents input to the $lookup stage.\nThe pipeline cannot directly access the input document fields. Instead, first define the variables for the input\ndocument fields, and then reference the variables in the stages in the pipeline.\nNOTE\nTo reference variables in pipeline stages, use the \"$$\" syntax.\nThe let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\nthe pipeline.\nA $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\nexpressions inside of the $match syntax.\nWithout the use of the $expr operator, $match can refer to fields in a document but cannot access variables\ndefined by a $lookup let clause.\nThe $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\nsuch as range queries, cannot use indexes on the from collection.\nOther (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localField\n                                    \n                                \n                                \n                                    \n                                        localField:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Specifies the field from the documents input to the $lookup stage. $lookup performs an equality match on the\nlocalField to the foreignField from the documents of the from collection. If an input document does not contain\nthe localField, the $lookup treats the field as having a value of null for matching purposes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pipeline\n                                    \n                                \n                                \n                                    \n                                        pipeline:         StageInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StageInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Specifies the pipeline to run on the joined collection. The pipeline determines the resulting documents from the\njoined collection. To return all documents, specify an empty pipeline [].\nThe pipeline cannot include the $out stage or the $merge stage.\nThe pipeline cannot directly access the input document fields. Instead, first define the variables for the input\ndocument fields, and then reference the variables in the stages in the pipeline.\nNOTE\nTo reference variables in pipeline stages, use the \"$$\" syntax.\nThe let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\nthe pipeline.\nA $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\nexpressions inside of the $match syntax.\nWithout the use of the $expr operator, $match can refer to fields in a document but cannot access variables\ndefined by a $lookup let clause.\nThe $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\nsuch as range queries, cannot use indexes on the from collection.\nOther (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StageInterface} from \"../core/stage.interface\";\n\n/**\n * Lookup Stage Interface\n */\nexport interface LookupStageInterface {\n    /**\n     * Specifies the collection in the same database to perform the join with. The from collection cannot be sharded.\n     */\n    from: string;\n    /**\n     * Specifies the name of the new array field to add to the input documents. The new array field contains the\n     * matching documents from the from collection. If the specified name already exists in the input document, the\n     * existing field is overwritten.\n     */\n    as: string;\n    /**\n     * Specifies the field from the documents input to the $lookup stage. $lookup performs an equality match on the\n     * localField to the foreignField from the documents of the from collection. If an input document does not contain\n     * the localField, the $lookup treats the field as having a value of null for matching purposes.\n     */\n    localField?: string;\n    /**\n     * Specifies the field from the documents in the from collection. $lookup performs an equality match on the\n     * foreignField to the localField from the input documents. If a document in the from collection does not contain\n     * the foreignField, the $lookup treats the value as null for matching purposes.\n     */\n    foreignField?: string;\n    /**\n     * Optional. Specifies variables to use in the pipeline field stages. Use the variable expressions to access the\n     * fields from the documents input to the $lookup stage.\n     *\n     * The pipeline cannot directly access the input document fields. Instead, first define the variables for the input\n     * document fields, and then reference the variables in the stages in the pipeline.\n     *\n     * NOTE\n     *\n     * To reference variables in pipeline stages, use the \"$$\" syntax.\n     *\n     * The let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\n     * the pipeline.\n     *\n     * A $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\n     * expressions inside of the $match syntax.\n     *\n     * Without the use of the $expr operator, $match can refer to fields in a document but cannot access variables\n     * defined by a $lookup let clause.\n     *\n     * The $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\n     * such as range queries, cannot use indexes on the from collection.\n     *\n     * Other (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n     */\n    let?: { [key: string]: any },\n    /**\n     * Specifies the pipeline to run on the joined collection. The pipeline determines the resulting documents from the\n     * joined collection. To return all documents, specify an empty pipeline [].\n     *\n     * The pipeline cannot include the $out stage or the $merge stage.\n     *\n     * The pipeline cannot directly access the input document fields. Instead, first define the variables for the input\n     * document fields, and then reference the variables in the stages in the pipeline.\n     *\n     * NOTE\n     *\n     * To reference variables in pipeline stages, use the \"$$\" syntax.\n     *\n     * The let variables can be accessed by the stages in the pipeline, including additional $lookup stages nested in\n     * the pipeline.\n     *\n     * A $match stage requires the use of an $expr operator to access the variables. $expr allows the use of aggregation\n     * expressions inside of the $match syntax.\n     *\n     * Without the use of the $expr operator, $match can refer to fields in a document but cannot access variables\n     * defined by a $lookup let clause.\n     *\n     * The $expr operator only uses indexes on the from collection for equality matches. Non-equality match queries,\n     * such as range queries, cannot use indexes on the from collection.\n     *\n     *\n     * Other (non-$match) stages in the pipeline do not require an $expr operator to access the variables.\n     */\n    pipeline?: StageInterface[],\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MergeStageInterface.html":{"url":"interfaces/MergeStageInterface.html","title":"interface - MergeStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MergeStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/merge-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Merge Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        into\n                                \n                                \n                                            Optional\n                                        let\n                                \n                                \n                                            Optional\n                                        on\n                                \n                                \n                                            Optional\n                                        whenMatched\n                                \n                                \n                                            Optional\n                                        whenNotMatched\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        into\n                                    \n                                \n                                \n                                    \n                                        into:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The output collection. Specify either:\nThe collection name as a string to output to a collection in the same database where the aggregation is run. For\nexample:\ninto: \"myOutput\"\nThe database and collection name in a document to output to a collection in the specified database. For example:\ninto: { db:\"myDB\", coll:\"myOutput\" }\nNOTE\nIf the output collection does not exist, $merge creates the collection:\nFor a replica set or a standalone, if the output database does not exist, $merge also creates the database.\nFor a sharded cluster, the specified output database must already exist.\nThe output collection can be a sharded collection.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        let\n                                    \n                                \n                                \n                                    \n                                        let:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Specifies variables accessible for use in the whenMatched pipeline\nSpecify a document with the variable name and value expression:\n{ : , ..., :  }\nIf unspecified, defaults to { new: \"$$ROOT\" }; i.e. the whenMatched pipeline can access the $$new variable.\nNOTE\nStarting in MongoDB 4.2.2, the $$new variable is reserved, and cannot be overridden.\nTo access the let variables in the whenMatched pipeline, use the double dollar signs ($$) prefix and variable\nname $$.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        on\n                                    \n                                \n                                \n                                    \n                                        on:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. Field or fields that act as a unique identifier for a document. The identifier determines if a results\ndocument matches an already existing document in the output collection. Specify either:\nA single field name as a string. For example:\non: \"_id\"\nA combination of fields in an array. For example:\non: [ \"date\", \"customerId\" ]\nThe order of the fields in the array does not matter, and you cannot specify the same field multiple times.\nFor the specified field or fields:\nThe aggregation results documents must contain the field(s) specified in the on, unless the on field is the _id\nfield. If the _id field is missing from a results document, MongoDB adds it automatically.\nThe specified field or fields cannot contain a null or an array value.\n$merge requires a unique, index with keys that correspond to the on identifier fields. Although the order of the\nindex key specification does not matter, the unique index must only contain the on fields as its keys.\nThe index must also have the same collation as the aggregation’s collation.\nThe unique index can be a sparse index.\nFor output collections that already exist, the corresponding index must already exist.\nThe default value for on depends on the output collection:\nIf the output collection does not exist, the on identifier must be and defaults to the _id field. The\ncorresponding unique _id index is automatically created.\nTIP\nTo use a different on identifier field(s) for a collection that does not exist, you can create the collection\nfirst by creating a unique index on the desired field(s). See the section on non-existent output collection for\nan example.\nIf the existing output collection is unsharded, the on identifier defaults to the _id field.\nIf the existing output collection is a sharded collection, the on identifier defaults to all the shard key fields\nand the _id field. If specifying a different on identifier, the on must contain all the shard key fields.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        whenMatched\n                                    \n                                \n                                \n                                    \n                                        whenMatched:         WhenMatchedType | StageInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WhenMatchedType | StageInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. The behavior of $merge if a result document and an existing document in the collection have the same\nvalue for the specified on field(s).\nYou can specify either:\nOne of the pre-defined action strings:\nAction    Description\n“replace”\nReplace the existing document in the output collection with the matching results document.\nWhen performing a replace, the replacement document cannot result in a modification of the _id value or, if the\noutput collection is sharded, the shard key value. Otherwise, the operation results in an error.\nTIP\nTo avoid this error, if the on field does not include the _id field, remove the _id field in the aggregation\nresults to avoid the error, such as with a preceding $unset stage, etc.\n“keepExisting”\nKeep the existing document in the output collection.\n“merge” (Default)\nMerge the matching documents (similar to the $mergeObjects operator).\nIf the results document contains fields not in the existing document, add these new fields to the existing\ndocument.\nIf the results document contains fields in the existing document, replace the existing field values with those\nfrom the results document.\nFor example, if the output collection has the document:\n{ _id: 1, a: 1, b: 1 }\nAnd the aggregation results has the document:\n{ _id: 1, b: 5, z: 1 }\nThen, the merged document is:\n{ _id: 1, a: 1, b: 5, z: 1 }\nWhen performing a merge, the merged document cannot result in a modification of the _id value or, if the output\ncollection is sharded, the shard key value. Otherwise, the operation results in an error.\nTIP\nTo avoid this error, if the on field does not include the _id field, remove the _id field in the aggregation\nresults to avoid the error, such as with a preceding $unset stage, etc.\n“fail”\nStop and fail the aggregation operation. Any changes to the output collection from previous documents are not\nreverted.\nAn aggregation pipeline to update the document in the collection.\n[ ,  ... ]\nThe pipeline can only consist of the following stages:\n$addFields and its alias $set\n$project and its alias $unset\n$replaceRoot and its alias $replaceWith\nThe pipeline cannot modify the on field’s value. For example, if you are matching on the field month, the\npipeline cannot modify the month field.\nThe whenMatched pipeline can directly access the fields of the existing documents in the output collection using\n$.\nTo access the fields from the aggregation results documents, use either:\nThe built-in $$new variable to access the field, i.e. $$new.. The $$new variable is only available if the\nlet specification is omitted.\nNOTE\nStarting in MongoDB 4.2.2, the $$new variable is reserved, and cannot be overridden.\nThe user-defined variables in the let field, i.e. $$..\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        whenNotMatched\n                                    \n                                \n                                \n                                    \n                                        whenNotMatched:         WhenNotMatchedType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WhenNotMatchedType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. The behavior of $merge if a result document does not match an existing document in the out collection.\nYou can specify one of the pre-defined action strings:\nAction    Description\n“insert” (Default)\nInsert the document into the output collection.\n“discard”\nDiscard the document; i.e. $merge does not insert the document into the output collection.\n“fail”\nStop and fail the aggregation operation. Any changes already written to the output collection are not reverted.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StageInterface} from \"../core/stage.interface\";\n/**\n * Merge Stage Interface\n */\nexport interface MergeStageInterface {\n    /**\n     * The output collection. Specify either:\n     *\n     * The collection name as a string to output to a collection in the same database where the aggregation is run. For\n     * example:\n     *\n     * into: \"myOutput\"\n     *\n     * The database and collection name in a document to output to a collection in the specified database. For example:\n     *\n     * into: { db:\"myDB\", coll:\"myOutput\" }\n     *\n     * NOTE\n     *\n     * If the output collection does not exist, $merge creates the collection:\n     *\n     * For a replica set or a standalone, if the output database does not exist, $merge also creates the database.\n     *\n     * For a sharded cluster, the specified output database must already exist.\n     *\n     * The output collection can be a sharded collection.\n     */\n    into: any;\n    /**\n     * Optional. Field or fields that act as a unique identifier for a document. The identifier determines if a results\n     * document matches an already existing document in the output collection. Specify either:\n     *\n     * A single field name as a string. For example:\n     *\n     * on: \"_id\"\n     *\n     * A combination of fields in an array. For example:\n     *\n     * on: [ \"date\", \"customerId\" ]\n     *\n     * The order of the fields in the array does not matter, and you cannot specify the same field multiple times.\n     *\n     * For the specified field or fields:\n     *\n     * The aggregation results documents must contain the field(s) specified in the on, unless the on field is the _id\n     * field. If the _id field is missing from a results document, MongoDB adds it automatically.\n     * The specified field or fields cannot contain a null or an array value.\n     * $merge requires a unique, index with keys that correspond to the on identifier fields. Although the order of the\n     * index key specification does not matter, the unique index must only contain the on fields as its keys.\n     *\n     * The index must also have the same collation as the aggregation’s collation.\n     * The unique index can be a sparse index.\n     * For output collections that already exist, the corresponding index must already exist.\n     * The default value for on depends on the output collection:\n     *\n     * If the output collection does not exist, the on identifier must be and defaults to the _id field. The\n     * corresponding unique _id index is automatically created.\n     *\n     * TIP\n     *\n     * To use a different on identifier field(s) for a collection that does not exist, you can create the collection\n     * first by creating a unique index on the desired field(s). See the section on non-existent output collection for\n     * an example.\n     *\n     * If the existing output collection is unsharded, the on identifier defaults to the _id field.\n     *\n     * If the existing output collection is a sharded collection, the on identifier defaults to all the shard key fields\n     * and the _id field. If specifying a different on identifier, the on must contain all the shard key fields.\n     */\n    on?: string | string[];\n    /**\n     * Optional. The behavior of $merge if a result document and an existing document in the collection have the same\n     * value for the specified on field(s).\n     *\n     * You can specify either:\n     *\n     * One of the pre-defined action strings:\n     *\n     * Action\tDescription\n     *\n     * “replace”\n     *\n     * Replace the existing document in the output collection with the matching results document.\n     * When performing a replace, the replacement document cannot result in a modification of the _id value or, if the\n     * output collection is sharded, the shard key value. Otherwise, the operation results in an error.\n     *\n     * TIP\n     *\n     * To avoid this error, if the on field does not include the _id field, remove the _id field in the aggregation\n     * results to avoid the error, such as with a preceding $unset stage, etc.\n     *\n     * “keepExisting”\n     *\n     * Keep the existing document in the output collection.\n     * “merge” (Default)\n     * Merge the matching documents (similar to the $mergeObjects operator).\n     *\n     * If the results document contains fields not in the existing document, add these new fields to the existing\n     * document.\n     * If the results document contains fields in the existing document, replace the existing field values with those\n     * from the results document.\n     * For example, if the output collection has the document:\n     *\n     * { _id: 1, a: 1, b: 1 }\n     *\n     * And the aggregation results has the document:\n     *\n     * { _id: 1, b: 5, z: 1 }\n     *\n     * Then, the merged document is:\n     *\n     * { _id: 1, a: 1, b: 5, z: 1 }\n     *\n     * When performing a merge, the merged document cannot result in a modification of the _id value or, if the output\n     * collection is sharded, the shard key value. Otherwise, the operation results in an error.\n     *\n     * TIP\n     *\n     * To avoid this error, if the on field does not include the _id field, remove the _id field in the aggregation\n     * results to avoid the error, such as with a preceding $unset stage, etc.\n     *\n     * “fail”\n     *\n     * Stop and fail the aggregation operation. Any changes to the output collection from previous documents are not\n     * reverted.\n     *\n     * An aggregation pipeline to update the document in the collection.\n     *\n     * [ ,  ... ]\n     *\n     * The pipeline can only consist of the following stages:\n     *\n     * $addFields and its alias $set\n     * $project and its alias $unset\n     * $replaceRoot and its alias $replaceWith\n     * The pipeline cannot modify the on field’s value. For example, if you are matching on the field month, the\n     * pipeline cannot modify the month field.\n     *\n     * The whenMatched pipeline can directly access the fields of the existing documents in the output collection using\n     * $.\n     *\n     * To access the fields from the aggregation results documents, use either:\n     *\n     * The built-in $$new variable to access the field, i.e. $$new.. The $$new variable is only available if the\n     * let specification is omitted.\n     *\n     * NOTE\n     *\n     * Starting in MongoDB 4.2.2, the $$new variable is reserved, and cannot be overridden.\n     *\n     * The user-defined variables in the let field, i.e. $$..\n     */\n    whenMatched?: WhenMatchedType | StageInterface[];\n    /**\n     * Optional. Specifies variables accessible for use in the whenMatched pipeline\n     *\n     * Specify a document with the variable name and value expression:\n     *\n     * { : , ..., :  }\n     *\n     * If unspecified, defaults to { new: \"$$ROOT\" }; i.e. the whenMatched pipeline can access the $$new variable.\n     *\n     * NOTE\n     *\n     * Starting in MongoDB 4.2.2, the $$new variable is reserved, and cannot be overridden.\n     *\n     * To access the let variables in the whenMatched pipeline, use the double dollar signs ($$) prefix and variable\n     * name $$.\n     */\n    let?: { [key: string]: any; };\n    /**\n     * Optional. The behavior of $merge if a result document does not match an existing document in the out collection.\n     *\n     * You can specify one of the pre-defined action strings:\n     *\n     * Action\tDescription\n     *\n     * “insert” (Default)\n     *\n     * Insert the document into the output collection.\n     *\n     * “discard”\n     *\n     * Discard the document; i.e. $merge does not insert the document into the output collection.\n     *\n     * “fail”\n     *\n     * Stop and fail the aggregation operation. Any changes already written to the output collection are not reverted.\n     */\n    whenNotMatched?: WhenNotMatchedType;\n}\n\n/**\n * Possible values for WhenMatched\n */\nexport declare type WhenMatchedType = 'replace' | 'keepExisting' | 'merge' | 'fail' | 'pipeline';\n\n/**\n * Possible values for WhenNotMatchedType\n */\nexport declare type WhenNotMatchedType = 'insert' | 'discard' | 'fail';\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OutStageInterface.html":{"url":"interfaces/OutStageInterface.html","title":"interface - OutStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OutStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/out-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Out Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coll\n                                \n                                \n                                        db\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coll\n                                    \n                                \n                                \n                                    \n                                        coll:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The output collection name.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        db\n                                    \n                                \n                                \n                                    \n                                        db:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The output database name.\nFor a replica set or a standalone, if the output database does not exist, $out also creates the database.\nFor a sharded cluster, the specified output database must already exist.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface OutStageInterface {\n    /**\n     * The output database name.\n     *\n     * For a replica set or a standalone, if the output database does not exist, $out also creates the database.\n     *\n     * For a sharded cluster, the specified output database must already exist.\n     */\n    db: string;\n    /**\n     * The output collection name.\n     */\n    coll: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PipelineError.html":{"url":"classes/PipelineError.html","title":"class - PipelineError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PipelineError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/errors/pipeline/pipeline.error.ts\n        \n\n            \n                Description\n            \n            \n                PipelineError\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/errors/pipeline/pipeline.error.ts:8\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'PipelineError'\n                        \n                    \n                        \n                            \n                                    Defined in lib/errors/pipeline/pipeline.error.ts:8\n                            \n                        \n\n                \n                    \n                        name\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PipelineError extends Error {\n    /**\n     * name\n     */\n    name = 'PipelineError';\n\n    /**\n     * constructor\n     * @param message\n     */\n    constructor(message?: string) {\n        super(message ? message : 'An error occurred while building the pipeline.');\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReplaceRootStageInterface.html":{"url":"interfaces/ReplaceRootStageInterface.html","title":"interface - ReplaceRootStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ReplaceRootStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/replace-root-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                ReplaceRoot Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        newRoot\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        newRoot\n                                    \n                                \n                                \n                                    \n                                        newRoot:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    newRoot, replacementDocument\nThe replacement document can be any valid expression that resolves to a document. The stage errors and fails if\n is not a document.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ReplaceRootStageInterface {\n    /**\n     * newRoot, replacementDocument\n     *\n     * The replacement document can be any valid expression that resolves to a document. The stage errors and fails if\n     *  is not a document.\n     */\n    newRoot: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SampleStageInterface.html":{"url":"interfaces/SampleStageInterface.html","title":"interface - SampleStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SampleStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/sample-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Sample Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    size, positive integer\nN random documents, depending on the size of the collection, the size of N, and $sample’s position in the\npipeline.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SampleStageInterface {\n    /**\n     * size, positive integer\n     *\n     * N random documents, depending on the size of the collection, the size of N, and $sample’s position in the\n     * pipeline.\n     */\n    size: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StageErrorInterface.html":{"url":"interfaces/StageErrorInterface.html","title":"interface - StageErrorInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StageErrorInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/core/stage-error.interface.ts\n        \n\n            \n                Description\n            \n            \n                interface StageErrorInterface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        message\n                                \n                                \n                                        stageType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stageType\n                                    \n                                \n                                \n                                    \n                                        stageType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    stageType\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface StageErrorInterface {\n    /**\n     * stageType\n     */\n    stageType: string;\n    /**\n     * message\n     */\n    message: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UnionWithStageInterface.html":{"url":"interfaces/UnionWithStageInterface.html","title":"interface - UnionWithStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UnionWithStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/union-with-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                UnionWith Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coll\n                                \n                                \n                                            Optional\n                                        pipeline\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coll\n                                    \n                                \n                                \n                                    \n                                        coll:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The collection or view whose pipeline results you wish to include in the result set.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pipeline\n                                    \n                                \n                                \n                                    \n                                        pipeline:         StageInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StageInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. An aggregation pipeline to apply to the specified coll.\n[ , , ...]\nThe pipeline cannot include the $out and $merge stages.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StageInterface} from \"../core/stage.interface\";\n\n/**\n * UnionWith Stage Interface\n */\nexport interface UnionWithStageInterface {\n    /**\n     * The collection or view whose pipeline results you wish to include in the result set.\n     */\n    coll: string;\n    /**\n     * Optional. An aggregation pipeline to apply to the specified coll.\n     *\n     * [ , , ...]\n     *\n     * The pipeline cannot include the $out and $merge stages.\n     */\n    pipeline?: StageInterface[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UnwindStageInterface.html":{"url":"interfaces/UnwindStageInterface.html","title":"interface - UnwindStageInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UnwindStageInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interfaces/stages/unwind-stage.interface.ts\n        \n\n            \n                Description\n            \n            \n                Unwind Stage Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        includeArrayIndex\n                                \n                                \n                                        path\n                                \n                                \n                                            Optional\n                                        preserveNullAndEmptyArrays\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        includeArrayIndex\n                                    \n                                \n                                \n                                    \n                                        includeArrayIndex:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional. The name of a new field to hold the array index of the element. The name cannot start with a dollar\nsign $.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Field path to an array field. To specify a field path, prefix the field name with a dollar sign $ and enclose in\nquotes.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preserveNullAndEmptyArrays\n                                    \n                                \n                                \n                                    \n                                        preserveNullAndEmptyArrays:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional.\nIf true, if the path is null, missing, or an empty array, $unwind outputs the document.\nIf false, if path is null, missing, or an empty array, $unwind does not output a document.\nThe default value is false.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface UnwindStageInterface {\n    /**\n     * Field path to an array field. To specify a field path, prefix the field name with a dollar sign $ and enclose in\n     * quotes.\n     */\n    path: string;\n    /**\n     * Optional. The name of a new field to hold the array index of the element. The name cannot start with a dollar\n     * sign $.\n     */\n    includeArrayIndex?: string;\n    /**\n     * Optional.\n     *\n     * If true, if the path is null, missing, or an empty array, $unwind outputs the document.\n     *\n     * If false, if path is null, missing, or an empty array, $unwind does not output a document.\n     *\n     * The default value is false.\n     */\n    preserveNullAndEmptyArrays?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n2.4.2 (2021-03-24)\n2.4.1 (2021-03-24)\n2.4.0 (2021-03-24)\nFeatures\n\nadd GetResult super method (d744405)\n\n2.3.2 (2021-03-23)\n2.3.1 (2021-03-23)\n2.3.0 (2021-03-23)\nFeatures\n\nAdd a check if a Skip, Limit or Count stage is already in the pipeline (6913cb3)\n\n2.2.0 (2021-03-23)\nFeatures\n\nadd a Paging method that will automatically add the necessary stages to paginate the pipeline results (f78cfb5)\n\n2.1.0 (2021-03-23)\nFeatures\n\nadd DbCollPayload helper for the Out method (663f2bf)\n\n2.0.4 (2021-03-22)\n2.0.3 (2021-03-22)\n2.0.2 (2021-03-22)\n2.0.1 (2021-03-22)\nBug Fixes\n\nfix to enable debug mode by modifying import of moment.js library (a973cb0)\n\n2.0.0 (2021-03-22)\n⚠ BREAKING CHANGES\n\nmodify the payload arguments by adding an optional argument containing all optional payload parameters (b258e26)\n\n1.1.0 (2021-03-22)\nFeatures\n\nadd merge IntoPayload helper (91b73f1)\n\n1.0.1 (2021-03-21)\n1.0.0 (2021-03-21)\n0.0.2-72 (2021-03-21)\nFeatures\n\nadd bucket auto GroupByAutoPayload helper (344b46c)\nadd sample SizePayload helper (c8d05f7)\nadd unionWith CollectionPayload helper (938bcaa)\n\n0.0.2-71 (2021-03-21)\nFeatures\n\nadd bucket GroupByPayload helper (03fb8d6)\n\n0.0.2-70 (2021-03-21)\n0.0.2-69 (2021-03-21)\nBug Fixes\n\ngithub script in circleci pipeline to delete develop branch when release is ready to merge (fd11909)\n\n0.0.2-68 (2021-03-20)\n0.0.2-67 (2021-03-20)\nFeatures\n\nadd Property helper to create a javascript object (62855da)\nadd the ability to pass an object or a list to AddFields (9c97026)\n\n0.0.2-66 (2021-03-20)\nFeatures\n\nadd new helper List (8dc7919)\n\n0.0.2-65 (2021-03-20)\n0.0.2-64 (2021-03-20)\n0.0.2-63 (2021-03-20)\nFeatures\n\nadd payload validator (6c243e1)\nimplement all the stage methods as an alias of the addStage method (b4066e0)\n\n0.0.2-62 (2021-03-19)\nFeatures\n\nimplement Lookup, Match and Project method of the pipeline builder (9b859cf)\n\n0.0.2-61 (2021-03-19)\n0.0.2-60 (2021-03-19)\n0.0.2-59 (2021-03-18)\n0.0.2-58 (2021-03-18)\n0.0.2-56 (2021-03-18)\n0.0.2-55 (2021-03-18)\n0.0.2-54 (2021-03-18)\n0.0.2-53 (2021-03-18)\n0.0.2-52 (2021-03-18)\n0.0.2-51 (2021-03-18)\n0.0.2-50 (2021-03-18)\n0.0.2-49 (2021-03-18)\n0.0.2-48 (2021-03-18)\n0.0.2-47 (2021-03-18)\n0.0.2-46 (2021-03-18)\n0.0.2-45 (2021-03-18)\n0.0.2-44 (2021-03-18)\n0.0.2-43 (2021-03-18)\n0.0.2-42 (2021-03-18)\n0.0.2-41 (2021-03-18)\n0.0.2-40 (2021-03-18)\n0.0.2-39 (2021-03-17)\n0.0.2-38 (2021-03-17)\n0.0.2-37 (2021-03-17)\n0.0.2-36 (2021-03-17)\n0.0.2-35 (2021-03-17)\n0.0.2-34 (2021-03-17)\n0.0.2-33 (2021-03-17)\n0.0.2-32 (2021-03-17)\n0.0.2-31 (2021-03-17)\n0.0.2-30 (2021-03-17)\n0.0.2-29 (2021-03-17)\n0.0.2-28 (2021-03-17)\n0.0.2-27 (2021-03-17)\n0.0.2-26 (2021-03-17)\n0.0.2-25 (2021-03-17)\n0.0.2-24 (2021-03-17)\n0.0.2-23 (2021-03-17)\n0.0.2-22 (2021-03-17)\n0.0.2-21 (2021-03-17)\n0.0.2-20 (2021-03-17)\n0.0.2-19 (2021-03-17)\n0.0.2-18 (2021-03-17)\n0.0.2-17 (2021-03-17)\n0.0.2-16 (2021-03-17)\n0.0.2-15 (2021-03-17)\n0.0.2-14 (2021-03-17)\n0.0.2-13 (2021-03-17)\n0.0.2-12 (2021-03-17)\n0.0.2-11 (2021-03-17)\n0.0.2-10 (2021-03-17)\nBug Fixes\n\nchange import moment to require moment (826ac37)\n\n0.0.2-alpha.7 (2021-03-16)\n0.0.2-alpha.5 (2021-03-16)\n0.0.2-alpha.4 (2021-03-16)\n0.0.2-alpha.3 (2021-03-16)\nBug Fixes\n\nbuild script (281fb81)\n\n0.0.2-alpha.2 (2021-03-16)\n0.0.2-alpha.1 (2021-03-16)\n0.0.2-alpha.0 (2021-03-15)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/errors/pipeline/pipeline.error.ts\n            \n            class\n            PipelineError\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/helpers/bucket-auto/index.ts\n            \n            variable\n            GroupByAutoPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/bucket/index.ts\n            \n            variable\n            GroupByPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/commons/index.ts\n            \n            variable\n            Field\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/commons/index.ts\n            \n            variable\n            List\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/lookup/index.ts\n            \n            variable\n            ConditionPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/lookup/index.ts\n            \n            variable\n            EqualityPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/merge/index.ts\n            \n            variable\n            IntoPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/out/index.ts\n            \n            variable\n            DbCollPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/project/index.ts\n            \n            variable\n            Ignore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/project/index.ts\n            \n            variable\n            IgnorePayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/project/index.ts\n            \n            variable\n            Only\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/project/index.ts\n            \n            variable\n            OnlyPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/sample/index.ts\n            \n            variable\n            SizePayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/union-with/index.ts\n            \n            variable\n            CollectionPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/interfaces/core/builder-options.interface.ts\n            \n            interface\n            BuilderOptionsInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/core/debug-build.interface.ts\n            \n            interface\n            DebugBuildInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/core/debug-history.interface.ts\n            \n            interface\n            DebugHistoryInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/interfaces/core/get-result-response.interface.ts\n            \n            interface\n            GetResultResponseInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/core/init-options.interface.ts\n            \n            interface\n            InitOptionsInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/core/stage-error.interface.ts\n            \n            interface\n            StageErrorInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/core/stage-type.interface.ts\n            \n            variable\n            getStageTypeValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/interfaces/core/stage.interface.ts\n            \n            interface\n            StageInterface\n            \n                100 %\n                (31/31)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/bucket-auto-stage.interface.ts\n            \n            interface\n            BucketAutoStageInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/bucket-stage.interface.ts\n            \n            interface\n            BucketStageInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/coll-stats-stage.interface.ts\n            \n            interface\n            CollStatsStageInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/facet-stage.interface.ts\n            \n            interface\n            FacetStageInterface\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/geo-near-stage.interface.ts\n            \n            interface\n            GeoNearStageInterface\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/graph-lookup-stage.interface.ts\n            \n            interface\n            GraphLookupStageInterface\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/group-stage.interface.ts\n            \n            interface\n            GroupStageInterface\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/lookup-condition.interface.ts\n            \n            interface\n            LookupConditionInterface\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/lookup-equality.interface.ts\n            \n            interface\n            LookupEqualityInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/lookup-stage.interface.ts\n            \n            interface\n            LookupStageInterface\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/merge-stage.interface.ts\n            \n            interface\n            MergeStageInterface\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/out-stage.interface.ts\n            \n            interface\n            OutStageInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/replace-root-stage.interface.ts\n            \n            interface\n            ReplaceRootStageInterface\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/sample-stage.interface.ts\n            \n            interface\n            SampleStageInterface\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/union-with-stage.interface.ts\n            \n            interface\n            UnionWithStageInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/interfaces/stages/unwind-stage.interface.ts\n            \n            interface\n            UnwindStageInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/main.ts\n            \n            class\n            PipelineBuilder\n            \n                100 %\n                (57/57)\n            \n        \n        \n            \n                \n                lib/methods/index.ts\n            \n            variable\n            GetResult\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            AddToSet\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Avg\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Max\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Min\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Push\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            StdDevPop\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            StdDevSamp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            Sum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Absolute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Add\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Ceil\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Divide\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Exponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Floor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Log\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Log10\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Mod\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Multiply\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            NaturalLog\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Pow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Round\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Sqrt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Subtract\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            Trunc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ArrayElemAt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ArrayToObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ConcatArrays\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Filter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            First\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            In\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            IndexOfArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            IsArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Last\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            MapOperator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ObjectToArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Range\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Reduce\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            ReverseArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Size\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Slice\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            Zip\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            And\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            Not\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            Or\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            Compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            Equal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            GreaterThan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            GreaterThanEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            LessThan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            LessThanEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            NotEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            Cond\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            IfNull\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            Switch\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/custom-aggregation/index.ts\n            \n            variable\n            Accumulator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/custom-aggregation/index.ts\n            \n            variable\n            FunctionOperator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/data-size/index.ts\n            \n            variable\n            BinarySize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/data-size/index.ts\n            \n            variable\n            BsonSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateFromParts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateFromString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateToParts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DateToString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DayOfMonth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DayOfWeek\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            DayOfYear\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Hour\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            IsoDayOfWeek\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            IsoWeek\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            IsoWeekYear\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Millisecond\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Minute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Month\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Second\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            ToDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Week\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            Year\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Expression\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Let\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Literal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            MergeObjects\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Meta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            Rand\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            SampleRate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            AllElementsTrue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            AnyElementTrue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetDifference\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetEquals\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetIntersection\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetIsSubset\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            SetUnion\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Concat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            IndexOfBytes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            IndexOfCP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Ltrim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            RegexFind\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            RegexFindAll\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            RegexMatch\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ReplaceAll\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ReplaceOne\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Rtrim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Split\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            StrCaseCmp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            StrLenBytes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            StrLenCP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Substr\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            SubstrBytes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            SubstrCP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ToLower\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ToString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            ToUpper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            Trim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Acos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Acosh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Asin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Asinh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Atan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Atan2\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Atanh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Cos\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Cosh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            DegreesToRadians\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            RadiansToDegrees\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Sin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Sinh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Tan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            Tanh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            Convert\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            IsNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToBool\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToDecimal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToDouble\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToInt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToLong\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            ToObjectId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            Type\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/index.ts\n            \n            variable\n            PAYLOAD_VALIDATION_ENABLED\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/addFields-payload.validator.ts\n            \n            variable\n            addFieldsPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/bucket-payload.validator.ts\n            \n            variable\n            bucketPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/lookup-payload.validator.ts\n            \n            variable\n            lookupEqualityValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/lookup-payload.validator.ts\n            \n            variable\n            lookupPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/warnings/index.ts\n            \n            variable\n            deprecatedMethodWarning\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StageTypeEnum   (lib/.../stage-type.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interfaces/core/stage-type.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        StageTypeEnum\n                    \n                \n                    \n                        \n                            Aggregation Pipeline Stages.*\nIn the db.collection.aggregate method and db.aggregate method, pipeline stages appear in an array. Documents pass\nthrough the stages in sequence.\n\n                        \n                    \n                        \n                            \n                                 addFields\n                            \n                        \n                        \n                            \n                                Value : $addFields\n                            \n                        \n                        \n                            \n                                 bucket\n                            \n                        \n                        \n                            \n                                Value : $bucket\n                            \n                        \n                        \n                            \n                                 bucketAuto\n                            \n                        \n                        \n                            \n                                Value : $bucketAuto\n                            \n                        \n                        \n                            \n                                 collStats\n                            \n                        \n                        \n                            \n                                Value : $collStats\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : $count\n                            \n                        \n                        \n                            \n                                 facet\n                            \n                        \n                        \n                            \n                                Value : $facet\n                            \n                        \n                        \n                            \n                                 geoNear\n                            \n                        \n                        \n                            \n                                Value : $geoNear\n                            \n                        \n                        \n                            \n                                 graphLookup\n                            \n                        \n                        \n                            \n                                Value : $graphLookup\n                            \n                        \n                        \n                            \n                                 group\n                            \n                        \n                        \n                            \n                                Value : $group\n                            \n                        \n                        \n                            \n                                 indexStats\n                            \n                        \n                        \n                            \n                                Value : $indexStats\n                            \n                        \n                        \n                            \n                                 limit\n                            \n                        \n                        \n                            \n                                Value : $limit\n                            \n                        \n                        \n                            \n                                 listSessions\n                            \n                        \n                        \n                            \n                                Value : $listSessions\n                            \n                        \n                        \n                            \n                                 lookup\n                            \n                        \n                        \n                            \n                                Value : $lookup\n                            \n                        \n                        \n                            \n                                 match\n                            \n                        \n                        \n                            \n                                Value : $match\n                            \n                        \n                        \n                            \n                                 merge\n                            \n                        \n                        \n                            \n                                Value : $merge\n                            \n                        \n                        \n                            \n                                 out\n                            \n                        \n                        \n                            \n                                Value : $out\n                            \n                        \n                        \n                            \n                                 planCacheStats\n                            \n                        \n                        \n                            \n                                Value : $planCacheStats\n                            \n                        \n                        \n                            \n                                 project\n                            \n                        \n                        \n                            \n                                Value : $project\n                            \n                        \n                        \n                            \n                                 redact\n                            \n                        \n                        \n                            \n                                Value : $redact\n                            \n                        \n                        \n                            \n                                 replaceRoot\n                            \n                        \n                        \n                            \n                                Value : $replaceRoot\n                            \n                        \n                        \n                            \n                                 replaceWith\n                            \n                        \n                        \n                            \n                                Value : $replaceWith\n                            \n                        \n                        \n                            \n                                 sample\n                            \n                        \n                        \n                            \n                                Value : $sample\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : $search\n                            \n                        \n                        \n                            \n                                 set\n                            \n                        \n                        \n                            \n                                Value : $set\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : $skip\n                            \n                        \n                        \n                            \n                                 sort\n                            \n                        \n                        \n                            \n                                Value : $sort\n                            \n                        \n                        \n                            \n                                 sortByCount\n                            \n                        \n                        \n                            \n                                Value : $sortByCount\n                            \n                        \n                        \n                            \n                                 unionWith\n                            \n                        \n                        \n                            \n                                Value : $unionWith\n                            \n                        \n                        \n                            \n                                 unset\n                            \n                        \n                        \n                            \n                                Value : $unset\n                            \n                        \n                        \n                            \n                                 unwind\n                            \n                        \n                        \n                            \n                                Value : $unwind\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmongodb-pipeline-builder\n\n\nTechnical documentation\n\nis a pipeline builder for the db.collection.aggregate method and db.aggregate method. It will simplify pipelines by making them more\nreadable and much easier to edit. It also allows you to test your pipelines on a dataset in order to verify them. Pipeline stages appear in an array. Documents pass\nthrough the stages in sequence.\n\n\nnpm package \nnpm i mongodb-pipeline-builder@latest --save\nUsage:\n- with require\n\nconst PipelineBuilder = require(\"mongodb-pipeline-builder\").PipelineBuilder;\nconst { EqualityPayload, OnlyPayload, Field } = require('mongodb-pipeline-builder/helpers');\nconst { ArrayElemAt, Equal, Expression } = require('mongodb-pipeline-builder/operators');\n\n\n- with import\n\nimport { PipelineBuilder } from 'mongodb-pipeline-builder';\nimport { EqualityPayload, OnlyPayload, Field } from 'mongodb-pipeline-builder/helpers';\nimport { ArrayElemAt, Equal, Expression } from 'mongodb-pipeline-builder/operators';\n\n\nCode:\n\nconst myNewPipeline = new PipelineBuilder('name-of-my-new-pipeline')\n    .Match( Expression( Equal( '$id' , 123456 ) ) )\n    .Lookup( EqualityPayload( 'profiles', 'profile', 'profileId', 'id' ) )\n    .Project( OnlyPayload( 'firstname', 'lastname', 'email' ) )\n    .AddFields(\n        Field( 'skills', ArrayElemAt( '$profile.skills', 0 ) ),\n        Field( 'availability', ArrayElemAt( '$profile.availability', 0 ) )\n    )\n    .Unset( 'profile' )\n    .getPipeline();\n\n\n\n*** If no helper is available for a stage, use its method and pass it a valid value as a parameter.\n\n\nis equivalent to:\n\nconst myNewPipeline = [\n    {\n        $match: {\n            $expr: {\n                $eq: [\n                    '$id',\n                    123456\n                ]\n            }\n        },\n    },\n    {\n        $lookup: {\n            from: 'profiles',\n            as: 'profile',\n            localField: 'profileId',\n            foreignField: 'id'\n        },\n    },\n    {\n        $project: {\n            _id: 0,\n            firstname: 1,\n            lastname: 1\n            email: 1\n        },\n    },\n    {\n        $addFields: {\n            skills: {\n                $arrayElemAt('$profile.skills', 0)\n            },\n            availability: {\n                $arrayElemAt('$profile.availability', 0)\n            }\n        },\n    },\n    {\n        $unset: 'profile'\n    }\n];\n\n\nGetResult()\n\nis an asynchronous method that provides a very easy way to use your aggregation pipelines on a target (collection, or a mongoose model having the aggregate method).\n\nExample (in an asynchronous parent method):\n\nconst result = await GetResult( target, pipeline );\nThen you will have access to:\n - result.GetDocs() to get the documents found.\n - result.GetCount() to get the total number of documents found. Often useful when paging with partial results.\n\n\n[ Try on NPM RunKit with require method ]\nSoon more complex examples will be available!\n\n[ Aggregation Pipeline Stages ]\n\n\nMONGODB STAGES:\nAddFields | Bucket | BucketAuto | CollStats | Count | Facet | GeoNear | GraphLookup | Group | IndexStats | Limit | ListSessions | Lookup | Match | Merge | Out | PlanCacheStats | Project | Redact | ReplaceRoot | ReplaceWith | Sample | Search | Set | Skip | Sort | SortByCount | UnionWith | Unset | Unwind\nCUSTOM STAGE:\nPaging\n\n\n[ Aggregation Pipeline Helpers ]\n\n\nSTAGE HELPERS:\n - Bucket ( GroupByPayload )\n - BucketAuto ( GroupByAutoPayload )\n - Lookup ( ConditionPayload | EqualityPayload )\n - Merge ( IntoPayload )\n - Out ( DbCollPayload )\n - Project ( IgnorePayload | OnlyPayload )\n - Sample ( SizePayload )\n - UnionWith ( CollectionPayload )\nCOMMON HELPERS:\n - Field >> AddFields( Field ** ) | Set( Field ** ) | Sort( Field ** )\n - List\n** One or more separated by a comma.\n\n\n[ Aggregation Pipeline Operators ]\n\n\nAbsolute | Accumulator | Acos | Acosh | Add | AddToSet | AllElementsTrue | And | AnyElementTrue | ArrayElemAt | ArrayToObject | Asin | Asinh | Atan | Atan2 | Atanh | Avg | BinarySize | BsonSize | Ceil | Compare | Concat | ConcatArrays | Cond | Convert | Cos | Cosh | DateFromParts | DateFromString | DateToParts | DateToString | DayOfMonth | DayOfWeek | DayOfYear | DegreesToRadians | Divide | Equal | Exponent | Expression | Filter | First | Floor | FunctionOperator | GreaterThan | GreaterThanEqual | Hour | IfNull | In | IndexOfArray | IndexOfBytes | IndexOfCP | IsArray | IsNumber | IsoDayOfWeek | IsoWeek | IsoWeekYear | Last | LessThan | LessThanEqual | Let | Literal | Log | Log10 | Ltrim | MapOperator | Max | MergeObjects | Meta | Millisecond | Min | Minute | Mod | Month | Multiply | NaturalLog | Not | NotEqual | ObjectToArray | Or | Pow | Push | RadiansToDegrees | Rand | Range | Reduce | RegexFind | RegexFindAll | RegexMatch | ReplaceAll | ReplaceOne | ReverseArray | Round | Rtrim | SampleRate | Second | SetDifference | SetEquals | SetIntersection | SetIsSubset | SetUnion | Sin | Sinh | Size | Slice | Split | Sqrt | StdDevPop | StdDevSamp | StrCaseCmp | StrLenBytes | StrLenCP | Substr | SubstrBytes | SubstrCP | Subtract | Sum | Switch | Tan | Tanh | ToBool | ToDate | ToDecimal | ToDouble | ToInt | ToLong | ToLower | ToObjectId | ToString | ToUpper | Trim | Trunc | Type | Week | Year | Zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Mike Dev\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    23 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GranularityValues   (lib/.../bucket-auto-stage.interface.ts)\n                        \n                        \n                            StageLabel   (lib/.../stage-type.interface.ts)\n                        \n                        \n                            WhenMatchedType   (lib/.../merge-stage.interface.ts)\n                        \n                        \n                            WhenNotMatchedType   (lib/.../merge-stage.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interfaces/stages/bucket-auto-stage.interface.ts\n    \n    \n        \n            \n                \n                    \n                    GranularityValues\n                \n            \n            \n                \n                        \"R5\" | \"R10\" | \"R20\" | \"R40\" | \"R80\" | \"1-2-5\" | \"E6\" | \"E12\" | \"E24\" | \"E48\" | \"E96\" | \"E192\" | \"POWERSOF2\"\n\n                \n            \n        \n    \n    lib/interfaces/core/stage-type.interface.ts\n    \n    \n        \n            \n                \n                    \n                    StageLabel\n                \n            \n            \n                \n                    Type of pipeline stage\n\n                \n            \n            \n                \n                            \"addFields\" | \"bucket\" | \"bucketAuto\" | \"collStats\" | \"count\" | \"facet\" | \"geoNear\" | \"graphLookup\" | \"group\" | \"indexStats\" | \"limit\" | \"listSessions\" | \"lookup\" | \"match\" | \"merge\" | \"out\" | \"planCacheStats\" | \"project\" | \"redact\" | \"replaceRoot\" | \"replaceWith\" | \"sample\" | \"search\" | \"set\" | \"skip\" | \"sort\" | \"sortByCount\" | \"unionWith\" | \"unset\" | \"unwind\"\n\n                \n            \n        \n    \n    lib/interfaces/stages/merge-stage.interface.ts\n    \n    \n        \n            \n                \n                    \n                    WhenMatchedType\n                \n            \n            \n                \n                    Possible values for WhenMatched\n\n                \n            \n            \n                \n                        \"replace\" | \"keepExisting\" | \"merge\" | \"fail\" | \"pipeline\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WhenNotMatchedType\n                \n            \n            \n                \n                    Possible values for WhenNotMatchedType\n\n                \n            \n            \n                \n                        \"insert\" | \"discard\" | \"fail\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
