var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/PipelineError.html",[0,1.229,1,1.229]],["body/classes/PipelineError.html",[0,1.791,1,2.33,2,2.317,3,1.791,4,1.791,5,1.084,6,2.317,7,1.398,8,3.643,9,3.86,10,0.823,11,1.267,12,1.084,13,2.219,14,3.643,15,1.343,16,3.643,17,3.643,18,1.791,19,0.1,20,0.7,21,1.398,22,3.643,23,1.398,24,0.823,25,1.791,26,1.791,27,3.116,28,3.116,29,1.791,30,3.116,31,3.116,32,3.116,33,0.085,34,0.085]],["title/interfaces/ResultProperty.html",[35,0.744,36,0.959]],["body/interfaces/ResultProperty.html",[3,1.406,4,1.406,5,0.851,7,1.097,10,0.646,11,1.273,12,1.04,13,1.406,15,1.413,19,0.102,20,0.667,23,1.097,24,1.064,25,1.993,26,2.384,33,0.073,34,0.073,35,1.092,36,1.556,37,1.406,38,1.097,39,1.409,40,1.737,41,2.335,42,2.407,43,1.737,44,1.37,45,1.402,46,2.579,47,1.406,48,1.819,49,2.335,50,1.406,51,1.097,52,2.335,53,1.641,54,1.097,55,1.698,56,1.406,57,1.805,58,2.418,59,1.406,60,2.175,61,1.993,62,1.406,63,1.409,64,1.805,65,2.88,66,1.819,67,1.316,68,1.819,69,1.316,70,1.993,71,2.393,72,0.646,73,1.097,74,2.814,75,2.814,76,1.819,77,1.819,78,1.819,79,1.406,80,2.335,81,1.819,82,1.097,83,1.819,84,1.819,85,1.819,86,1.409,87,1.406,88,1.406,89,1.097,90,1.819,91,2.335]],["title/interfaces/TestResultResponse.html",[35,0.744,45,0.744]],["body/interfaces/TestResultResponse.html",[3,1.404,4,1.404,5,0.85,7,1.096,10,0.645,11,1.316,12,0.915,13,1.404,15,1.387,19,0.102,20,0.666,23,1.096,24,1.064,25,1.992,26,2.384,33,0.073,34,0.073,35,1.091,36,1.641,37,1.404,38,1.096,39,1.407,40,1.555,41,1.816,42,2.374,43,1.641,44,1.369,45,1.413,46,2.878,47,1.803,48,2.333,49,2.813,50,1.803,51,1.407,52,2.813,53,1.641,54,1.407,55,1.697,56,1.404,57,1.803,58,2.418,59,1.404,60,2.174,61,1.992,62,1.404,63,1.407,64,1.803,65,2.878,66,1.816,67,1.316,68,1.816,69,1.316,70,1.992,71,2.393,72,0.645,73,1.096,74,2.813,75,2.813,76,1.816,77,1.816,78,1.816,79,1.404,80,2.333,81,1.816,82,1.096,83,1.816,84,1.816,85,1.816,86,1.407,87,1.404,88,1.404,89,1.096,90,1.816,91,2.333,92,1.404]],["title/changelog.html",[93,1.039,94,1.039,95,1.344]],["body/changelog.html",[5,0.595,11,0.595,12,0.451,18,0.982,19,0.084,20,0.329,21,1.103,24,0.451,29,1.998,33,0.067,34,0.057,39,0.767,40,0.767,44,0.595,51,1.103,67,1.002,69,0.595,72,0.832,86,1.103,92,0.982,95,1.271,96,1.709,97,2.343,98,1.829,99,1.709,100,1.709,101,1.709,102,1.709,103,1.709,104,1.709,105,3.79,106,1.709,107,3.151,108,3.151,109,3.477,110,1.709,111,3.338,112,3.734,113,3.734,114,2.142,115,1.709,116,1.829,117,1.709,118,1.271,119,3.151,120,2.142,121,1.271,122,1.271,123,3.477,124,2.726,125,4.065,126,2.881,127,2.881,128,1.709,129,2.381,130,1.656,131,1.829,132,2.142,133,1.709,134,1.709,135,1.709,136,1.271,137,3.477,138,0.982,139,3.734,140,2.142,141,1.271,142,2.483,143,1.271,144,2.854,145,1.271,146,1.271,147,1.271,148,1.271,149,0.982,150,1.709,151,1.811,152,2.142,153,1.271,154,2.483,155,2.249,156,1.271,157,1.271,158,2.459,159,1.829,160,0.982,161,1.271,162,1.709,163,1.829,164,1.709,165,1.709,166,1.709,167,1.709,168,3.666,169,1.709,170,1.709,171,1.709,172,3.213,173,1.829,174,1.709,175,4.179,176,0.982,177,1.829,178,1.271,179,1.829,180,1.709,181,3.151,182,1.709,183,1.709,184,3.338,185,3.338,186,1.271,187,1.709,188,1.709,189,1.709,190,1.709,191,1.709,192,3.033,193,1.709,194,1.271,195,1.709,196,1.709,197,2.459,198,1.709,199,0.982,200,1.709,201,2.459,202,1.709,203,1.709,204,2.459,205,2.142,206,0.982,207,1.271,208,1.829,209,1.709,210,1.709,211,1.709,212,1.709,213,1.709,214,1.709,215,1.709,216,1.271,217,2.459,218,1.709,219,1.271,220,1.829,221,1.709,222,1.709,223,1.709,224,1.709,225,1.709,226,1.709,227,1.271,228,0.982,229,1.709,230,2.459,231,1.709,232,1.709,233,1.709,234,1.709,235,1.709,236,1.709,237,1.709,238,1.709,239,1.709,240,4.31,241,3.338,242,1.271,243,1.271,244,1.709,245,1.709,246,2.459,247,1.709,248,1.709,249,2.881,250,1.709,251,1.271,252,1.709,253,1.709,254,1.709,255,2.459,256,1.271,257,1.709,258,1.709,259,1.709,260,3.151,261,1.709,262,1.709,263,1.709,264,1.709,265,1.709,266,3.477,267,1.709,268,1.709,269,1.271,270,1.271,271,1.271,272,0.982,273,1.709,274,1.709,275,1.709,276,1.271,277,1.709,278,1.271,279,1.709,280,1.709,281,1.709,282,0.982,283,1.709,284,1.709,285,3.582,286,1.709,287,1.709,288,1.709,289,1.709,290,1.709,291,1.271,292,1.709,293,1.709,294,1.829,295,1.709,296,1.709,297,1.709,298,1.709,299,1.271,300,1.709,301,1.709,302,1.709,303,1.709,304,1.413,305,1.709,306,1.709,307,1.709,308,1.709,309,4.286,310,1.709,311,1.829,312,1.271,313,1.709,314,1.709,315,1.271,316,1.709,317,1.709,318,1.271,319,1.709,320,1.709,321,1.709,322,1.709,323,1.709,324,1.709,325,1.709,326,1.709,327,2.459,328,1.709,329,1.709,330,1.709,331,1.709,332,1.709,333,1.709,334,1.709,335,1.709,336,2.664,337,1.709,338,1.709,339,1.709,340,1.709,341,1.271,342,1.709,343,1.709,344,1.709,345,1.709,346,1.709,347,1.709,348,1.709,349,1.709,350,2.459,351,1.709,352,1.709,353,1.709,354,1.709,355,1.271,356,1.271,357,1.271,358,1.709,359,1.709,360,1.709,361,1.271,362,1.709,363,1.709,364,1.709,365,1.709,366,1.271,367,1.709,368,1.709,369,1.709,370,1.709,371,1.709,372,1.709,373,1.709,374,1.709,375,1.709,376,1.709,377,1.709,378,1.709,379,1.709,380,1.709,381,1.709,382,1.709,383,1.709,384,1.709,385,1.709,386,1.709,387,1.709,388,1.709,389,1.709,390,1.271,391,3.582,392,2.459,393,1.271,394,2.459,395,1.271,396,1.709,397,1.709,398,1.709,399,1.709,400,1.709,401,1.271,402,1.709,403,1.709,404,1.709,405,1.709]],["title/coverage.html",[406,2.137]],["body/coverage.html",[0,1.218,1,0.803,5,0.486,6,1.039,19,0.101,20,0.407,33,0.049,34,0.049,35,0.737,36,0.627,38,1.506,45,0.486,51,0.627,55,1.689,72,0.853,73,0.627,82,0.627,89,0.627,129,0.803,130,0.803,149,0.803,151,0.803,155,0.803,160,0.803,176,0.803,199,1.218,228,0.803,272,0.803,312,1.039,406,1.039,407,0.803,408,1.397,409,1.397,410,2.119,411,4.335,412,1.397,413,3.232,414,1.397,415,3.226,416,4.337,417,1.039,418,1.039,419,1.039,420,1.039,421,2.56,422,1.397,423,1.397,424,1.397,425,1.397,426,1.397,427,1.397,428,1.397,429,1.397,430,1.397,431,1.397,432,1.397,433,1.397,434,1.397,435,1.397,436,1.397,437,1.397,438,1.397,439,1.397,440,1.397,441,1.397,442,1.397,443,1.039,444,1.397,445,1.039,446,1.397,447,1.397,448,1.397,449,1.039,450,2.119,451,1.397,452,1.397,453,1.397,454,1.039,455,1.397,456,1.397,457,1.397,458,1.397,459,2.119,460,1.397,461,1.397,462,1.397,463,1.039,464,1.397,465,1.039,466,1.397,467,1.397,468,1.397,469,1.397,470,1.397,471,1.039,472,1.397,473,1.039,474,1.397,475,1.397,476,1.397,477,1.039,478,1.904,479,1.039,480,1.039,481,1.039,482,1.397,483,1.039,484,1.397,485,3.232,486,3.232,487,3.232,488,1.397,489,1.397,490,1.397,491,1.397,492,1.397,493,1.397,494,3.67,495,1.039,496,1.039,497,1.039,498,1.039,499,0.803,500,0.803,501,1.039,502,1.039,503,1.039,504,1.039,505,3.867,506,1.039,507,1.039,508,1.039,509,1.039,510,1.039,511,1.039,512,1.039,513,1.039,514,1.039,515,1.039,516,1.039,517,1.039,518,1.039,519,1.039,520,1.039,521,3.894,522,1.039,523,1.039,524,1.039,525,1.039,526,1.039,527,1.039,528,1.039,529,1.039,530,1.039,531,1.039,532,1.039,533,1.039,534,1.039,535,1.039,536,1.039,537,2.857,538,1.039,539,1.039,540,1.039,541,1.039,542,2.56,543,3.358,544,1.039,545,1.039,546,1.039,547,1.039,548,1.039,549,1.039,550,1.039,551,2.56,552,1.039,553,1.039,554,2.119,555,2.119,556,1.039,557,1.397,558,2.119,559,2.119,560,1.039,561,1.039,562,4.011,563,1.039,564,1.039,565,1.397,566,1.397,567,1.039,568,1.039,569,1.039,570,1.039,571,1.039,572,1.039,573,1.039,574,1.039,575,1.039,576,1.039,577,1.039,578,1.039,579,1.039,580,1.039,581,1.039,582,1.039,583,1.039,584,1.039,585,1.039,586,3.542,587,1.397,588,1.397,589,1.039,590,1.039,591,1.039,592,1.039,593,1.039,594,1.039,595,3.358,596,1.039,597,1.039,598,1.039,599,1.039,600,1.039,601,1.039,602,1.039,603,3.978,604,1.039,605,1.039,606,1.397,607,1.039,608,1.039,609,1.039,610,1.039,611,1.039,612,1.039,613,1.039,614,1.039,615,1.039,616,1.039,617,1.039,618,1.039,619,1.039,620,1.039,621,1.039,622,1.039,623,1.039,624,1.039,625,3.837,626,1.039,627,1.039,628,1.039,629,1.039,630,1.039,631,1.039,632,1.039,633,1.039,634,1.039,635,1.039,636,1.039,637,1.039,638,1.039,639,1.039,640,1.039,641,3.542,642,1.039,643,1.039,644,1.039,645,1.039,646,1.039,647,1.039,648,1.039,649,1.039,650,1.397,651,3.764,652,1.397,653,2.119,654,1.397,655,1.397,656,1.397,657,1.397,658,1.397,659,1.397,660,1.397,661,1.397,662,1.397,663,1.397,664,2.119,665,1.397,666,1.397,667,1.397,668,1.397,669,1.397,670,1.397,671,1.397,672,1.397,673,1.397,674,1.397,675,2.124,676,1.039,677,1.039,678,1.039,679,1.039,680,1.039,681,1.039,682,1.039,683,1.397,684,1.397,685,1.397,686,1.397,687,1.397,688,1.397]],["title/miscellaneous/functions.html",[689,1.344,690,1.903]],["body/miscellaneous/functions.html",[7,1.672,10,0.68,11,0.895,12,1.098,15,1.457,18,2.39,19,0.099,20,0.792,21,1.865,23,1.593,24,1.081,33,0.076,34,0.076,38,1.155,40,1.155,42,2.255,43,1.837,44,0.895,45,1.425,53,1.593,54,1.724,56,1.479,58,2.255,61,1.479,62,1.479,63,1.455,64,1.479,67,1.365,69,1.128,70,2.041,71,2.255,72,0.68,82,1.455,88,1.479,89,1.455,199,2.041,242,1.914,269,2.641,417,1.914,418,1.914,419,2.412,420,2.641,478,1.914,479,2.412,480,2.412,481,2.412,499,1.479,500,1.479,675,1.914,676,2.412,677,2.412,678,2.412,679,2.412,680,2.412,681,2.412,682,2.412,689,1.914,690,1.914,691,3.843,692,3.551,693,2.574,694,3.728,695,2.858,696,2.574,697,2.574,698,2.574,699,3.243,700,2.772,701,3.243,702,3.243,703,2.574,704,3.551,705,2.574,706,2.772,707,2.574,708,2.574,709,1.914,710,2.574,711,2.574,712,2.574,713,3.243,714,4.029,715,3.243,716,3.728,717,2.574,718,3.243,719,2.574,720,2.574,721,2.574,722,2.574,723,2.574]],["title/index.html",[10,0.477,93,1.039,94,1.039]],["body/index.html",[10,0.607,12,0.738,15,0.275,19,0.102,20,0.48,21,1.392,24,0.924,29,2.366,33,0.031,34,0.031,39,0.921,43,1.708,44,0.799,47,0.455,50,0.77,53,0.921,54,0.601,55,0.355,57,1.675,59,1.18,60,1.18,63,0.355,67,0.607,69,0.799,72,0.996,73,0.355,79,1.962,86,1.729,87,1.18,92,0.455,97,0.588,98,1.977,114,0.997,116,0.588,118,0.997,120,0.997,121,1.297,122,2.461,124,1.527,129,0.77,130,1.32,131,2.242,132,2.08,136,2.502,138,1.828,140,0.588,141,0.588,142,0.588,143,0.997,144,2.759,145,1.297,146,0.588,147,0.588,148,0.588,149,0.77,151,1.528,152,0.588,153,0.588,154,1.527,155,1.733,156,0.997,157,0.588,159,1.297,160,1.32,161,0.588,173,1.527,176,0.455,177,1.297,178,1.708,179,1.856,186,2.08,192,1.297,194,1.527,205,0.588,206,0.77,207,1.708,208,0.588,216,0.997,219,0.588,220,1.708,227,0.588,228,1.607,243,1.297,251,0.588,256,0.997,270,1.527,271,1.527,272,2.157,276,0.588,278,0.588,282,0.77,291,0.588,294,1.527,304,1.002,311,0.588,315,0.588,318,1.297,336,1.297,341,1.297,355,1.527,356,2.539,357,1.856,361,0.997,366,0.997,390,1.856,393,0.997,395,0.997,401,2.775,407,0.455,415,1.527,443,0.588,445,0.588,449,0.588,454,1.297,463,1.527,465,0.588,471,0.588,473,0.588,477,0.588,483,1.708,495,0.997,496,0.588,497,0.997,498,0.997,499,0.455,500,0.455,501,0.588,502,0.588,503,0.588,504,2.573,506,0.997,507,0.997,508,1.297,509,0.588,510,0.588,511,0.588,512,0.588,513,0.588,514,0.588,515,0.588,516,0.588,517,0.588,518,0.588,519,0.588,520,0.588,522,1.856,523,1.708,524,0.997,525,0.588,526,1.856,527,0.588,528,0.588,529,2.167,530,0.588,531,1.297,532,0.588,533,0.588,534,1.297,535,0.588,536,0.588,538,0.588,539,0.588,540,0.588,541,0.588,544,0.588,545,1.527,546,0.588,547,0.588,548,0.588,549,1.527,550,0.588,552,1.297,553,0.588,556,1.297,560,0.997,561,0.997,563,0.997,564,0.588,567,0.997,568,0.997,569,0.997,570,0.997,571,0.997,572,0.997,573,0.997,574,0.997,575,1.708,576,1.297,577,1.297,578,0.997,579,1.297,580,1.297,581,1.977,582,2.307,583,0.588,584,0.588,585,0.997,589,1.708,590,0.997,591,0.588,592,1.297,593,0.588,594,0.588,596,1.297,597,1.297,598,0.588,599,0.588,600,0.997,601,0.588,602,0.588,604,1.527,605,0.588,607,0.588,608,0.588,609,0.588,610,0.588,611,0.588,612,0.588,613,0.588,614,0.588,615,0.588,616,0.588,617,0.588,618,0.588,619,0.588,620,0.588,621,0.588,622,0.588,623,0.588,624,0.588,626,0.997,627,0.588,628,0.588,629,0.588,630,0.588,631,0.588,632,0.588,633,0.588,634,0.997,635,1.527,636,0.588,637,0.588,638,0.588,639,0.588,640,0.588,642,0.997,643,0.588,644,0.588,645,0.588,646,0.588,647,0.588,648,0.588,649,0.588,695,0.997,706,0.997,709,0.997,724,0.791,725,2.796,726,0.791,727,0.791,728,0.791,729,0.791,730,1.341,731,0.791,732,0.791,733,0.791,734,0.791,735,1.341,736,0.791,737,3.015,738,0.791,739,1.744,740,2.053,741,0.791,742,1.744,743,0.791,744,0.791,745,0.791,746,0.791,747,0.791,748,0.791,749,0.791,750,1.341,751,1.341,752,1.341,753,1.341,754,1.341,755,1.341,756,1.341,757,1.341,758,1.744,759,0.997,760,0.791,761,0.791,762,0.791,763,1.341,764,0.791,765,0.791,766,0.791,767,0.791,768,0.791,769,0.791,770,0.791,771,0.791,772,0.791,773,1.341,774,1.341,775,0.791,776,0.791,777,1.341,778,2.053,779,0.791,780,2.914,781,1.341,782,0.791,783,2.053,784,1.341,785,1.341,786,1.341,787,2.053,788,1.341,789,2.297,790,1.341,791,0.791,792,1.744,793,1.341,794,1.341,795,2.053,796,1.341,797,1.341,798,1.341,799,1.341,800,1.341,801,1.341,802,1.341,803,1.744,804,1.744,805,1.744,806,1.744,807,1.744,808,1.341,809,1.341,810,1.341,811,1.341,812,1.341,813,1.341,814,0.997,815,1.341,816,0.791,817,0.791,818,1.341,819,2.796,820,1.341,821,1.744,822,1.744,823,1.341,824,1.341,825,2.053,826,2.495,827,1.341,828,2.053,829,1.341,830,0.791,831,0.791,832,0.791,833,0.791,834,0.791,835,0.791,836,0.791,837,1.341,838,1.341,839,0.791,840,0.791,841,0.791,842,0.791,843,0.791,844,0.791,845,1.341,846,1.341,847,0.791,848,0.791,849,0.791,850,0.791,851,0.791,852,0.791,853,0.791,854,0.791,855,0.791,856,0.791,857,0.791,858,0.791,859,0.791,860,0.791,861,0.791,862,0.791,863,0.791,864,0.791,865,0.791,866,0.791,867,0.791,868,0.791,869,0.791,870,1.341,871,1.341,872,1.341,873,0.791,874,2.297,875,0.791,876,0.791,877,1.744,878,0.791,879,2.053,880,0.791,881,0.791,882,0.791,883,0.791,884,2.053,885,0.791,886,0.791,887,1.341,888,2.495,889,0.791,890,0.791,891,1.341,892,0.791,893,0.791,894,0.791,895,0.791,896,0.791,897,0.791,898,0.791,899,0.791,900,0.791,901,0.791,902,0.791,903,0.791,904,0.791,905,0.791,906,0.791,907,0.791,908,0.791,909,0.791,910,0.791,911,0.791,912,1.341,913,1.341,914,1.341,915,1.341,916,1.341,917,1.341,918,1.341,919,0.791,920,0.791,921,1.341,922,1.341,923,1.341,924,0.791,925,0.791,926,0.791,927,2.495,928,0.791,929,0.791,930,1.744,931,0.791,932,0.791,933,0.791,934,0.791,935,0.791,936,0.791,937,1.341,938,1.341,939,1.341,940,2.297,941,0.791,942,0.791,943,1.341,944,0.791,945,1.341,946,1.341,947,1.341,948,1.341,949,1.341,950,2.297,951,0.791,952,0.791,953,1.341,954,1.341,955,2.053,956,1.341,957,1.341,958,1.341,959,0.791,960,0.791,961,0.791,962,1.341,963,0.791,964,1.341,965,0.791,966,0.791,967,0.791,968,0.791,969,0.791,970,2.053,971,0.791,972,0.791,973,1.341,974,1.341,975,0.791,976,0.791,977,1.341,978,0.791,979,0.791,980,0.791,981,0.791,982,0.791,983,0.791,984,0.791,985,2.659,986,0.791,987,0.791,988,0.791,989,1.341,990,0.791,991,0.791,992,0.791,993,4.267,994,0.791,995,0.791,996,1.744,997,0.791,998,0.791,999,0.791,1000,0.791,1001,0.791,1002,0.791,1003,0.791,1004,1.341,1005,0.791,1006,0.791,1007,0.791,1008,0.791,1009,0.791,1010,1.341,1011,1.341,1012,2.053,1013,2.053,1014,1.341,1015,0.791,1016,0.791,1017,1.341,1018,1.341,1019,1.341,1020,0.791,1021,0.791,1022,0.791,1023,0.791,1024,0.791,1025,1.341,1026,1.341,1027,1.341,1028,1.341,1029,0.791,1030,0.791,1031,0.791,1032,0.791,1033,0.791,1034,1.341,1035,1.341,1036,1.341,1037,1.341,1038,0.791,1039,0.791,1040,0.791,1041,0.791,1042,0.791,1043,0.791,1044,0.791,1045,0.791,1046,0.791,1047,0.791,1048,0.791,1049,2.495,1050,2.053,1051,3.249,1052,2.053,1053,2.053,1054,0.791,1055,0.791,1056,0.791,1057,0.791,1058,1.341,1059,0.791,1060,0.791,1061,1.341,1062,0.791,1063,0.791,1064,0.791,1065,1.341,1066,2.495,1067,2.053,1068,1.341,1069,1.341,1070,2.053,1071,1.341,1072,1.341,1073,1.341,1074,0.791,1075,0.791,1076,0.791,1077,0.791,1078,0.791,1079,0.791,1080,0.791,1081,0.791,1082,1.341,1083,0.791,1084,0.791,1085,0.791,1086,0.791,1087,0.791,1088,0.791,1089,0.791,1090,1.744,1091,1.341,1092,1.341,1093,1.341,1094,2.495,1095,1.341,1096,1.341,1097,0.791,1098,0.791,1099,0.791,1100,0.791,1101,0.791,1102,0.791,1103,1.341,1104,1.341,1105,0.791,1106,0.791,1107,2.053,1108,2.053,1109,2.053,1110,0.997,1111,1.341,1112,1.341,1113,1.341,1114,1.341,1115,1.341,1116,1.341,1117,1.341,1118,0.791,1119,0.791,1120,0.791,1121,0.791,1122,0.791,1123,1.744,1124,1.341,1125,0.791,1126,0.791,1127,0.791,1128,0.791,1129,0.791,1130,0.791,1131,1.341,1132,0.791,1133,1.341,1134,2.053,1135,2.495,1136,0.791,1137,0.791,1138,0.791,1139,0.791,1140,0.791,1141,0.791,1142,0.791,1143,1.341,1144,0.791,1145,0.791,1146,0.791,1147,0.791,1148,1.341,1149,0.791,1150,1.341,1151,0.791,1152,1.341,1153,0.791,1154,0.791,1155,1.341,1156,0.791,1157,2.495,1158,0.791,1159,0.791,1160,0.791,1161,0.791,1162,1.341,1163,0.791,1164,0.791,1165,1.341,1166,0.791,1167,0.791,1168,2.053,1169,0.791,1170,0.791,1171,0.791,1172,0.791,1173,0.791,1174,0.791,1175,0.791,1176,0.791,1177,0.791,1178,0.791,1179,1.341,1180,0.791,1181,1.341,1182,0.791,1183,0.791,1184,0.791,1185,1.744,1186,0.791,1187,1.341,1188,0.791,1189,2.053,1190,1.341,1191,1.341,1192,0.791,1193,0.791,1194,2.297,1195,2.053,1196,1.341,1197,0.791,1198,1.744,1199,0.791,1200,1.744,1201,0.791,1202,1.341,1203,2.495,1204,1.341,1205,1.341,1206,0.791,1207,1.341,1208,0.791,1209,1.341,1210,1.341,1211,0.791,1212,0.791,1213,0.791,1214,2.053,1215,0.791,1216,0.791,1217,0.791,1218,0.791,1219,1.341,1220,0.791,1221,1.341,1222,0.791,1223,0.791,1224,0.791,1225,0.791,1226,0.791,1227,0.791,1228,0.791,1229,0.791,1230,0.791,1231,0.791,1232,0.791,1233,0.791]],["title/license.html",[93,1.039,94,1.039,1234,1.344]],["body/license.html",[19,0.084,33,0.084,34,0.084,163,2.268,172,2.268,206,1.753,282,1.753,299,2.268,304,1.753,407,1.753,700,2.268,759,2.845,814,2.675,1110,2.675,1234,2.268,1235,3.05,1236,3.826,1237,3.05,1238,3.05,1239,3.05,1240,3.597,1241,3.05,1242,3.05,1243,3.05,1244,3.05,1245,3.05,1246,3.05,1247,3.597,1248,4.18,1249,3.05,1250,3.05,1251,3.05,1252,3.597,1253,3.05,1254,3.05,1255,3.05,1256,3.05,1257,3.05,1258,3.05,1259,3.05,1260,3.05,1261,3.05,1262,3.05,1263,3.05,1264,3.05,1265,3.05,1266,3.05,1267,3.597,1268,3.597,1269,3.05,1270,3.05,1271,3.05,1272,3.05,1273,3.05,1274,3.05,1275,3.05,1276,3.05,1277,3.05,1278,3.05,1279,3.05,1280,3.05,1281,3.05,1282,3.05,1283,3.05,1284,3.05,1285,3.05,1286,3.05,1287,3.05,1288,3.05,1289,3.05,1290,3.05,1291,3.05,1292,3.05,1293,3.05,1294,3.05,1295,3.05,1296,3.05]],["title/modules.html",[1297,2.137]],["body/modules.html",[19,0.089,33,0.089,34,0.089,1297,2.489]],["title/overview.html",[1298,2.137]],["body/overview.html",[2,2.478,19,0.088,33,0.088,34,0.088,37,1.915,138,2.176,1298,2.478]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":72,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["0.0.2",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["0/1",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":111,"title":{},"body":{"changelog.html":{}}}],["01:00",{"_index":1204,"title":{},"body":{"index.html":{}}}],["02",{"_index":216,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["03",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["03:30",{"_index":1221,"title":{},"body":{"index.html":{}}}],["03fb8d6",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":139,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":137,"title":{},"body":{"changelog.html":{}}}],["0599fe3",{"_index":165,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":109,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":184,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":119,"title":{},"body":{"changelog.html":{}}}],["08t12:10:40.787",{"_index":1209,"title":{},"body":{"index.html":{}}}],["09",{"_index":108,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":86,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"index.html":{}}}],["1.0.0",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":124,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["100",{"_index":415,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["11",{"_index":204,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":173,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["123456",{"_index":793,"title":{},"body":{"index.html":{}}}],["127",{"_index":1157,"title":{},"body":{"index.html":{}}}],["13",{"_index":393,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["1370ea6",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":197,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["1697382106124",{"_index":1214,"title":{},"body":{"index.html":{}}}],["17",{"_index":175,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":192,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["18))).build",{"_index":995,"title":{},"body":{"index.html":{}}}],["18)).build",{"_index":992,"title":{},"body":{"index.html":{}}}],["18])).build",{"_index":886,"title":{},"body":{"index.html":{}}}],["19",{"_index":185,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":138,"title":{},"body":{"changelog.html":{},"index.html":{},"overview.html":{}}}],["2)).build",{"_index":1062,"title":{},"body":{"index.html":{}}}],["2).build",{"_index":858,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["2.0.2",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["2.0.3",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["2.0.4",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":275,"title":{},"body":{"changelog.html":{}}}],["2.3.0",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["2.3.1",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["2.3.2",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["2.4.0",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["2.4.1",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["2.4.2",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["2.5.0",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["2.6.0",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["2.6.1",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["2.6.2",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["2.6.3",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["2.7.0",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["2.7.1",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["2.7.2",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["2.7.3",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["2.7.4",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["2.7.5",{"_index":234,"title":{},"body":{"changelog.html":{}}}],["2.7.6",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["2.7.7",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":336,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["200",{"_index":916,"title":{},"body":{"index.html":{}}}],["2000",{"_index":1205,"title":{},"body":{"index.html":{}}}],["2017",{"_index":1212,"title":{},"body":{"index.html":{}}}],["2021",{"_index":172,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2022",{"_index":167,"title":{},"body":{"changelog.html":{}}}],["2023",{"_index":123,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":107,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":168,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":285,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":390,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["250",{"_index":1179,"title":{},"body":{"index.html":{}}}],["26",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["281fb81",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["2ecd7a5",{"_index":190,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":136,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["3.0.0",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["3.1.1",{"_index":214,"title":{},"body":{"changelog.html":{}}}],["3.1.2",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":203,"title":{},"body":{"changelog.html":{}}}],["3.2.1",{"_index":196,"title":{},"body":{"changelog.html":{}}}],["3.2.2",{"_index":191,"title":{},"body":{"changelog.html":{}}}],["3.2.3",{"_index":183,"title":{},"body":{"changelog.html":{}}}],["3.3.0",{"_index":174,"title":{},"body":{"changelog.html":{}}}],["3.3.1",{"_index":171,"title":{},"body":{"changelog.html":{}}}],["3.4.0",{"_index":166,"title":{},"body":{"changelog.html":{}}}],["3/3",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":120,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["32",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["34",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["344b46c",{"_index":314,"title":{},"body":{"changelog.html":{}}}],["35",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":383,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["38",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":135,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":105,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["40.719296",{"_index":948,"title":{},"body":{"index.html":{}}}],["41",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["43",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["44",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["45",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["459bf0a",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["46",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["47",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["48",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["49",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":122,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["5)).build",{"_index":893,"title":{},"body":{"index.html":{}}}],["50",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["500",{"_index":1207,"title":{},"body":{"index.html":{}}}],["51",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["52",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":366,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["54",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["56",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["58",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["59",{"_index":361,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["6",{"_index":121,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["60",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["61",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["62855da",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["663f2bf",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["67",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["69",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["69/69",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["6913cb3",{"_index":274,"title":{},"body":{"changelog.html":{}}}],["695e98c",{"_index":170,"title":{},"body":{"changelog.html":{}}}],["6c243e1",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["6e50682",{"_index":182,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":118,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["70",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["71",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["73.99279",{"_index":947,"title":{},"body":{"index.html":{}}}],["7776000000",{"_index":1053,"title":{},"body":{"index.html":{}}}],["8",{"_index":110,"title":{},"body":{"changelog.html":{}}}],["826ac37",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["8401905",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["8d946c9",{"_index":134,"title":{},"body":{"changelog.html":{}}}],["8dc7919",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":106,"title":{},"body":{"changelog.html":{}}}],["91b73f1",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["938bcaa",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["96a0e9b",{"_index":117,"title":{},"body":{"changelog.html":{}}}],["9afca54",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["9b859cf",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["9c97026",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["9d973b0",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["_id",{"_index":789,"title":{},"body":{"index.html":{}}}],["a973cb0",{"_index":297,"title":{},"body":{"changelog.html":{}}}],["abc123",{"_index":1134,"title":{},"body":{"index.html":{}}}],["ability",{"_index":205,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["above",{"_index":1266,"title":{},"body":{"license.html":{}}}],["abs",{"_index":1106,"title":{},"body":{"index.html":{}}}],["absolute",{"_index":506,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["accumulate",{"_index":1119,"title":{},"body":{"index.html":{}}}],["accumulateargs",{"_index":1120,"title":{},"body":{"index.html":{}}}],["accumulator",{"_index":556,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["acos",{"_index":1125,"title":{},"body":{"index.html":{}}}],["acosh",{"_index":1127,"title":{},"body":{"index.html":{}}}],["action",{"_index":1290,"title":{},"body":{"license.html":{}}}],["add",{"_index":129,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["add('$price",{"_index":1128,"title":{},"body":{"index.html":{}}}],["added",{"_index":145,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addfields",{"_index":341,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addfields(...values",{"_index":873,"title":{},"body":{"index.html":{}}}],["addfieldspayloadvalidator",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["adding",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["adds",{"_index":854,"title":{},"body":{"index.html":{}}}],["addstage",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["addtoset",{"_index":495,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["addtoset('$item",{"_index":1130,"title":{},"body":{"index.html":{}}}],["age",{"_index":888,"title":{},"body":{"index.html":{}}}],["aggregation",{"_index":815,"title":{},"body":{"index.html":{}}}],["aggregation/index.ts",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["alias",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["allelementstrue",{"_index":596,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["allows",{"_index":861,"title":{},"body":{"index.html":{}}}],["allusers",{"_index":970,"title":{},"body":{"index.html":{}}}],["alpha.0",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["altitude",{"_index":912,"title":{},"body":{"index.html":{}}}],["america/new_york",{"_index":1210,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1196,"title":{},"body":{"index.html":{}}}],["and(1",{"_index":1132,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1258,"title":{},"body":{"license.html":{}}}],["angle",{"_index":1185,"title":{},"body":{"index.html":{}}}],["angle_a",{"_index":1224,"title":{},"body":{"index.html":{}}}],["anyelementtrue",{"_index":597,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["appear",{"_index":735,"title":{},"body":{"index.html":{}}}],["arccosine",{"_index":626,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arccosinehyperbolic",{"_index":627,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arccosinehyperbolic(3",{"_index":1126,"title":{},"body":{"index.html":{}}}],["arcsine",{"_index":628,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arcsine('$value",{"_index":1136,"title":{},"body":{"index.html":{}}}],["arcsinehyperbolic",{"_index":629,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arcsinehyperbolic('$value",{"_index":1138,"title":{},"body":{"index.html":{}}}],["arctangent",{"_index":630,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arctangent('$value",{"_index":1140,"title":{},"body":{"index.html":{}}}],["arctangent2",{"_index":631,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arctangent2('$side_b",{"_index":1142,"title":{},"body":{"index.html":{}}}],["arctangenthyperbolic",{"_index":632,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arctangenthyperbolic('$value",{"_index":1145,"title":{},"body":{"index.html":{}}}],["argument",{"_index":201,"title":{},"body":{"changelog.html":{}}}],["arguments",{"_index":116,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["arising",{"_index":1294,"title":{},"body":{"license.html":{}}}],["array",{"_index":69,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["array.foreach((v",{"_index":90,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["array.isarray(v",{"_index":68,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["arrayelemat",{"_index":807,"title":{},"body":{"index.html":{}}}],["arrayelementat",{"_index":522,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["arraytoobject",{"_index":523,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["asin",{"_index":1137,"title":{},"body":{"index.html":{}}}],["asinh",{"_index":1139,"title":{},"body":{"index.html":{}}}],["associated",{"_index":1249,"title":{},"body":{"license.html":{}}}],["asynchronous",{"_index":809,"title":{},"body":{"index.html":{}}}],["atan",{"_index":1141,"title":{},"body":{"index.html":{}}}],["atan2",{"_index":1144,"title":{},"body":{"index.html":{}}}],["atanh",{"_index":1146,"title":{},"body":{"index.html":{}}}],["authors",{"_index":1283,"title":{},"body":{"license.html":{}}}],["auto",{"_index":312,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["auto.helper.ts",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["auto/bucket",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["automatically",{"_index":276,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["availability",{"_index":801,"title":{},"body":{"index.html":{}}}],["average",{"_index":496,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["average('$value",{"_index":1147,"title":{},"body":{"index.html":{}}}],["average('$value1",{"_index":1149,"title":{},"body":{"index.html":{}}}],["avg",{"_index":1148,"title":{},"body":{"index.html":{}}}],["await",{"_index":823,"title":{},"body":{"index.html":{}}}],["b258e26",{"_index":302,"title":{},"body":{"changelog.html":{}}}],["b4066e0",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["b47c269",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["bar",{"_index":881,"title":{},"body":{"index.html":{}}}],["behaviors",{"_index":128,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":746,"title":{},"body":{"index.html":{}}}],["binarysize",{"_index":560,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["binarysize('hello",{"_index":1151,"title":{},"body":{"index.html":{}}}],["bitand",{"_index":1155,"title":{},"body":{"index.html":{}}}],["bitnot",{"_index":1159,"title":{},"body":{"index.html":{}}}],["bitor",{"_index":1162,"title":{},"body":{"index.html":{}}}],["bitwiseand",{"_index":538,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bitwiseand('$array",{"_index":1154,"title":{},"body":{"index.html":{}}}],["bitwiseand(0",{"_index":1156,"title":{},"body":{"index.html":{}}}],["bitwisenot",{"_index":539,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bitwisenot('$long",{"_index":1158,"title":{},"body":{"index.html":{}}}],["bitwiseor",{"_index":540,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bitwiseor('$array",{"_index":1161,"title":{},"body":{"index.html":{}}}],["bitwiseor(0",{"_index":1163,"title":{},"body":{"index.html":{}}}],["bitwisexor",{"_index":541,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bitwisexor('$array",{"_index":1164,"title":{},"body":{"index.html":{}}}],["bitwisexor(0",{"_index":1166,"title":{},"body":{"index.html":{}}}],["bitxor",{"_index":1165,"title":{},"body":{"index.html":{}}}],["bool",{"_index":1181,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":46,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["bootssold",{"_index":937,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":497,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bottom(['field1",{"_index":1167,"title":{},"body":{"index.html":{}}}],["bottomn",{"_index":498,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bottomn('field",{"_index":1170,"title":{},"body":{"index.html":{}}}],["boundaries",{"_index":884,"title":{},"body":{"index.html":{}}}],["bounds",{"_index":913,"title":{},"body":{"index.html":{}}}],["branch",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["break",{"_index":75,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["breaking",{"_index":140,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bsonsize",{"_index":561,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["bsonsize('$$root",{"_index":1172,"title":{},"body":{"index.html":{}}}],["bucket",{"_index":311,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["bucket(value",{"_index":882,"title":{},"body":{"index.html":{}}}],["bucketauto",{"_index":894,"title":{},"body":{"index.html":{}}}],["bucketauto(value",{"_index":889,"title":{},"body":{"index.html":{}}}],["bucketautohelper",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["bucketautohelper(groupby",{"_index":890,"title":{},"body":{"index.html":{}}}],["bucketautopayloadvalidator",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["buckethelper",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["buckethelper(groupby",{"_index":883,"title":{},"body":{"index.html":{}}}],["bucketpayloadvalidator",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["buckets",{"_index":891,"title":{},"body":{"index.html":{}}}],["bug",{"_index":112,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":401,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["build();is",{"_index":784,"title":{},"body":{"index.html":{}}}],["builder",{"_index":357,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder\").pipelinebuilder",{"_index":772,"title":{},"body":{"index.html":{}}}],["builder.addfields",{"_index":875,"title":{},"body":{"index.html":{}}}],["builder.bucket(buckethelper('$age",{"_index":885,"title":{},"body":{"index.html":{}}}],["builder.bucketauto(bucketautohelper('$age",{"_index":892,"title":{},"body":{"index.html":{}}}],["builder.changestream(changestreamhelper()).build",{"_index":897,"title":{},"body":{"index.html":{}}}],["builder.changestreamsplitlargeevent().build",{"_index":898,"title":{},"body":{"index.html":{}}}],["builder.collstats(collstatshelper()).build",{"_index":901,"title":{},"body":{"index.html":{}}}],["builder.count('counter').build",{"_index":904,"title":{},"body":{"index.html":{}}}],["builder.currentop(currentophelper()).build",{"_index":908,"title":{},"body":{"index.html":{}}}],["builder.densify",{"_index":911,"title":{},"body":{"index.html":{}}}],["builder.documents",{"_index":920,"title":{},"body":{"index.html":{}}}],["builder.facet",{"_index":925,"title":{},"body":{"index.html":{}}}],["builder.fill",{"_index":936,"title":{},"body":{"index.html":{}}}],["builder.geonear",{"_index":944,"title":{},"body":{"index.html":{}}}],["builder.graphlookup",{"_index":952,"title":{},"body":{"index.html":{}}}],["builder.group",{"_index":961,"title":{},"body":{"index.html":{}}}],["builder.indexstats().build",{"_index":965,"title":{},"body":{"index.html":{}}}],["builder.insertstage",{"_index":869,"title":{},"body":{"index.html":{}}}],["builder.limit(10).build",{"_index":967,"title":{},"body":{"index.html":{}}}],["builder.listlocalsessions",{"_index":969,"title":{},"body":{"index.html":{}}}],["builder.listsampledqueries",{"_index":972,"title":{},"body":{"index.html":{}}}],["builder.listsearchindexes",{"_index":976,"title":{},"body":{"index.html":{}}}],["builder.listsessions",{"_index":979,"title":{},"body":{"index.html":{}}}],["builder.lookup",{"_index":987,"title":{},"body":{"index.html":{}}}],["builder.lookup(lookupconditionhelper('users",{"_index":983,"title":{},"body":{"index.html":{}}}],["builder.match($expression($greaterthanequal('$age",{"_index":994,"title":{},"body":{"index.html":{}}}],["builder.match(field('age",{"_index":991,"title":{},"body":{"index.html":{}}}],["builder.merge(mergehelper('newcollection')).build",{"_index":999,"title":{},"body":{"index.html":{}}}],["builder.out(outhelper('users')).build",{"_index":1003,"title":{},"body":{"index.html":{}}}],["builder.paging(5",{"_index":857,"title":{},"body":{"index.html":{}}}],["builder.plancachestats().build",{"_index":1005,"title":{},"body":{"index.html":{}}}],["builder.project",{"_index":1008,"title":{},"body":{"index.html":{}}}],["builder.project(projectignorehelper('password",{"_index":1016,"title":{},"body":{"index.html":{}}}],["builder.project(projectonlyhelper('password",{"_index":1021,"title":{},"body":{"index.html":{}}}],["builder.redact",{"_index":1023,"title":{},"body":{"index.html":{}}}],["builder.replaceroot",{"_index":1033,"title":{},"body":{"index.html":{}}}],["builder.replacewith('$name').build",{"_index":1040,"title":{},"body":{"index.html":{}}}],["builder.sample(samplehelper(6)).build",{"_index":1044,"title":{},"body":{"index.html":{}}}],["builder.search",{"_index":1048,"title":{},"body":{"index.html":{}}}],["builder.searchmeta",{"_index":1057,"title":{},"body":{"index.html":{}}}],["builder.set(field('first",{"_index":1060,"title":{},"body":{"index.html":{}}}],["builder.setwindowfields",{"_index":1064,"title":{},"body":{"index.html":{}}}],["builder.shardeddatadistribution({}).build",{"_index":1075,"title":{},"body":{"index.html":{}}}],["builder.skip(100).build",{"_index":1077,"title":{},"body":{"index.html":{}}}],["builder.sort",{"_index":1079,"title":{},"body":{"index.html":{}}}],["builder.sortbycount('$employee').build",{"_index":1085,"title":{},"body":{"index.html":{}}}],["builder.unionwith",{"_index":1090,"title":{},"body":{"index.html":{}}}],["builder.unset('users",{"_index":1098,"title":{},"body":{"index.html":{}}}],["builder.unwind",{"_index":1102,"title":{},"body":{"index.html":{}}}],["builder/helpers",{"_index":774,"title":{},"body":{"index.html":{}}}],["builder/operators",{"_index":776,"title":{},"body":{"index.html":{}}}],["builder/operators');using",{"_index":775,"title":{},"body":{"index.html":{}}}],["building",{"_index":28,"title":{},"body":{"classes/PipelineError.html":{}}}],["c",{"_index":1237,"title":{},"body":{"license.html":{}}}],["c885926",{"_index":180,"title":{},"body":{"changelog.html":{}}}],["c8d05f7",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["calculated",{"_index":949,"title":{},"body":{"index.html":{}}}],["cars",{"_index":1093,"title":{},"body":{"index.html":{}}}],["case",{"_index":74,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["ceil",{"_index":507,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ceil('$value",{"_index":1174,"title":{},"body":{"index.html":{}}}],["change",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":95,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":97,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["changestream",{"_index":739,"title":{},"body":{"index.html":{}}}],["changestream(value",{"_index":895,"title":{},"body":{"index.html":{}}}],["changestreamhelper",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["changestreamhelper(optional",{"_index":896,"title":{},"body":{"index.html":{}}}],["changestreamsplitlargeevent",{"_index":740,"title":{},"body":{"index.html":{}}}],["char",{"_index":723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["charge",{"_index":1244,"title":{},"body":{"license.html":{}}}],["check",{"_index":269,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["checkargsvalidity",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["checking",{"_index":760,"title":{},"body":{"index.html":{}}}],["checks",{"_index":699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["circleci",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":1286,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/PipelineError.html":{}},"body":{"classes/PipelineError.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/PipelineError.html":{},"overview.html":{}}}],["cmp",{"_index":1176,"title":{},"body":{"index.html":{}}}],["code",{"_index":164,"title":{},"body":{"changelog.html":{}}}],["coll",{"_index":1092,"title":{},"body":{"index.html":{}}}],["collectionpayload",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["collector",{"_index":1047,"title":{},"body":{"index.html":{}}}],["collstats",{"_index":902,"title":{},"body":{"index.html":{}}}],["collstats(value",{"_index":899,"title":{},"body":{"index.html":{}}}],["collstatshelper",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["collstatshelper(optional",{"_index":900,"title":{},"body":{"index.html":{}}}],["collstatspayloadvalidator",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["color",{"_index":1095,"title":{},"body":{"index.html":{}}}],["commit",{"_index":103,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":544,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["compare('$age",{"_index":1175,"title":{},"body":{"index.html":{}}}],["concat",{"_index":604,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["concat('$first",{"_index":1177,"title":{},"body":{"index.html":{}}}],["concatarrays",{"_index":524,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["concatarrays('$array",{"_index":1178,"title":{},"body":{"index.html":{}}}],["cond",{"_index":1012,"title":{},"body":{"index.html":{}}}],["condition",{"_index":552,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["condition.helper.ts",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["conditions",{"_index":1265,"title":{},"body":{"license.html":{}}}],["connectfromfield",{"_index":956,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1295,"title":{},"body":{"license.html":{}}}],["connecttofield",{"_index":957,"title":{},"body":{"index.html":{}}}],["const",{"_index":57,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"index.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["constructor(message",{"_index":14,"title":{},"body":{"classes/PipelineError.html":{}}}],["containing",{"_index":301,"title":{},"body":{"changelog.html":{}}}],["contains",{"_index":50,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"index.html":{}}}],["contract",{"_index":1291,"title":{},"body":{"license.html":{}}}],["convert",{"_index":642,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["convert(100",{"_index":1180,"title":{},"body":{"index.html":{}}}],["coordinates",{"_index":946,"title":{},"body":{"index.html":{}}}],["copies",{"_index":1110,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":1247,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1236,"title":{},"body":{"license.html":{}}}],["correct",{"_index":181,"title":{},"body":{"changelog.html":{}}}],["cos",{"_index":1184,"title":{},"body":{"index.html":{}}}],["cosh",{"_index":1186,"title":{},"body":{"index.html":{}}}],["cosine",{"_index":633,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["cosine('$angle",{"_index":1183,"title":{},"body":{"index.html":{}}}],["cosinehyperbolic",{"_index":634,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["count",{"_index":272,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["count(value",{"_index":903,"title":{},"body":{"index.html":{}}}],["counter",{"_index":905,"title":{},"body":{"index.html":{}}}],["countpayloadvalidator",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["covariancepop",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["covariancepopulation",{"_index":1187,"title":{},"body":{"index.html":{}}}],["covariancepopulation('$numeric1",{"_index":1188,"title":{},"body":{"index.html":{}}}],["covariancesamp",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["covariancesample",{"_index":1191,"title":{},"body":{"index.html":{}}}],["covariancesample('$numeric1",{"_index":1192,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":406,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["cumulativequantityforstate",{"_index":1069,"title":{},"body":{"index.html":{}}}],["current",{"_index":1073,"title":{},"body":{"index.html":{}}}],["currentop",{"_index":251,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["currentop(value",{"_index":906,"title":{},"body":{"index.html":{}}}],["currentophelper",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["currentophelper(optional",{"_index":907,"title":{},"body":{"index.html":{}}}],["custom",{"_index":852,"title":{},"body":{"index.html":{}}}],["d744405",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1287,"title":{},"body":{"license.html":{}}}],["date",{"_index":1051,"title":{},"body":{"index.html":{}}}],["dateadd",{"_index":563,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dateadd('$startdate",{"_index":1193,"title":{},"body":{"index.html":{}}}],["datediff",{"_index":1199,"title":{},"body":{"index.html":{}}}],["datedifference",{"_index":564,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datedifference('$startdate",{"_index":1197,"title":{},"body":{"index.html":{}}}],["datefromcalendarparts",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["datefromcalendarparts(2000",{"_index":1201,"title":{},"body":{"index.html":{}}}],["datefromisoweekparts",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["datefromisoweekparts(2000",{"_index":1206,"title":{},"body":{"index.html":{}}}],["datefromparts",{"_index":1200,"title":{},"body":{"index.html":{}}}],["datefromstring",{"_index":567,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datefromstring('2017",{"_index":1208,"title":{},"body":{"index.html":{}}}],["datestring",{"_index":1211,"title":{},"body":{"index.html":{}}}],["datesubtract",{"_index":568,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datesubtract(1697382106124",{"_index":1213,"title":{},"body":{"index.html":{}}}],["datetoparts",{"_index":569,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datetoparts(1697382106124",{"_index":1215,"title":{},"body":{"index.html":{}}}],["datetostring",{"_index":570,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datetostring(1697382106124",{"_index":1216,"title":{},"body":{"index.html":{}}}],["datetrunc",{"_index":571,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["datetrunc(1697382106124",{"_index":1217,"title":{},"body":{"index.html":{}}}],["day",{"_index":1202,"title":{},"body":{"index.html":{}}}],["dayofmonth",{"_index":572,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dayofmonth('$date",{"_index":1218,"title":{},"body":{"index.html":{}}}],["dayofweek",{"_index":573,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dayofweek('$date",{"_index":1220,"title":{},"body":{"index.html":{}}}],["dayofyear",{"_index":574,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dayofyear('$date",{"_index":1222,"title":{},"body":{"index.html":{}}}],["db.aggregate",{"_index":727,"title":{},"body":{"index.html":{}}}],["db.collection.aggregate",{"_index":726,"title":{},"body":{"index.html":{}}}],["dbcollpayload",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1250,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1296,"title":{},"body":{"license.html":{}}}],["debug",{"_index":291,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["decorator",{"_index":242,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["default",{"_index":23,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["defaults",{"_index":856,"title":{},"body":{"index.html":{}}}],["defaultvalue",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/PipelineError.html":{}}}],["degreestoradians",{"_index":635,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["degreestoradians('$angle_a",{"_index":1223,"title":{},"body":{"index.html":{}}}],["delete",{"_index":329,"title":{},"body":{"changelog.html":{}}}],["denserank",{"_index":1225,"title":{},"body":{"index.html":{}}}],["densify",{"_index":750,"title":{},"body":{"index.html":{}}}],["densify(value",{"_index":909,"title":{},"body":{"index.html":{}}}],["densifyhelper",{"_index":443,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["densifyhelper(field",{"_index":910,"title":{},"body":{"index.html":{}}}],["deprecatedmethodwarning",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["depth",{"_index":42,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["derivative",{"_index":1226,"title":{},"body":{"index.html":{}}}],["descend",{"_index":1027,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["develop",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["distancefield",{"_index":943,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1256,"title":{},"body":{"license.html":{}}}],["divide",{"_index":508,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doc1id",{"_index":921,"title":{},"body":{"index.html":{}}}],["doc2id",{"_index":922,"title":{},"body":{"index.html":{}}}],["doc3id",{"_index":923,"title":{},"body":{"index.html":{}}}],["docs",{"_index":786,"title":{},"body":{"index.html":{}}}],["doctype",{"_index":826,"title":{},"body":{"index.html":{}}}],["document",{"_index":819,"title":{},"body":{"index.html":{}}}],["document1",{"_index":835,"title":{},"body":{"index.html":{}}}],["document2",{"_index":836,"title":{},"body":{"index.html":{}}}],["document3",{"_index":837,"title":{},"body":{"index.html":{}}}],["document51",{"_index":838,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":407,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":99,"title":{},"body":{"changelog.html":{}}}],["documentnumber",{"_index":1227,"title":{},"body":{"index.html":{}}}],["documents",{"_index":737,"title":{},"body":{"index.html":{}}}],["documents(...values",{"_index":919,"title":{},"body":{"index.html":{}}}],["duplicable",{"_index":761,"title":{},"body":{"index.html":{}}}],["easier",{"_index":733,"title":{},"body":{"index.html":{}}}],["easy",{"_index":812,"title":{},"body":{"index.html":{}}}],["edit",{"_index":734,"title":{},"body":{"index.html":{}}}],["ee6d745",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["elements",{"_index":88,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["email",{"_index":799,"title":{},"body":{"index.html":{}}}],["employee",{"_index":1087,"title":{},"body":{"index.html":{}}}],["employees",{"_index":953,"title":{},"body":{"index.html":{}}}],["empty",{"_index":701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enable",{"_index":290,"title":{},"body":{"changelog.html":{}}}],["encountered",{"_index":48,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["enddate",{"_index":1198,"title":{},"body":{"index.html":{}}}],["eq",{"_index":804,"title":{},"body":{"index.html":{}}}],["equal",{"_index":545,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["equality.helper.ts",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["equivalent",{"_index":785,"title":{},"body":{"index.html":{}}}],["error",{"_index":9,"title":{},"body":{"classes/PipelineError.html":{}}}],["errorlist",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["europe/paris",{"_index":1219,"title":{},"body":{"index.html":{}}}],["event",{"_index":1282,"title":{},"body":{"license.html":{}}}],["example",{"_index":777,"title":{},"body":{"index.html":{}}}],["except",{"_index":738,"title":{},"body":{"index.html":{}}}],["exclusively",{"_index":765,"title":{},"body":{"index.html":{}}}],["exponent",{"_index":509,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["exponentialmovingaverage",{"_index":1228,"title":{},"body":{"index.html":{}}}],["export",{"_index":25,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["expr",{"_index":787,"title":{},"body":{"index.html":{}}}],["express",{"_index":1274,"title":{},"body":{"license.html":{}}}],["expression",{"_index":589,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["extends",{"_index":8,"title":{},"body":{"classes/PipelineError.html":{}}}],["f32531d",{"_index":202,"title":{},"body":{"changelog.html":{}}}],["f78cfb5",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["f83f4f0",{"_index":195,"title":{},"body":{"changelog.html":{}}}],["facet",{"_index":220,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["facet(...values",{"_index":924,"title":{},"body":{"index.html":{}}}],["facetpayloadvalidator",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["facets",{"_index":1058,"title":{},"body":{"index.html":{}}}],["fails",{"_index":865,"title":{},"body":{"index.html":{}}}],["false",{"_index":59,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"index.html":{}}}],["fd11909",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":125,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":228,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["field('bar",{"_index":878,"title":{},"body":{"index.html":{}}}],["field('first",{"_index":1080,"title":{},"body":{"index.html":{}}}],["field('foo",{"_index":876,"title":{},"body":{"index.html":{}}}],["field('pipeline1",{"_index":926,"title":{},"body":{"index.html":{}}}],["field('pipeline2",{"_index":928,"title":{},"body":{"index.html":{}}}],["field('pipeline3",{"_index":929,"title":{},"body":{"index.html":{}}}],["field('second",{"_index":1061,"title":{},"body":{"index.html":{}}}],["field('third",{"_index":1081,"title":{},"body":{"index.html":{}}}],["field(name",{"_index":874,"title":{},"body":{"index.html":{}}}],["field1",{"_index":1169,"title":{},"body":{"index.html":{}}}],["field2",{"_index":1168,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":163,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["fill",{"_index":751,"title":{},"body":{"index.html":{}}}],["fill(value",{"_index":934,"title":{},"body":{"index.html":{}}}],["fillhelper",{"_index":445,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["fillhelper(output",{"_index":935,"title":{},"body":{"index.html":{}}}],["filter",{"_index":525,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["finalize",{"_index":1117,"title":{},"body":{"index.html":{}}}],["first",{"_index":526,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["first_name",{"_index":1036,"title":{},"body":{"index.html":{}}}],["firstn",{"_index":1229,"title":{},"body":{"index.html":{}}}],["firstname",{"_index":797,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":1279,"title":{},"body":{"license.html":{}}}],["fix",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":113,"title":{},"body":{"changelog.html":{}}}],["floor",{"_index":510,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["following",{"_index":1264,"title":{},"body":{"license.html":{}}}],["foo",{"_index":880,"title":{},"body":{"index.html":{}}}],["foreach(k",{"_index":84,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["foreignfield",{"_index":806,"title":{},"body":{"index.html":{}}}],["found",{"_index":822,"title":{},"body":{"index.html":{}}}],["free",{"_index":1243,"title":{},"body":{"license.html":{}}}],["full",{"_index":914,"title":{},"body":{"index.html":{}}}],["full_name",{"_index":1035,"title":{},"body":{"index.html":{}}}],["function",{"_index":55,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{},"index.html":{}}}],["functionoperator",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":690,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1262,"title":{},"body":{"license.html":{}}}],["g",{"_index":1026,"title":{},"body":{"index.html":{}}}],["generics",{"_index":767,"title":{},"body":{"index.html":{}}}],["geonear",{"_index":256,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["geonear(value",{"_index":941,"title":{},"body":{"index.html":{}}}],["geonearhelper",{"_index":449,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["geonearhelper(near",{"_index":942,"title":{},"body":{"index.html":{}}}],["geonearpayloadvalidator",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["getcount",{"_index":820,"title":{},"body":{"index.html":{}}}],["getdocs",{"_index":154,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["getelement",{"_index":156,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["getelement(index",{"_index":818,"title":{},"body":{"index.html":{}}}],["getelementbyindex",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["getfield",{"_index":1230,"title":{},"body":{"index.html":{}}}],["getpagingresult",{"_index":160,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["getpagingresult(target",{"_index":845,"title":{},"body":{"index.html":{}}}],["getpagingresultresponse",{"_index":842,"title":{},"body":{"index.html":{}}}],["getpipeline",{"_index":749,"title":{},"body":{"index.html":{}}}],["getresult",{"_index":151,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["getresultresponse",{"_index":816,"title":{},"body":{"index.html":{}}}],["gets",{"_index":62,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["getting",{"_index":93,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["gettotalpagenumber",{"_index":176,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["gettypeofv",{"_index":680,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gettypeofv(v",{"_index":64,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["github",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":126,"title":{},"body":{"changelog.html":{}}}],["granted",{"_index":1242,"title":{},"body":{"license.html":{}}}],["graphlookup",{"_index":959,"title":{},"body":{"index.html":{}}}],["graphlookup(value",{"_index":951,"title":{},"body":{"index.html":{}}}],["greater",{"_index":834,"title":{},"body":{"index.html":{}}}],["greaterthan",{"_index":546,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["greaterthan($size($setintersection('$tags",{"_index":1024,"title":{},"body":{"index.html":{}}}],["greaterthanequal",{"_index":547,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["green",{"_index":1133,"title":{},"body":{"index.html":{}}}],["group",{"_index":963,"title":{},"body":{"index.html":{}}}],["group(value",{"_index":960,"title":{},"body":{"index.html":{}}}],["groupby",{"_index":887,"title":{},"body":{"index.html":{}}}],["groupbyautopayload",{"_index":313,"title":{},"body":{"changelog.html":{}}}],["groupbypayload",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["gt",{"_index":1030,"title":{},"body":{"index.html":{}}}],["gte",{"_index":996,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":104,"title":{},"body":{"changelog.html":{}}}],["hasundefinedvalue",{"_index":49,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["hello",{"_index":1153,"title":{},"body":{"index.html":{}}}],["helper",{"_index":144,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["helper(s",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["helpers",{"_index":762,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1241,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1284,"title":{},"body":{"license.html":{}}}],["hour",{"_index":575,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["hypotenuse",{"_index":1124,"title":{},"body":{"index.html":{}}}],["id",{"_index":780,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["ifnull",{"_index":553,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ignore.helper.ts",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["implemented",{"_index":864,"title":{},"body":{"index.html":{}}}],["implied",{"_index":1275,"title":{},"body":{"license.html":{}}}],["import",{"_index":294,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["improve",{"_index":127,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":1269,"title":{},"body":{"license.html":{}}}],["including",{"_index":1252,"title":{},"body":{"license.html":{}}}],["increase",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["index.d.ts",{"_index":188,"title":{},"body":{"changelog.html":{}}}],["index.js",{"_index":187,"title":{},"body":{"changelog.html":{}}}],["indexarray_",{"_index":91,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["indexofarray",{"_index":527,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["indexofbytes",{"_index":605,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["indexofcodepoint",{"_index":1231,"title":{},"body":{"index.html":{}}}],["indexofcp",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["indexstats",{"_index":964,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["init",{"_index":1118,"title":{},"body":{"index.html":{}}}],["input",{"_index":1182,"title":{},"body":{"index.html":{}}}],["insert",{"_index":758,"title":{},"body":{"index.html":{}}}],["insertstage",{"_index":860,"title":{},"body":{"index.html":{}}}],["insertstage(stage",{"_index":859,"title":{},"body":{"index.html":{}}}],["integral",{"_index":1232,"title":{},"body":{"index.html":{}}}],["interface",{"_index":35,"title":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{}}}],["interfaces",{"_index":37,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"overview.html":{}}}],["interpretation",{"_index":198,"title":{},"body":{"changelog.html":{}}}],["intopayload",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["isarray",{"_index":528,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isemptyobject",{"_index":479,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isemptyobject(obj",{"_index":698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnotemptyobject",{"_index":480,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isnotemptyobject(obj",{"_index":703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnumber",{"_index":643,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isodayofweek",{"_index":576,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isoweek",{"_index":577,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isoweekyear",{"_index":578,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["isundefined",{"_index":681,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isundefined(v",{"_index":56,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["isvalidname",{"_index":420,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalidname(options",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["item",{"_index":207,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["javascript",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["js",{"_index":1122,"title":{},"body":{"index.html":{}}}],["k",{"_index":87,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"index.html":{}}}],["keep",{"_index":868,"title":{},"body":{"index.html":{}}}],["key",{"_index":71,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":1273,"title":{},"body":{"license.html":{}}}],["lang",{"_index":1121,"title":{},"body":{"index.html":{}}}],["last",{"_index":529,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["last_name",{"_index":1037,"title":{},"body":{"index.html":{}}}],["lastn",{"_index":1233,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":798,"title":{},"body":{"index.html":{}}}],["length",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lessthan",{"_index":548,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["lessthanequal",{"_index":549,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["liability",{"_index":1288,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1285,"title":{},"body":{"license.html":{}}}],["lib",{"_index":849,"title":{},"body":{"index.html":{}}}],["lib/.../is",{"_index":693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../string.validator.ts",{"_index":694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../undefined.validator.ts",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../utils.ts",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/constants/index.ts",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["lib/decorators/is",{"_index":417,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/errors/pipeline/pipeline.error.ts",{"_index":6,"title":{},"body":{"classes/PipelineError.html":{},"coverage.html":{}}}],["lib/errors/pipeline/pipeline.error.ts:8",{"_index":17,"title":{},"body":{"classes/PipelineError.html":{}}}],["lib/helpers/bucket",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/bucket/bucket.helper.ts",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/change",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/coll",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/current",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/customs/field.helper.ts",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/customs/list.helper.ts",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/densify/densify.helper.ts",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/fill/fill.helper.ts",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/geo",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/lookup/lookup",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/merge/merge.helper.ts",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/out/out.helper.ts",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/project/project",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/project/project.helper.ts",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/sample/sample.helper.ts",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/search",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/search/search.helper.ts",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/union",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["lib/helpers/utils/utils.ts",{"_index":478,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/main.ts",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["lib/methods/get",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["lib/models/core/pipeline",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["lib/operators/accumulator/index.ts",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["lib/operators/arithmetic/index.ts",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["lib/operators/array/index.ts",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["lib/operators/bitwise/index.ts",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["lib/operators/boolean/index.ts",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["lib/operators/comparison/index.ts",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["lib/operators/conditional/index.ts",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["lib/operators/custom",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["lib/operators/data",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["lib/operators/date/index.ts",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["lib/operators/misc/index.ts",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["lib/operators/set/index.ts",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["lib/operators/string/index.ts",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["lib/operators/trigonometry/index.ts",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["lib/operators/type/index.ts",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/addfields",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/bucket",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/collstats",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/count",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/facet",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/geonear",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/lookup",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/match",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/project",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/set",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["lib/validators/stages/sort",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["lib/validators/utils/string.validator.ts",{"_index":675,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/validators/utils/undefined.validator.ts",{"_index":38,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/warnings/deprecated",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["library",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":1234,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":271,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["limit(value",{"_index":966,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1253,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1276,"title":{},"body":{"license.html":{}}}],["list",{"_index":51,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"coverage.html":{}}}],["listlocalsessions",{"_index":752,"title":{},"body":{"index.html":{}}}],["listlocalsessions(value",{"_index":968,"title":{},"body":{"index.html":{}}}],["listsampledqueries",{"_index":753,"title":{},"body":{"index.html":{}}}],["listsampledqueries(value",{"_index":971,"title":{},"body":{"index.html":{}}}],["listsearchindexes",{"_index":754,"title":{},"body":{"index.html":{}}}],["listsearchindexes(value",{"_index":975,"title":{},"body":{"index.html":{}}}],["listsessions",{"_index":980,"title":{},"body":{"index.html":{}}}],["listsessions(value",{"_index":978,"title":{},"body":{"index.html":{}}}],["literal",{"_index":590,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["localfield",{"_index":805,"title":{},"body":{"index.html":{}}}],["log",{"_index":511,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["log10",{"_index":512,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["long",{"_index":1160,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":355,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lookup(value",{"_index":981,"title":{},"body":{"index.html":{}}}],["lookupconditionhelper",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["lookupconditionhelper(from",{"_index":982,"title":{},"body":{"index.html":{}}}],["lookupequalityhelper",{"_index":454,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["lookupequalityhelper('users",{"_index":988,"title":{},"body":{"index.html":{}}}],["lookupequalityhelper(from",{"_index":986,"title":{},"body":{"index.html":{}}}],["lookupequalityvalidator",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["lookuppayloadvalidator",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["lte",{"_index":788,"title":{},"body":{"index.html":{}}}],["ltrim",{"_index":607,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["making",{"_index":731,"title":{},"body":{"index.html":{}}}],["map",{"_index":149,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["mapoperator",{"_index":148,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["match",{"_index":356,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["match(value",{"_index":990,"title":{},"body":{"index.html":{}}}],["matching",{"_index":34,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["matchpayloadvalidator",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["max",{"_index":499,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["maxlength",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["merchantability",{"_index":1278,"title":{},"body":{"license.html":{}}}],["merge",{"_index":304,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["merge(value",{"_index":997,"title":{},"body":{"index.html":{}}}],["mergehelper",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["mergehelper(into",{"_index":998,"title":{},"body":{"index.html":{}}}],["mergeobjects",{"_index":591,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["message",{"_index":22,"title":{},"body":{"classes/PipelineError.html":{}}}],["meta",{"_index":592,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["meta.helper.ts",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["meta/search",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["method",{"_index":155,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["methods",{"_index":177,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["methods/deprecated",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["mickael",{"_index":1238,"title":{},"body":{"license.html":{}}}],["millisecond",{"_index":579,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["min",{"_index":500,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["minlength",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["minute",{"_index":580,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["miscellaneous",{"_index":689,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1235,"title":{},"body":{"license.html":{}}}],["mod",{"_index":513,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["mode",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["model",{"_index":41,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["model.aggregate",{"_index":729,"title":{},"body":{"index.html":{}}}],["modify",{"_index":299,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["modifying",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["modules",{"_index":1297,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["moment.js",{"_index":295,"title":{},"body":{"changelog.html":{}}}],["mongodb",{"_index":725,"title":{},"body":{"index.html":{}}}],["mongoose",{"_index":728,"title":{},"body":{"index.html":{}}}],["month",{"_index":581,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["more",{"_index":227,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["multiple",{"_index":219,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["multiply",{"_index":514,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["mycustomstage",{"_index":870,"title":{},"body":{"index.html":{}}}],["myfield",{"_index":871,"title":{},"body":{"index.html":{}}}],["mynewpipeline",{"_index":778,"title":{},"body":{"index.html":{}}}],["mypagination",{"_index":779,"title":{},"body":{"index.html":{}}}],["myvalue",{"_index":872,"title":{},"body":{"index.html":{}}}],["n",{"_index":1171,"title":{},"body":{"index.html":{}}}],["name",{"_index":12,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["name.decorator.ts",{"_index":419,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["name/is",{"_index":418,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":973,"title":{},"body":{"index.html":{}}}],["native",{"_index":855,"title":{},"body":{"index.html":{}}}],["naturallog",{"_index":515,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["near",{"_index":950,"title":{},"body":{"index.html":{}}}],["near.helper.ts",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["near/geo",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["nearpayload",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["necessary",{"_index":277,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":863,"title":{},"body":{"index.html":{}}}],["new",{"_index":130,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{}}}],["newcollection",{"_index":1000,"title":{},"body":{"index.html":{}}}],["newroot",{"_index":1034,"title":{},"body":{"index.html":{}}}],["news",{"_index":745,"title":{},"body":{"index.html":{}}}],["newval",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nickname",{"_index":1011,"title":{},"body":{"index.html":{}}}],["nodanche",{"_index":1239,"title":{},"body":{"license.html":{}}}],["non",{"_index":157,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["non_duplicable_stage_list",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["noninfringement",{"_index":1281,"title":{},"body":{"license.html":{}}}],["notable",{"_index":96,"title":{},"body":{"changelog.html":{}}}],["notequal",{"_index":550,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["notice",{"_index":1267,"title":{},"body":{"license.html":{}}}],["now",{"_index":768,"title":{},"body":{"index.html":{}}}],["npm",{"_index":742,"title":{},"body":{"index.html":{}}}],["null",{"_index":962,"title":{},"body":{"index.html":{}}}],["number",{"_index":43,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["number$or",{"_index":829,"title":{},"body":{"index.html":{}}}],["numcopies",{"_index":1107,"title":{},"body":{"index.html":{}}}],["numeric1",{"_index":1190,"title":{},"body":{"index.html":{}}}],["numeric2",{"_index":1189,"title":{},"body":{"index.html":{}}}],["obj",{"_index":702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":67,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["object.keys(object",{"_index":83,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["objecttoarray",{"_index":530,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["obtaining",{"_index":1246,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":27,"title":{},"body":{"classes/PipelineError.html":{}}}],["offer",{"_index":769,"title":{},"body":{"index.html":{}}}],["one",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["only.helper.ts",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["op.helper.ts",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["op/current",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["operator",{"_index":993,"title":{},"body":{"index.html":{}}}],["operators",{"_index":114,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["oppayload",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":21,"title":{},"body":{"classes/PipelineError.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["orderdate",{"_index":1068,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1050,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":1293,"title":{},"body":{"license.html":{}}}],["out",{"_index":282,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["out(value",{"_index":1001,"title":{},"body":{"index.html":{}}}],["outhelper",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["outhelper(collection",{"_index":1002,"title":{},"body":{"index.html":{}}}],["output",{"_index":940,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1298,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":743,"title":{},"body":{"index.html":{}}}],["package.json",{"_index":189,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":783,"title":{},"body":{"index.html":{}}}],["pages",{"_index":844,"title":{},"body":{"index.html":{}}}],["paginate",{"_index":278,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["paginated",{"_index":158,"title":{},"body":{"changelog.html":{}}}],["pagination",{"_index":194,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["paging",{"_index":179,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["paging(elementsperpage",{"_index":853,"title":{},"body":{"index.html":{}}}],["param",{"_index":26,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["parameter",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"classes/PipelineError.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":206,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["partitionby",{"_index":1065,"title":{},"body":{"index.html":{}}}],["partitionbyfields",{"_index":917,"title":{},"body":{"index.html":{}}}],["pass",{"_index":217,"title":{},"body":{"changelog.html":{}}}],["passed",{"_index":200,"title":{},"body":{"changelog.html":{}}}],["password",{"_index":1018,"title":{},"body":{"index.html":{}}}],["path",{"_index":186,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["payload",{"_index":142,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["payload.validator.ts",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["per",{"_index":782,"title":{},"body":{"index.html":{}}}],["permission",{"_index":1240,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1260,"title":{},"body":{"license.html":{}}}],["person",{"_index":1245,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1261,"title":{},"body":{"license.html":{}}}],["pipeline",{"_index":29,"title":{},"body":{"classes/PipelineError.html":{},"changelog.html":{},"index.html":{}}}],["pipeline).then",{"_index":847,"title":{},"body":{"index.html":{}}}],["pipeline1",{"_index":931,"title":{},"body":{"index.html":{}}}],["pipeline2",{"_index":932,"title":{},"body":{"index.html":{}}}],["pipeline3",{"_index":933,"title":{},"body":{"index.html":{}}}],["pipelinebuilder",{"_index":483,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["pipelinebuilder('example",{"_index":851,"title":{},"body":{"index.html":{}}}],["pipelineerror",{"_index":1,"title":{"classes/PipelineError.html":{}},"body":{"classes/PipelineError.html":{},"coverage.html":{}}}],["pipelineerror.name",{"_index":32,"title":{},"body":{"classes/PipelineError.html":{}}}],["pipelines",{"_index":730,"title":{},"body":{"index.html":{}}}],["pivot",{"_index":1052,"title":{},"body":{"index.html":{}}}],["plancachestats",{"_index":1004,"title":{},"body":{"index.html":{}}}],["point",{"_index":945,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1271,"title":{},"body":{"license.html":{}}}],["possibilities",{"_index":830,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":152,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["pow",{"_index":516,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["prefixed",{"_index":763,"title":{},"body":{"index.html":{}}}],["preservenullandemptyarrays",{"_index":1104,"title":{},"body":{"index.html":{}}}],["price",{"_index":1129,"title":{},"body":{"index.html":{}}}],["profile",{"_index":795,"title":{},"body":{"index.html":{}}}],["profile.availability",{"_index":802,"title":{},"body":{"index.html":{}}}],["profile.skills",{"_index":800,"title":{},"body":{"index.html":{}}}],["profileid",{"_index":796,"title":{},"body":{"index.html":{}}}],["profiles",{"_index":794,"title":{},"body":{"index.html":{}}}],["project",{"_index":98,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["project(...values",{"_index":1006,"title":{},"body":{"index.html":{}}}],["projecthelper",{"_index":465,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["projecthelper('age",{"_index":1009,"title":{},"body":{"index.html":{}}}],["projecthelper(field",{"_index":1007,"title":{},"body":{"index.html":{}}}],["projectignorehelper",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["projectignorehelper(...fields",{"_index":1015,"title":{},"body":{"index.html":{}}}],["projectonlyhelper",{"_index":463,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["projectonlyhelper(...fields",{"_index":1020,"title":{},"body":{"index.html":{}}}],["projectpayloadvalidator",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["promise",{"_index":808,"title":{},"body":{"index.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["property",{"_index":40,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["propertylist",{"_index":52,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["provide",{"_index":833,"title":{},"body":{"index.html":{}}}],["provided",{"_index":700,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["provides",{"_index":810,"title":{},"body":{"index.html":{}}}],["prune",{"_index":1028,"title":{},"body":{"index.html":{}}}],["publish",{"_index":1255,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1280,"title":{},"body":{"license.html":{}}}],["push",{"_index":501,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["qty",{"_index":1135,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1070,"title":{},"body":{"index.html":{}}}],["radianstodegrees",{"_index":636,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["rand",{"_index":593,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["range",{"_index":531,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["readable",{"_index":732,"title":{},"body":{"index.html":{}}}],["ready",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["reason",{"_index":866,"title":{},"body":{"index.html":{}}}],["red",{"_index":1096,"title":{},"body":{"index.html":{}}}],["redact",{"_index":1029,"title":{},"body":{"index.html":{}}}],["redact(value",{"_index":1022,"title":{},"body":{"index.html":{}}}],["reduce",{"_index":532,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["ref",{"_index":1094,"title":{},"body":{"index.html":{}}}],["refreshtoken",{"_index":1019,"title":{},"body":{"index.html":{}}}],["refreshtoken')).build",{"_index":1017,"title":{},"body":{"index.html":{}}}],["regexfind",{"_index":608,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["regexfindall",{"_index":609,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["regexmatch",{"_index":610,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["release",{"_index":332,"title":{},"body":{"changelog.html":{}}}],["released",{"_index":1049,"title":{},"body":{"index.html":{}}}],["reliability",{"_index":210,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":1014,"title":{},"body":{"index.html":{}}}],["removing",{"_index":764,"title":{},"body":{"index.html":{}}}],["rename",{"_index":161,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["renaming",{"_index":147,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["replaceall",{"_index":611,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["replaceone",{"_index":612,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["replaceroot",{"_index":1038,"title":{},"body":{"index.html":{}}}],["replaceroot(value",{"_index":1032,"title":{},"body":{"index.html":{}}}],["replacewith",{"_index":1041,"title":{},"body":{"index.html":{}}}],["replacewith(value",{"_index":1039,"title":{},"body":{"index.html":{}}}],["replacing",{"_index":141,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reportinghierarchy",{"_index":958,"title":{},"body":{"index.html":{}}}],["reportsto",{"_index":955,"title":{},"body":{"index.html":{}}}],["request",{"_index":817,"title":{},"body":{"index.html":{}}}],["require",{"_index":395,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["require(\"mongodb",{"_index":771,"title":{},"body":{"index.html":{}}}],["require('mongodb",{"_index":773,"title":{},"body":{"index.html":{}}}],["response",{"_index":92,"title":{},"body":{"interfaces/TestResultResponse.html":{},"changelog.html":{},"index.html":{}}}],["responses",{"_index":159,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["restriction",{"_index":1251,"title":{},"body":{"license.html":{}}}],["result",{"_index":39,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"index.html":{}}}],["result.getcount",{"_index":828,"title":{},"body":{"index.html":{}}}],["result.getdocs",{"_index":825,"title":{},"body":{"index.html":{}}}],["result.getelement('last",{"_index":840,"title":{},"body":{"index.html":{}}}],["result.getelement(2",{"_index":839,"title":{},"body":{"index.html":{}}}],["result.getelement(99",{"_index":841,"title":{},"body":{"index.html":{}}}],["result.getelement(index",{"_index":827,"title":{},"body":{"index.html":{}}}],["result.gettotalpagenumber",{"_index":846,"title":{},"body":{"index.html":{}}}],["result.ts",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["result/get",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["resultproperty",{"_index":36,"title":{"interfaces/ResultProperty.html":{}},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{}}}],["results",{"_index":33,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["retrieved",{"_index":831,"title":{},"body":{"index.html":{}}}],["return",{"_index":60,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"index.html":{}}}],["returned",{"_index":193,"title":{},"body":{"changelog.html":{}}}],["returns",{"_index":695,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["reversearray",{"_index":533,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["rework",{"_index":115,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":1254,"title":{},"body":{"license.html":{}}}],["roles",{"_index":1100,"title":{},"body":{"index.html":{}}}],["roles').build",{"_index":1099,"title":{},"body":{"index.html":{}}}],["root",{"_index":1173,"title":{},"body":{"index.html":{}}}],["round",{"_index":517,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["rtrim",{"_index":613,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["rules",{"_index":244,"title":{},"body":{"changelog.html":{}}}],["runkit",{"_index":850,"title":{},"body":{"index.html":{}}}],["s",{"_index":744,"title":{},"body":{"index.html":{}}}],["sample",{"_index":315,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sample(value",{"_index":1042,"title":{},"body":{"index.html":{}}}],["samplehelper",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["samplehelper(size",{"_index":1043,"title":{},"body":{"index.html":{}}}],["samplerate",{"_index":594,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["sandalssold",{"_index":938,"title":{},"body":{"index.html":{}}}],["script",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["search",{"_index":1054,"title":{},"body":{"index.html":{}}}],["search(value",{"_index":1045,"title":{},"body":{"index.html":{}}}],["searchhelper",{"_index":473,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["searchhelper(operator",{"_index":1046,"title":{},"body":{"index.html":{}}}],["searchindex01",{"_index":977,"title":{},"body":{"index.html":{}}}],["searchmeta",{"_index":755,"title":{},"body":{"index.html":{}}}],["searchmeta(value",{"_index":1055,"title":{},"body":{"index.html":{}}}],["searchmetahelper",{"_index":471,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["searchmetahelper(collector",{"_index":1056,"title":{},"body":{"index.html":{}}}],["second",{"_index":582,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["see",{"_index":100,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":1259,"title":{},"body":{"license.html":{}}}],["sequential",{"_index":736,"title":{},"body":{"index.html":{}}}],["set",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["set(...values",{"_index":1059,"title":{},"body":{"index.html":{}}}],["setdefaultvalueifnotprovided",{"_index":481,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setdefaultvalueifnotprovided(defaultvalue",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setdifference",{"_index":598,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setequals",{"_index":599,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setintersection",{"_index":600,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setissubset",{"_index":601,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setpayloadvalidator",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["sets",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setunion",{"_index":602,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["setwindowfields",{"_index":756,"title":{},"body":{"index.html":{}}}],["setwindowfields(value",{"_index":1063,"title":{},"body":{"index.html":{}}}],["several",{"_index":162,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":1268,"title":{},"body":{"license.html":{}}}],["shardeddatadistribution",{"_index":757,"title":{},"body":{"index.html":{}}}],["shardeddatadistribution(value",{"_index":1074,"title":{},"body":{"index.html":{}}}],["side_a",{"_index":1143,"title":{},"body":{"index.html":{}}}],["side_b",{"_index":1123,"title":{},"body":{"index.html":{}}}],["simplify",{"_index":153,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["simply",{"_index":832,"title":{},"body":{"index.html":{}}}],["sin",{"_index":637,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["single",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["sinh",{"_index":638,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["size",{"_index":534,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["size/index.ts",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["sizepayload",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["sizes",{"_index":1103,"title":{},"body":{"index.html":{}}}],["skills",{"_index":792,"title":{},"body":{"index.html":{}}}],["skip",{"_index":270,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["skip(value",{"_index":1076,"title":{},"body":{"index.html":{}}}],["slice",{"_index":535,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["sneakerssold",{"_index":939,"title":{},"body":{"index.html":{}}}],["social.post",{"_index":974,"title":{},"body":{"index.html":{}}}],["software",{"_index":1248,"title":{},"body":{"license.html":{}}}],["somestring",{"_index":1131,"title":{},"body":{"index.html":{}}}],["sort",{"_index":1083,"title":{},"body":{"index.html":{}}}],["sort(...values",{"_index":1078,"title":{},"body":{"index.html":{}}}],["sortby",{"_index":1067,"title":{},"body":{"index.html":{}}}],["sortbycount",{"_index":1086,"title":{},"body":{"index.html":{}}}],["sortbycount(value",{"_index":1084,"title":{},"body":{"index.html":{}}}],["sortpayloadvalidator",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["space",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["special",{"_index":722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":63,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["specifying",{"_index":47,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"index.html":{}}}],["split",{"_index":614,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["sqrt",{"_index":518,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stage",{"_index":132,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["stage.ts",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["stage_payload_validators_available",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["stages",{"_index":131,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["standard",{"_index":101,"title":{},"body":{"changelog.html":{}}}],["startdate",{"_index":1194,"title":{},"body":{"index.html":{}}}],["started",{"_index":94,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startwith",{"_index":954,"title":{},"body":{"index.html":{}}}],["state",{"_index":1066,"title":{},"body":{"index.html":{}}}],["state.count",{"_index":1108,"title":{},"body":{"index.html":{}}}],["state.sum",{"_index":1109,"title":{},"body":{"index.html":{}}}],["state1",{"_index":1111,"title":{},"body":{"index.html":{}}}],["state1.count",{"_index":1113,"title":{},"body":{"index.html":{}}}],["state1.sum",{"_index":1115,"title":{},"body":{"index.html":{}}}],["state2",{"_index":1112,"title":{},"body":{"index.html":{}}}],["state2.count",{"_index":1114,"title":{},"body":{"index.html":{}}}],["state2.sum",{"_index":1116,"title":{},"body":{"index.html":{}}}],["statements",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["stats.helper.ts",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["stats/coll",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["stddevpop",{"_index":502,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stddevsamp",{"_index":503,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["step",{"_index":915,"title":{},"body":{"index.html":{}}}],["stlw",{"_index":1025,"title":{},"body":{"index.html":{}}}],["strcasecmp",{"_index":615,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stream.helper.ts",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["stream/change",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["strlenbytes",{"_index":616,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["strlencp",{"_index":617,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["subject",{"_index":1263,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1257,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1270,"title":{},"body":{"license.html":{}}}],["substr",{"_index":618,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["substrbytes",{"_index":619,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["substrcp",{"_index":620,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["subtract",{"_index":519,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["suffix",{"_index":143,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sum",{"_index":504,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["super",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["super(message",{"_index":30,"title":{},"body":{"classes/PipelineError.html":{}}}],["switch",{"_index":73,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{},"index.html":{}}}],["symbol",{"_index":146,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["t",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["table",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":927,"title":{},"body":{"index.html":{}}}],["tags",{"_index":1031,"title":{},"body":{"index.html":{}}}],["tan",{"_index":639,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tanh",{"_index":640,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["target",{"_index":824,"title":{},"body":{"index.html":{}}}],["technical",{"_index":724,"title":{},"body":{"index.html":{}}}],["test",{"_index":54,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["testarrayvalues",{"_index":89,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["testarrayvalues(array",{"_index":696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testarrayvalues(v",{"_index":77,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["testing",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["testmaxlength",{"_index":676,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testmaxlength(newval",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testminlength",{"_index":677,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testminlength(newval",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testnospace",{"_index":678,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testnospace(newval",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testnospecialchar",{"_index":679,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testnospecialchar(newval",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testobjectproperties",{"_index":82,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["testobjectproperties(object",{"_index":697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testobjectproperties(v",{"_index":76,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["testresult",{"_index":58,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["testresult.hasundefinedvalue",{"_index":78,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["testresult.propertylist",{"_index":80,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["testresult.propertylist.concat",{"_index":81,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["testresultresponse",{"_index":45,"title":{"interfaces/TestResultResponse.html":{}},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":70,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["testvalueofv",{"_index":682,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testvalueofv(object[k",{"_index":85,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["testvalueofv(v",{"_index":61,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{}}}],["textscore",{"_index":1082,"title":{},"body":{"index.html":{}}}],["third",{"_index":930,"title":{},"body":{"index.html":{}}}],["this.name",{"_index":31,"title":{},"body":{"classes/PipelineError.html":{}}}],["three",{"_index":843,"title":{},"body":{"index.html":{}}}],["throwerror",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["times",{"_index":741,"title":{},"body":{"index.html":{}}}],["timezone",{"_index":1203,"title":{},"body":{"index.html":{}}}],["tobool",{"_index":644,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["todate",{"_index":583,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["todecimal",{"_index":645,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["todouble",{"_index":646,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["toint",{"_index":647,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tolong",{"_index":648,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tolower",{"_index":621,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["toobjectid",{"_index":649,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tort",{"_index":1292,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":622,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["total",{"_index":821,"title":{},"body":{"index.html":{}}}],["totalelements",{"_index":790,"title":{},"body":{"index.html":{}}}],["toupper",{"_index":623,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["trim",{"_index":624,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["true",{"_index":79,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"index.html":{}}}],["trunc",{"_index":520,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["try",{"_index":848,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["typeof",{"_index":66,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["types",{"_index":133,"title":{},"body":{"changelog.html":{}}}],["typing",{"_index":169,"title":{},"body":{"changelog.html":{}}}],["unbounded",{"_index":1072,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unionwith",{"_index":318,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["unionwith(value",{"_index":1088,"title":{},"body":{"index.html":{}}}],["unionwithhelper",{"_index":477,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["unionwithhelper('cars",{"_index":1091,"title":{},"body":{"index.html":{}}}],["unionwithhelper(collection",{"_index":1089,"title":{},"body":{"index.html":{}}}],["unit",{"_index":1195,"title":{},"body":{"index.html":{}}}],["unset",{"_index":803,"title":{},"body":{"index.html":{}}}],["unset(...values",{"_index":1097,"title":{},"body":{"index.html":{}}}],["unwind",{"_index":1105,"title":{},"body":{"index.html":{}}}],["unwind(value",{"_index":1101,"title":{},"body":{"index.html":{}}}],["update",{"_index":150,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":770,"title":{},"body":{"index.html":{}}}],["use",{"_index":814,"title":{},"body":{"index.html":{},"license.html":{}}}],["used",{"_index":178,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["usefully",{"_index":862,"title":{},"body":{"index.html":{}}}],["user",{"_index":791,"title":{},"body":{"index.html":{}}}],["user.age",{"_index":1010,"title":{},"body":{"index.html":{}}}],["user.nickname",{"_index":1013,"title":{},"body":{"index.html":{}}}],["userid",{"_index":989,"title":{},"body":{"index.html":{}}}],["users",{"_index":985,"title":{},"body":{"index.html":{}}}],["users')).build",{"_index":984,"title":{},"body":{"index.html":{}}}],["using",{"_index":208,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["v",{"_index":53,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["v3",{"_index":747,"title":{},"body":{"index.html":{}}}],["v4",{"_index":748,"title":{},"body":{"index.html":{}}}],["valid",{"_index":199,"title":{},"body":{"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validation",{"_index":243,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["validator",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["validpipelinestagenamelist",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["value",{"_index":24,"title":{},"body":{"classes/PipelineError.html":{},"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["value1",{"_index":877,"title":{},"body":{"index.html":{}}}],["value2",{"_index":879,"title":{},"body":{"index.html":{}}}],["value3",{"_index":1150,"title":{},"body":{"index.html":{}}}],["values",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["variety",{"_index":918,"title":{},"body":{"index.html":{}}}],["version",{"_index":102,"title":{},"body":{"changelog.html":{}}}],["very",{"_index":811,"title":{},"body":{"index.html":{}}}],["vtype",{"_index":65,"title":{},"body":{"interfaces/ResultProperty.html":{},"interfaces/TestResultResponse.html":{}}}],["want",{"_index":867,"title":{},"body":{"index.html":{}}}],["warning.ts",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["warranties",{"_index":1277,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1272,"title":{},"body":{"license.html":{}}}],["way",{"_index":813,"title":{},"body":{"index.html":{}}}],["week",{"_index":584,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["weight",{"_index":781,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":766,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1289,"title":{},"body":{"license.html":{}}}],["window",{"_index":1071,"title":{},"body":{"index.html":{}}}],["with.helper.ts",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["with/union",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["without",{"_index":759,"title":{},"body":{"index.html":{},"license.html":{}}}],["world",{"_index":1152,"title":{},"body":{"index.html":{}}}],["year",{"_index":585,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["yes",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["zip",{"_index":536,"title":{},"body":{"coverage.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/PipelineError.html":{"url":"classes/PipelineError.html","title":"class - PipelineError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PipelineError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/errors/pipeline/pipeline.error.ts\n        \n\n\n            \n                Description\n            \n            \n                PipelineError\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/errors/pipeline/pipeline.error.ts:8\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'PipelineError'\n                    \n                \n                    \n                        \n                                Defined in lib/errors/pipeline/pipeline.error.ts:8\n                        \n                    \n\n            \n                \n                    name\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PipelineError extends Error {\n  /**\n   * name\n   */\n  name = 'PipelineError';\n\n  /**\n   * constructor\n   * @param message\n   */\n  constructor(message = 'An error occurred while building the pipeline.') {\n    super(message);\n    this.name = PipelineError.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResultProperty.html":{"url":"interfaces/ResultProperty.html","title":"interface - ResultProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResultProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/validators/utils/undefined.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Result Property Model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            depth\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        depth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        depth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Depth of property with undefined value\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of property with undefined value\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TestResultResponse {\n  /**\n   * A boolean specifying if an undefined value has been encountered\n   */\n  hasUndefinedValue: boolean;\n  /**\n   * Contains a list of properties with an undefined value\n   */\n  propertyList: ResultProperty[];\n}\n\n/**\n * Result Property Model\n */\nexport interface ResultProperty {\n  /**\n   * Name of property with undefined value\n   */\n  name: string;\n  /**\n   * Depth of property with undefined value\n   */\n  depth: number;\n}\n\n/**\n * Is Undefined\n * @param v The value to test\n * @constructor\n */\nexport function IsUndefined(v: any): TestResultResponse {\n  const testResult: TestResultResponse = {\n    hasUndefinedValue: false,\n    propertyList: []\n  };\n\n  return testValueOfV(v, testResult);\n}\n\n/**\n * Gets the type of the specified value\n * @param v\n */\nfunction getTypeOfV(v: any): string {\n  let vType: string = typeof v;\n\n  if (vType === 'object' && Array.isArray(v)) {\n    vType = 'array';\n  }\n\n  return vType;\n}\n\n/**\n * Tests the specified value\n * @param v\n * @param testResult\n * @param depth\n * @param key\n */\nfunction testValueOfV(v: any, testResult: TestResultResponse, depth = 0, key = ''): TestResultResponse {\n  const vType: string = getTypeOfV(v);\n\n  switch (vType) {\n    case 'string':\n      break;\n    case 'number':\n      break;\n    case 'boolean':\n      break;\n    case 'object':\n      testResult = testObjectProperties(v, testResult, depth, key);\n      break;\n    case 'array':\n      testResult = testArrayValues(v, testResult, depth, key);\n      break;\n\n    default:\n      testResult.hasUndefinedValue = true;\n      testResult.propertyList = key\n        ? testResult.propertyList.concat([{ name: key, depth }])\n        : testResult.propertyList;\n  }\n\n  return testResult;\n}\n\n/**\n * Tests an object and its properties\n * @param object\n * @param testResult\n * @param depth\n * @param key\n */\nfunction testObjectProperties(\n  object: { [key: string]: any },\n  testResult: TestResultResponse,\n  depth: number,\n  key: string\n): TestResultResponse {\n\n  Object.keys(object)\n        .forEach(k => {\n          testResult = testValueOfV(object[k], testResult, (depth + 1), (key ? key + ' > ' : '') + k);\n        });\n\n  return testResult;\n}\n\n/**\n * Tests an array and its elements\n * @param array\n * @param testResult\n * @param depth\n * @param key\n */\nfunction testArrayValues(\n  array: any[],\n  testResult: TestResultResponse,\n  depth: number,\n  key: string\n): TestResultResponse {\n\n  array.forEach((v, i) => {\n    testResult = testValueOfV(v, testResult, (depth + 1), ((key ? key + ' > indexArray_' : 'indexArray_') + i));\n  });\n\n  return testResult;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TestResultResponse.html":{"url":"interfaces/TestResultResponse.html","title":"interface - TestResultResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TestResultResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/validators/utils/undefined.validator.ts\n        \n\n\n            \n                Description\n            \n            \n                Test Result Response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hasUndefinedValue\n                                        \n                                \n                                \n                                        \n                                            propertyList\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hasUndefinedValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasUndefinedValue:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A boolean specifying if an undefined value has been encountered\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        propertyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        propertyList:         ResultProperty[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ResultProperty[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Contains a list of properties with an undefined value\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TestResultResponse {\n  /**\n   * A boolean specifying if an undefined value has been encountered\n   */\n  hasUndefinedValue: boolean;\n  /**\n   * Contains a list of properties with an undefined value\n   */\n  propertyList: ResultProperty[];\n}\n\n/**\n * Result Property Model\n */\nexport interface ResultProperty {\n  /**\n   * Name of property with undefined value\n   */\n  name: string;\n  /**\n   * Depth of property with undefined value\n   */\n  depth: number;\n}\n\n/**\n * Is Undefined\n * @param v The value to test\n * @constructor\n */\nexport function IsUndefined(v: any): TestResultResponse {\n  const testResult: TestResultResponse = {\n    hasUndefinedValue: false,\n    propertyList: []\n  };\n\n  return testValueOfV(v, testResult);\n}\n\n/**\n * Gets the type of the specified value\n * @param v\n */\nfunction getTypeOfV(v: any): string {\n  let vType: string = typeof v;\n\n  if (vType === 'object' && Array.isArray(v)) {\n    vType = 'array';\n  }\n\n  return vType;\n}\n\n/**\n * Tests the specified value\n * @param v\n * @param testResult\n * @param depth\n * @param key\n */\nfunction testValueOfV(v: any, testResult: TestResultResponse, depth = 0, key = ''): TestResultResponse {\n  const vType: string = getTypeOfV(v);\n\n  switch (vType) {\n    case 'string':\n      break;\n    case 'number':\n      break;\n    case 'boolean':\n      break;\n    case 'object':\n      testResult = testObjectProperties(v, testResult, depth, key);\n      break;\n    case 'array':\n      testResult = testArrayValues(v, testResult, depth, key);\n      break;\n\n    default:\n      testResult.hasUndefinedValue = true;\n      testResult.propertyList = key\n        ? testResult.propertyList.concat([{ name: key, depth }])\n        : testResult.propertyList;\n  }\n\n  return testResult;\n}\n\n/**\n * Tests an object and its properties\n * @param object\n * @param testResult\n * @param depth\n * @param key\n */\nfunction testObjectProperties(\n  object: { [key: string]: any },\n  testResult: TestResultResponse,\n  depth: number,\n  key: string\n): TestResultResponse {\n\n  Object.keys(object)\n        .forEach(k => {\n          testResult = testValueOfV(object[k], testResult, (depth + 1), (key ? key + ' > ' : '') + k);\n        });\n\n  return testResult;\n}\n\n/**\n * Tests an array and its elements\n * @param array\n * @param testResult\n * @param depth\n * @param key\n */\nfunction testArrayValues(\n  array: any[],\n  testResult: TestResultResponse,\n  depth: number,\n  key: string\n): TestResultResponse {\n\n  array.forEach((v, i) => {\n    testResult = testValueOfV(v, testResult, (depth + 1), ((key ? key + ' > indexArray_' : 'indexArray_') + i));\n  });\n\n  return testResult;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n4.0.0-9 (2024-09-06)\n4.0.0-8 (2024-09-01)\nBug Fixes\n\noperators: rework some arguments (96a0e9b)\n\n4.0.0-7 (2024-08-31)\n4.0.0-6 (2024-08-31)\n4.0.0-5 (2023-10-08)\nFeatures\n\nglobal: improve behaviors, add new features, new stages, add stage types (8d946c9)\n\n4.0.0-4 (2023-10-06)\n4.0.0-3 (2023-10-05)\n4.0.0-2 (2023-10-05)\n4.0.0-1 (2023-10-05)\n4.0.0-0 (2023-10-04)\n⚠ BREAKING CHANGES\n\nglobal:   * Replacing the Payload suffix with Helper\n\nAdded $ symbol for all operators\nRenaming MapOperator to $Map\nUpdate GetResult, add the possibility to type the response, simplify GetDocs method and add GetElement method for non-paginated responses\nAdd GetPagingResult for paginated responses\n\n\nglobal: rename several files, improve code (0599fe3)\n\n\n3.4.0-0 (2022-01-21)\nFeatures\n\nimprove GetDocs typing (695e98c)\n\n3.3.1 (2021-10-12)\n3.3.0 (2021-09-17)\nFeatures\n\nadd the GetTotalPageNumber method to the methods that can be used when paging with the GetResult method (c885926)\n\nBug Fixes\n\ncorrect some array operators (6e50682)\n\n3.2.3 (2021-07-19)\nBug Fixes\n\ncorrect the path to index.js and index.d.ts files in package.json (2ecd7a5)\n\n3.2.2 (2021-07-18)\nBug Fixes\n\ncorrect the value returned by the GetDocs method for a pagination result (f83f4f0)\n\n3.2.1 (2021-07-14)\nBug Fixes\n\ncorrect the interpretation of 0 as not valid when passed as an argument of the GetDocs method (f32531d)\n\n3.2.0 (2021-07-11)\nFeatures\n\nadd the ability to get a particular item when using the GetDocs, increase the reliability of the pipeline parameter of the GetResult method (ee6d745)\n\n3.1.2 (2021-07-09)\n3.1.1 (2021-06-08)\n3.1.0 (2021-06-02)\nFeatures\n\nadd the ability to pass a single object with multiple properties in the Facet method (8401905)\nadd the possibility of testing undefined values (9afca54)\n\n3.0.0 (2021-04-06)\n⚠ BREAKING CHANGES\n\nAdd the possibility of using one or more Field\nhelper(s)\n\nchange the Facet payload (459bf0a)\n\n\n2.7.7 (2021-04-06)\n2.7.6 (2021-04-05)\n2.7.5 (2021-04-05)\n2.7.4 (2021-04-05)\n2.7.3 (2021-04-01)\n2.7.2 (2021-04-01)\n2.7.1 (2021-04-01)\n2.7.0 (2021-03-30)\nFeatures\n\nadd pipeline name decorator validation rules (1370ea6)\n\n2.6.3-1 (2021-03-30)\n2.6.3-0 (2021-03-30)\n2.6.2 (2021-03-30)\n2.6.1 (2021-03-29)\n2.6.0 (2021-03-29)\nFeatures\n\nadd currentOp OpPayload helper (b47c269)\n\n2.5.0 (2021-03-26)\nFeatures\n\nadd geoNear NearPayload helper (9d973b0)\n\n2.4.2 (2021-03-24)\n2.4.1 (2021-03-24)\n2.4.0 (2021-03-24)\nFeatures\n\nadd GetResult super method (d744405)\n\n2.3.2 (2021-03-23)\n2.3.1 (2021-03-23)\n2.3.0 (2021-03-23)\nFeatures\n\nAdd a check if a Skip, Limit or Count stage is already in the pipeline (6913cb3)\n\n2.2.0 (2021-03-23)\nFeatures\n\nadd a Paging method that will automatically add the necessary stages to paginate the pipeline results (f78cfb5)\n\n2.1.0 (2021-03-23)\nFeatures\n\nadd DbCollPayload helper for the Out method (663f2bf)\n\n2.0.4 (2021-03-22)\n2.0.3 (2021-03-22)\n2.0.2 (2021-03-22)\n2.0.1 (2021-03-22)\nBug Fixes\n\nfix to enable debug mode by modifying import of moment.js library (a973cb0)\n\n2.0.0 (2021-03-22)\n⚠ BREAKING CHANGES\n\nmodify the payload arguments by adding an optional argument containing all optional payload parameters (b258e26)\n\n1.1.0 (2021-03-22)\nFeatures\n\nadd merge IntoPayload helper (91b73f1)\n\n1.0.1 (2021-03-21)\n1.0.0 (2021-03-21)\n0.0.2-72 (2021-03-21)\nFeatures\n\nadd bucket auto GroupByAutoPayload helper (344b46c)\nadd sample SizePayload helper (c8d05f7)\nadd unionWith CollectionPayload helper (938bcaa)\n\n0.0.2-71 (2021-03-21)\nFeatures\n\nadd bucket GroupByPayload helper (03fb8d6)\n\n0.0.2-70 (2021-03-21)\n0.0.2-69 (2021-03-21)\nBug Fixes\n\ngithub script in circleci pipeline to delete develop branch when release is ready to merge (fd11909)\n\n0.0.2-68 (2021-03-20)\n0.0.2-67 (2021-03-20)\nFeatures\n\nadd Property helper to create a javascript object (62855da)\nadd the ability to pass an object or a list to AddFields (9c97026)\n\n0.0.2-66 (2021-03-20)\nFeatures\n\nadd new helper List (8dc7919)\n\n0.0.2-65 (2021-03-20)\n0.0.2-64 (2021-03-20)\n0.0.2-63 (2021-03-20)\nFeatures\n\nadd payload validator (6c243e1)\nimplement all the stage methods as an alias of the addStage method (b4066e0)\n\n0.0.2-62 (2021-03-19)\nFeatures\n\nimplement Lookup, Match and Project method of the pipeline builder (9b859cf)\n\n0.0.2-61 (2021-03-19)\n0.0.2-60 (2021-03-19)\n0.0.2-59 (2021-03-18)\n0.0.2-58 (2021-03-18)\n0.0.2-56 (2021-03-18)\n0.0.2-55 (2021-03-18)\n0.0.2-54 (2021-03-18)\n0.0.2-53 (2021-03-18)\n0.0.2-52 (2021-03-18)\n0.0.2-51 (2021-03-18)\n0.0.2-50 (2021-03-18)\n0.0.2-49 (2021-03-18)\n0.0.2-48 (2021-03-18)\n0.0.2-47 (2021-03-18)\n0.0.2-46 (2021-03-18)\n0.0.2-45 (2021-03-18)\n0.0.2-44 (2021-03-18)\n0.0.2-43 (2021-03-18)\n0.0.2-42 (2021-03-18)\n0.0.2-41 (2021-03-18)\n0.0.2-40 (2021-03-18)\n0.0.2-39 (2021-03-17)\n0.0.2-38 (2021-03-17)\n0.0.2-37 (2021-03-17)\n0.0.2-36 (2021-03-17)\n0.0.2-35 (2021-03-17)\n0.0.2-34 (2021-03-17)\n0.0.2-33 (2021-03-17)\n0.0.2-32 (2021-03-17)\n0.0.2-31 (2021-03-17)\n0.0.2-30 (2021-03-17)\n0.0.2-29 (2021-03-17)\n0.0.2-28 (2021-03-17)\n0.0.2-27 (2021-03-17)\n0.0.2-26 (2021-03-17)\n0.0.2-25 (2021-03-17)\n0.0.2-24 (2021-03-17)\n0.0.2-23 (2021-03-17)\n0.0.2-22 (2021-03-17)\n0.0.2-21 (2021-03-17)\n0.0.2-20 (2021-03-17)\n0.0.2-19 (2021-03-17)\n0.0.2-18 (2021-03-17)\n0.0.2-17 (2021-03-17)\n0.0.2-16 (2021-03-17)\n0.0.2-15 (2021-03-17)\n0.0.2-14 (2021-03-17)\n0.0.2-13 (2021-03-17)\n0.0.2-12 (2021-03-17)\n0.0.2-11 (2021-03-17)\n0.0.2-10 (2021-03-17)\nBug Fixes\n\nchange import moment to require moment (826ac37)\n\n0.0.2-alpha.7 (2021-03-16)\n0.0.2-alpha.5 (2021-03-16)\n0.0.2-alpha.4 (2021-03-16)\n0.0.2-alpha.3 (2021-03-16)\nBug Fixes\n\nbuild script (281fb81)\n\n0.0.2-alpha.2 (2021-03-16)\n0.0.2-alpha.1 (2021-03-16)\n0.0.2-alpha.0 (2021-03-15)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/constants/index.ts\n            \n            variable\n            NON_DUPLICABLE_STAGE_LIST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/constants/index.ts\n            \n            variable\n            STAGE_PAYLOAD_VALIDATORS_AVAILABLE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/decorators/is-valid-name/is-valid-name.decorator.ts\n            \n            function\n            IsValidName\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/errors/pipeline/pipeline.error.ts\n            \n            class\n            PipelineError\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/helpers/bucket-auto/bucket-auto.helper.ts\n            \n            variable\n            BucketAutoHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/bucket/bucket.helper.ts\n            \n            variable\n            BucketHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/change-stream/change-stream.helper.ts\n            \n            variable\n            ChangeStreamHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/coll-stats/coll-stats.helper.ts\n            \n            variable\n            CollStatsHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/current-op/current-op.helper.ts\n            \n            variable\n            CurrentOpHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/customs/field.helper.ts\n            \n            variable\n            Field\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/customs/list.helper.ts\n            \n            variable\n            List\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/densify/densify.helper.ts\n            \n            variable\n            DensifyHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/fill/fill.helper.ts\n            \n            variable\n            FillHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/geo-near/geo-near.helper.ts\n            \n            variable\n            GeoNearHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/lookup/lookup-condition.helper.ts\n            \n            variable\n            LookupConditionHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/lookup/lookup-equality.helper.ts\n            \n            variable\n            LookupEqualityHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/merge/merge.helper.ts\n            \n            variable\n            MergeHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/out/out.helper.ts\n            \n            variable\n            OutHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/project/project-ignore.helper.ts\n            \n            variable\n            ProjectIgnoreHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/project/project-only.helper.ts\n            \n            variable\n            ProjectOnlyHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/project/project.helper.ts\n            \n            variable\n            ProjectHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/sample/sample.helper.ts\n            \n            variable\n            SampleHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/search-meta/search-meta.helper.ts\n            \n            variable\n            SearchMetaHelper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/helpers/search/search.helper.ts\n            \n            variable\n            SearchHelper\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/helpers/union-with/union-with.helper.ts\n            \n            variable\n            UnionWithHelper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/utils/utils.ts\n            \n            function\n            isEmptyObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/utils/utils.ts\n            \n            function\n            isNotEmptyObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/helpers/utils/utils.ts\n            \n            function\n            setDefaultValueIfNotProvided\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/main.ts\n            \n            class\n            PipelineBuilder\n            \n                100 %\n                (69/69)\n            \n        \n        \n            \n                \n                lib/methods/get-result/get-result.ts\n            \n            variable\n            checkArgsValidity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/methods/get-result/get-result.ts\n            \n            variable\n            getElementByIndex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/methods/get-result/get-result.ts\n            \n            variable\n            GetPagingResult\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/methods/get-result/get-result.ts\n            \n            variable\n            GetResult\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/methods/get-result/get-result.ts\n            \n            variable\n            getTotalPageNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/methods/get-result/get-result.ts\n            \n            variable\n            throwError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/models/core/pipeline-stage.ts\n            \n            variable\n            ValidPipelineStageNameList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $AddToSet\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $Average\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $Bottom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $BottomN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $Count\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $Max\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $Min\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $Push\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $StdDevPop\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $StdDevSamp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/accumulator/index.ts\n            \n            variable\n            $Sum\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Absolute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Add\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Ceil\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Divide\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Exponent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Floor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Log\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Log10\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Mod\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Multiply\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $NaturalLog\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Pow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Round\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Sqrt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Subtract\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/arithmetic/index.ts\n            \n            variable\n            $Trunc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $ArrayElementAt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $ArrayToObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $ConcatArrays\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Filter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $First\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $In\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $IndexOfArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $IsArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Last\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Map\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $ObjectToArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Range\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Reduce\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $ReverseArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Size\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Slice\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/array/index.ts\n            \n            variable\n            $Zip\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/bitwise/index.ts\n            \n            variable\n            $BitwiseAnd\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/bitwise/index.ts\n            \n            variable\n            $BitwiseNot\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/bitwise/index.ts\n            \n            variable\n            $BitwiseOr\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/bitwise/index.ts\n            \n            variable\n            $BitwiseXor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            $And\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            $Not\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/boolean/index.ts\n            \n            variable\n            $Or\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            $Compare\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            $Equal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            $GreaterThan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            $GreaterThanEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            $LessThan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            $LessThanEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/comparison/index.ts\n            \n            variable\n            $NotEqual\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            $Condition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            $IfNull\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/conditional/index.ts\n            \n            variable\n            $Switch\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/custom-aggregation/index.ts\n            \n            variable\n            $Accumulator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/custom-aggregation/index.ts\n            \n            variable\n            $FunctionOperator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/data-size/index.ts\n            \n            variable\n            $BinarySize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/data-size/index.ts\n            \n            variable\n            $BsonSize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateAdd\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateDifference\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateFromCalendarParts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateFromIsoWeekParts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateFromString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateSubtract\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateToParts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateToString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DateTrunc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DayOfMonth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DayOfWeek\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $DayOfYear\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $Hour\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $IsoDayOfWeek\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $IsoWeek\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $IsoWeekYear\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $Millisecond\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $Minute\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $Month\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $Second\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $ToDate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $Week\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/date/index.ts\n            \n            variable\n            $Year\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $CovariancePop\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $CovarianceSamp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $Expression\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $Let\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $Literal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $MergeObjects\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $Meta\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $Rand\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/misc/index.ts\n            \n            variable\n            $SampleRate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            $AllElementsTrue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            $AnyElementTrue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            $SetDifference\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            $SetEquals\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            $SetIntersection\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            $SetIsSubset\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/set/index.ts\n            \n            variable\n            $SetUnion\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $Concat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $IndexOfBytes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $IndexOfCP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $Ltrim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $RegexFind\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $RegexFindAll\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $RegexMatch\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $ReplaceAll\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $ReplaceOne\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $Rtrim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $Split\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $StrCaseCmp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $StrLenBytes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $StrLenCP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $Substr\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $SubstrBytes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $SubstrCP\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $ToLower\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $ToString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $ToUpper\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/string/index.ts\n            \n            variable\n            $Trim\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $ArcCosine\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $ArcCosineHyperbolic\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $ArcSine\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $ArcSineHyperbolic\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $ArcTangent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $ArcTangent2\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $ArcTangentHyperbolic\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $Cosine\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $CosineHyperbolic\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $DegreesToRadians\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $RadiansToDegrees\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $Sin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $Sinh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $Tan\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/trigonometry/index.ts\n            \n            variable\n            $Tanh\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $Convert\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $IsNumber\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $ToBool\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $ToDecimal\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $ToDouble\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $ToInt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $ToLong\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $ToObjectId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/operators/type/index.ts\n            \n            variable\n            $Type\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/addFields-payload.validator.ts\n            \n            variable\n            addFieldsPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/bucket-auto-payload.validator.ts\n            \n            variable\n            bucketAutoPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/bucket-payload.validator.ts\n            \n            variable\n            bucketPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/collStats-payload.validator.ts\n            \n            variable\n            collStatsPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/count-payload.validator.ts\n            \n            variable\n            countPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/facet-payload.validator.ts\n            \n            variable\n            facetPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/geoNear-payload.validator.ts\n            \n            variable\n            geoNearPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/lookup-payload.validator.ts\n            \n            variable\n            lookupEqualityValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/lookup-payload.validator.ts\n            \n            variable\n            lookupPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/match-payload.validator.ts\n            \n            variable\n            matchPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/project-payload.validator.ts\n            \n            variable\n            projectPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/set-payload.validator.ts\n            \n            variable\n            setPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/stages/sort-payload.validator.ts\n            \n            variable\n            sortPayloadValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/string.validator.ts\n            \n            function\n            testMaxLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/string.validator.ts\n            \n            function\n            testMinLength\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/string.validator.ts\n            \n            function\n            testNoSpace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/string.validator.ts\n            \n            function\n            testNoSpecialChar\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/undefined.validator.ts\n            \n            interface\n            ResultProperty\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/validators/utils/undefined.validator.ts\n            \n            interface\n            TestResultResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/validators/utils/undefined.validator.ts\n            \n            function\n            getTypeOfV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/undefined.validator.ts\n            \n            function\n            IsUndefined\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/undefined.validator.ts\n            \n            function\n            testArrayValues\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/undefined.validator.ts\n            \n            function\n            testObjectProperties\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/validators/utils/undefined.validator.ts\n            \n            function\n            testValueOfV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/warnings/deprecated-methods/deprecated-method-warning.ts\n            \n            variable\n            deprecatedMethodWarning\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getTypeOfV   (lib/.../undefined.validator.ts)\n                        \n                        \n                            isEmptyObject   (lib/.../utils.ts)\n                        \n                        \n                            isNotEmptyObject   (lib/.../utils.ts)\n                        \n                        \n                            IsUndefined   (lib/.../undefined.validator.ts)\n                        \n                        \n                            IsValidName   (lib/.../is-valid-name.decorator.ts)\n                        \n                        \n                            setDefaultValueIfNotProvided   (lib/.../utils.ts)\n                        \n                        \n                            testArrayValues   (lib/.../undefined.validator.ts)\n                        \n                        \n                            testMaxLength   (lib/.../string.validator.ts)\n                        \n                        \n                            testMinLength   (lib/.../string.validator.ts)\n                        \n                        \n                            testNoSpace   (lib/.../string.validator.ts)\n                        \n                        \n                            testNoSpecialChar   (lib/.../string.validator.ts)\n                        \n                        \n                            testObjectProperties   (lib/.../undefined.validator.ts)\n                        \n                        \n                            testValueOfV   (lib/.../undefined.validator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/validators/utils/undefined.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getTypeOfV\n                        \n                    \n                \n            \n            \n                \ngetTypeOfV(v: any)\n                \n            \n\n\n\n\n            \n                \n                    Gets the type of the specified value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsUndefined\n                        \n                    \n                \n            \n            \n                \nIsUndefined(v: any)\n                \n            \n\n\n\n\n            \n                \n                    Is Undefined\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestResultResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testArrayValues\n                        \n                    \n                \n            \n            \n                \ntestArrayValues(array, testResult: TestResultResponse, depth: number, key: string)\n                \n            \n\n\n\n\n            \n                \n                    Tests an array and its elements\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    testResult\n                                    \n                                                TestResultResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    depth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestResultResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testObjectProperties\n                        \n                    \n                \n            \n            \n                \ntestObjectProperties(object, testResult: TestResultResponse, depth: number, key: string)\n                \n            \n\n\n\n\n            \n                \n                    Tests an object and its properties\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    object\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    testResult\n                                    \n                                                TestResultResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    depth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestResultResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testValueOfV\n                        \n                    \n                \n            \n            \n                \ntestValueOfV(v: any, testResult: TestResultResponse, depth: number, key: string)\n                \n            \n\n\n\n\n            \n                \n                    Tests the specified value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    testResult\n                                    \n                                                TestResultResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    depth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TestResultResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    lib/helpers/utils/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isEmptyObject\n                        \n                    \n                \n            \n            \n                \nisEmptyObject(obj)\n                \n            \n\n\n\n\n            \n                \n                    Checks if the provided object is empty.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe object to check.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNotEmptyObject\n                        \n                    \n                \n            \n            \n                \nisNotEmptyObject(obj?)\n                \n            \n\n\n\n\n            \n                \n                    Checks if the provided object is not empty.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe object to check.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setDefaultValueIfNotProvided\n                        \n                    \n                \n            \n            \n                \nsetDefaultValueIfNotProvided(defaultValue: T, value?: T)\n                \n            \n\n\n\n\n            \n                \n                    Sets a default value if the provided value is not provided.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    defaultValue\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe default value to be set.\n\n\n                                    \n                                \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nThe value to check.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    lib/decorators/is-valid-name/is-valid-name.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsValidName\n                        \n                    \n                \n            \n            \n                \nIsValidName(options?)\n                \n            \n\n\n\n\n            \n                \n                    IsValidName property decorator\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    lib/validators/utils/string.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        testMaxLength\n                        \n                    \n                \n            \n            \n                \ntestMaxLength(newVal: string, maxLength: number, errorList)\n                \n            \n\n\n\n\n            \n                \n                    test $Max Length\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newVal\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errorList\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinLength\n                        \n                    \n                \n            \n            \n                \ntestMinLength(newVal: string, minLength: number, errorList)\n                \n            \n\n\n\n\n            \n                \n                    test $Min Length\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newVal\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    minLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errorList\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testNoSpace\n                        \n                    \n                \n            \n            \n                \ntestNoSpace(newVal: string, errorList)\n                \n            \n\n\n\n\n            \n                \n                    test No Space\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newVal\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errorList\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testNoSpecialChar\n                        \n                    \n                \n            \n            \n                \ntestNoSpecialChar(newVal: string, errorList)\n                \n            \n\n\n\n\n            \n                \n                    test No Special Char\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newVal\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errorList\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n++\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-> Technical documentation \nmongodb-pipeline-builder\n\n\n\n\n\nmongodb-pipeline-builder is a pipeline builder for the db.collection.aggregate, the db.aggregate and the mongoose Model.aggregate methods.\n\nSimplify pipelines by making them more readable\nPipelines are easier to edit. \nPipeline stages appear in an array. \nSequential stages for documents\n\nAll stages except the Out, Merge, GeoNear, ChangeStream, ChangeStreamSplitLargeEvent and Paging stages can appear multiple times in a pipeline.\n\n\n\nnpm package \nnpm i -S mongodb-pipeline-builder\n\nNews and Breaking changes between v3 and v4\nPipelineBuilder:\n\nRenaming getPipeline() with build()\nAdded new stages: ChangeStream, ChangeStreamSplitLargeEvent, Densify, Documents, Fill, ListLocalSessions, ListSampledQueries, ListSearchIndexes, SearchMeta, SetWindowFields and ShardedDataDistribution.\nAdded the possibility to insert stages without validation.\nChecking for non-duplicable stages.\n\nHelpers:\n\nReplacing the Payload suffix with Helper suffix\nPrefixed with the name of the pipeline stage where they should be used\n\nOperators:\n\nPrefixed with the $ symbol\nRename MapOperator to $Map\n\nGetResult:\n\nTo be used if no Paging stage is set\nRemoving GetDocs method arguments\nAdded new GetElement method to the response object\n\nGetPagingResult:\n\nTo be used exclusively with Paging stage.\n\nWelcome generics! GetResult and GetPagingResult now offer the ability to type responses.\n\nUsage:\nUsing require()\nconst PipelineBuilder = require(\"mongodb-pipeline-builder\").PipelineBuilder;\nconst { LookupEqualityHelper, ProjectOnlyHelper, Field } = require('mongodb-pipeline-builder/helpers');\nconst { $LessThanEqual, $ArrayElementAt, $Equal, $Expression } = require('mongodb-pipeline-builder/operators');Using import\nimport { PipelineBuilder } from 'mongodb-pipeline-builder';\nimport { LookupEqualityHelper, ProjectOnlyHelper, Field } from 'mongodb-pipeline-builder/helpers';\nimport { $LessThanEqual, $ArrayElementAt, $Equal, $Expression } from 'mongodb-pipeline-builder/operators';\nPagination example\nconst myNewPipeline = new PipelineBuilder( 'myPagination', { debug: true } )\n    .Match( $Expression( $LessThanEqual( '$id', 20 ) ) )\n    .Project( ProjectOnlyHelper( 'name', 'weight' ) )\n    .Paging( 5, 3 ) // 5 per page, page 3\n    .build();is equivalent to\nconst myNewPipeline = [ {\n    $facet: {\n        docs: [\n            { $match: { $expr: { $lte: [\"$id\", 20] } } },\n            { $project: { _id: 0, name: 1, weight: 1 } },\n            { $skip: 10 },\n            { $limit: 5 }\n        ],\n        count: [\n            { $match: { $expr: { $lte: [\"$id\", 20] } } },\n            { $count: \"totalElements\" }\n        ]\n    }\n} ];\nNo pagination example\nconst myNewPipeline = new PipelineBuilder( 'user-skills' )\n    .Match( $Expression( $Equal( '$id', 123456 ) ) )\n    .Lookup( LookupEqualityHelper( 'profiles', 'profile', 'id', 'profileId' ) )\n    .Project( ProjectOnlyHelper( 'firstname', 'lastname', 'email' ) )\n    .AddFields(\n        Field( 'skills', $ArrayElementAt( '$profile.skills', 0 ) ),\n        Field( 'availability', $ArrayElementAt( '$profile.availability', 0 ) )\n    )\n    .Unset( 'profile' )\n    .build();is equivalent to\nconst myNewPipeline = [\n    { $match: { $expr: { $eq: [\"$id\", 123456] } } },\n    { $lookup: { from: \"profiles\", as: \"profile\", localField: \"id\", foreignField: \"profileId\" } },\n    { $project: { _id: 0, firstname: 1, lastname: 1, email: 1 } },\n    { $addFields: {\n        skills: { $arrayElemAt: [\"$profile.skills\", 0] },\n        availability: { $arrayElemAt: [\"$profile.availability\", 0] }\n    } },\n    { $unset: \"profile\" }\n];\nGetResult method (No pagination)\nGetResult(): Promise>\n\nGetResult() is an asynchronous method that provides a very easy way to use aggregation responses.\n\n\n\n\n\nThis method returns a GetResultResponse object that contains 3 methods:\n\nGetDocs(): T[] to get all the documents that match the request.\nGetElement(index: number | 'last'): T to get a particular document by its index.\nGetCount(): number to get the total number of documents found.\n\n\n\n\nconst result = await GetResult( target, pipeline ); \nresult.GetDocs(); // () => DocType[]\nresult.GetElement(index | 'last'); // () => DocType | undefined\nresult.GetCount(); // () => number$Or\nGetResult( target, pipeline ).then( result => {\n    result.GetDocs(); // () => DocType[]\n    result.GetElement(index | 'last'); // () => DocType | undefined\n    result.GetCount(); // () => number\n} );GetElement(index: number | 'last') method possibilities:\n\n\n\nA particular document can be retrieved by specifying its index.\nTo get the last document, simply provide the string 'last'. \nIf the specified index is greater than the index of the last document, GetElement() will return undefined.\n\n// GetDocs() -> [document1, document2, document3, ..., document51]\nresult.GetElement(2); // will return document to index 2, document3\nresult.GetElement('last'); // will return the last document, document51\nresult.GetElement(99); // will return undefined\nGetPagingResult method (Pagination)\nGetPagingResult(): Promise>\n\nGetPagingResult() is an asynchronous method that provides a very easy way to use aggregation responses when Paging stage is used.\n\n\n\n\n\nThis method returns a GetPagingResultResponse object that contains three methods:\n\nGetDocs() to get the documents found.\nGetCount() to get the total number of documents found.\nGetTotalPageNumber() to get the total number of pages.\n\n\n\n\nconst result = await GetPagingResult(target, pipeline);\nresult.GetDocs(); // () => DocType[]\nresult.GetCount(); // () => number\nresult.GetTotalPageNumber(); // () => number$Or\nGetPagingResult(target, pipeline).then( result => {\n    result.GetDocs(); // () => DocType[]\n    result.GetCount(); // () => number\n    result.GetTotalPageNumber(); // () => number\n} );\n=> Try the lib on NPM RunKit with the require method \n\n// builder = new PipelineBuilder('example');\nCUSTOM STAGES\nPaging(elementsPerPage, page)\n  The Paging stage automatically adds 3 native stages used to paginate documents ($skip, $limit and $count).\n  Page is optional and defaults to 1.\nbuilder.Paging(5, 2).build();\n\n// pipeline\n[\n  {\n    $facet: {\n      docs: [ { '$skip': 5 }, { '$limit': 5 } ],\n      count: [ { '$count': 'totalElements' } ]\n    }\n  }\n]InsertStage(stage)\n  The InsertStage stage allows you to insert a stage without validation.\n  Usefully when you need to insert a stage that is not yet implemented\n  or when the value fails validation but for some reason you want to keep it.\nbuilder.InsertStage({ '$myCustomStage': { myField: 'myValue' } }).build();\n\n// pipeline\n[ { $myCustomStage: { myField: 'myValue' } } ]MONGODB STAGES\nAddFields(...values)\nHelper: Field(name, value)\nbuilder.AddFields(\n  Field('foo', 'value1'),\n  Field('bar', 'value2'),\n).build();\n\n// pipeline\n[ { $addFields: { foo: 'value1', bar: 'value2' } } ]Bucket(value)\nHelper: BucketHelper(groupBy, boundaries, optional)\nbuilder.Bucket(BucketHelper('$age', [6, 13, 18])).build();\n\n// pipeline\n[ { $bucket: { groupBy: '$age', boundaries: [ 6, 13, 18 ] } } ]BucketAuto(value)\nHelper: BucketAutoHelper(groupBy, buckets, optional)\nbuilder.BucketAuto(BucketAutoHelper('$age', 5)).build();\n\n// pipeline\n[ { $bucketAuto: { groupBy: '$age', buckets: 5 } } ]ChangeStream(value)\nHelper: ChangeStreamHelper(optional)\nbuilder.ChangeStream(ChangeStreamHelper()).build();\n\n// pipeline\n[ { $changeStream: {} } ]ChangeStreamSplitLargeEvent()\nbuilder.ChangeStreamSplitLargeEvent().build();\n\n// pipeline\n[ { $changeStreamSplitLargeEvent: {} } ]CollStats(value)\nHelper: CollStatsHelper(optional)\nbuilder.CollStats(CollStatsHelper()).build();\n\n// pipeline\n[ { $collStats: {} } ]Count(value)\nbuilder.Count('counter').build();\n\n// pipeline\n[ { $count: 'counter' } ]CurrentOp(value)\nHelper: CurrentOpHelper(optional)\nbuilder.CurrentOp(CurrentOpHelper()).build();\n\n// pipeline\n[ { $currentOp: {} } ]Densify(value)\nHelper: DensifyHelper(field, range, optional)\nbuilder.Densify(\n    DensifyHelper(\n      'altitude',\n      { bounds: 'full', step: 200 },\n      { partitionByFields: [ 'variety' ] }\n    ),\n).build();\n\n// pipeline\n[\n  {\n    $densify: {\n      field: 'altitude',\n      range: { bounds: 'full', step: 200 }\n      partitionByFields: [ 'variety' ],\n    }\n  }\n]Documents(...values)\nbuilder.Documents({ doc1Id: 1 }, { doc2Id: 2 }, { doc3Id: 3 }).build();\n\n// pipeline\n[ { $documents: [ { doc1Id: 1 }, { doc2Id: 2 }, { doc3Id: 3 } ] } ]Facet(...values)\nHelper: Field(name, pipeline)\nbuilder.Facet(\n  Field('pipeline1', [{ $match: { tag: 'first' }}]),\n  Field('pipeline2', [{ $match: { tag: 'second' }}]),\n  Field('pipeline3', [{ $match: { tag: 'third' }}]),\n).build();\n\n// pipeline\n[\n  {\n    $facet: {\n      pipeline1: [ { '$match': { tag: 'first' } } ],\n      pipeline2: [ { '$match': { tag: 'second' } } ],\n      pipeline3: [ { '$match': { tag: 'third' } } ]\n    }\n  }\n]Fill(value)\nHelper: FillHelper(output, optional)\nbuilder.Fill(\n  FillHelper({\n    bootsSold: { value: 0 },\n    sandalsSold: { value: 0 },\n    sneakersSold: { value: 0 },\n  }),\n).build();\n\n// pipeline\n[\n  {\n    $fill: {\n      output: {\n        bootsSold: { value: 0 },\n        sandalsSold: { value: 0 },\n        sneakersSold: { value: 0 }\n      }\n    }\n  }\n]GeoNear(value)\nHelper: GeoNearHelper(near, distanceField, optional)\nbuilder.GeoNear(\n  GeoNearHelper({ type: \"Point\", coordinates: [ -73.99279 , 40.719296 ] }, 'calculated')\n).build();\n\n// pipeline\n[\n  {\n    $geoNear: {\n      near: { type: 'Point', coordinates: [ -73.99279, 40.719296 ] },\n      distanceField: 'calculated'\n    }\n  }\n]GraphLookup(value)\nbuilder.GraphLookup({\n  from: 'employees', startWith: '$reportsTo', connectFromField: 'reportsTo', connectToField: 'name', as: 'reportingHierarchy',\n}).build();\n\n// pipeline\n[\n  {\n    $graphLookup: {\n      from: 'employees',\n      startWith: '$reportsTo',\n      connectFromField: 'reportsTo',\n      connectToField: 'name',\n      as: 'reportingHierarchy'\n    }\n  }\n]Group(value)\nbuilder.Group({ _id: null, count: { $count: { } } }).build();\n\n// pipeline\n[\n  { $group: { _id: null, count: { '$count': {} } } }\n]IndexStats()\nbuilder.IndexStats().build();\n\n// pipeline\n[ { $indexStats: {} } ]Limit(value)\nbuilder.Limit(10).build();\n\n// pipeline\n[ { $limit: 10 } ]ListLocalSessions(value)\nbuilder.ListLocalSessions({ allUsers: true }).build();\n\n// pipeline\n[ { $listLocalSessions: { allUsers: true } } ]ListSampledQueries(value)\nbuilder.ListSampledQueries({ namespace: \"social.post\" }).build();\n\n// pipeline\n[ { $listSampledQueries: { namespace: 'social.post' } } ]ListSearchIndexes(value)\nbuilder.ListSearchIndexes({ name: 'searchIndex01' }).build();\n\n// pipeline\n[ { $listSearchIndexes: { name: 'searchIndex01' } } ]ListSessions(value)\nbuilder.ListSessions({ allUsers: true }).build();\n\n// pipeline\n[ { $listSessions: { allUsers: true } } ]Lookup(value)\nHelper: LookupConditionHelper(from, as, optional)\nbuilder.Lookup(LookupConditionHelper('users', 'users')).build();\n\n// pipeline\n[ { $lookup: { from: 'users', as: 'users' } } ]Helper: LookupEqualityHelper(from, as, localField, foreignField)\nbuilder.Lookup(\n  LookupEqualityHelper('users', 'users', 'userId', 'id')\n).build();\n\n// pipeline\n[\n  {\n    $lookup: {\n      from: 'users',\n      localField: 'userId',\n      foreignField: 'id',\n      as: 'users'\n    }\n  }\n]Match(value)\nHelper: Field(name, value)\nbuilder.Match(Field('age', 18)).build();\n\n// pipeline\n[ { $match: { age: 18 } } ]Operator: $Expression\nbuilder.Match($Expression($GreaterThanEqual('$age', 18))).build();\n\n// pipeline\n[ { $match: { '$expr': { '$gte': [ '$age', 18 ] } } } ]Merge(value)\nHelper: MergeHelper(into, optional)\nbuilder.Merge(MergeHelper('newCollection')).build();\n\n// pipeline\n[ { $merge: { into: 'newCollection' } } ]Out(value)\nHelper: OutHelper(collection, optional)\nbuilder.Out(OutHelper('users')).build();\n\n// pipeline\n[ { $out: 'users' } ]PlanCacheStats()\nbuilder.PlanCacheStats().build();\n\n// pipeline\n[ { $planCacheStats: {} } ]Project(...values)\nHelper: ProjectHelper(field, value)\nbuilder.Project(\n  ProjectHelper('age', '$user.age'),\n  ProjectHelper(\n    'nickname',\n    {\n      $cond: {\n        if: { $eq: [ '', '$user.nickname' ] },\n        then: '$$REMOVE',\n        else: '$user.nickname',\n      },\n    },\n  ),\n).build();\n\n// pipeline\n[\n  {\n    $project: {\n      age: '$user.age',\n      nickname: {\n        $cond: {\n          if: { $eq: [ '', '$user.nickname' ] },\n          then: '$$REMOVE',\n          else: '$user.nickname'\n        }\n      }\n    }\n  }\n]Helper: ProjectIgnoreHelper(...fields)\nbuilder.Project(ProjectIgnoreHelper('password', 'refreshToken')).build();\n\n// pipeline\n[ { $project: { password: 0, refreshToken: 0 } } ]Helper: ProjectOnlyHelper(...fields)\nbuilder.Project(ProjectOnlyHelper('password', 'refreshToken')).build();\n\n// pipeline\n[ { $project: { _id: 0, password: 1, refreshToken: 1 } } ]Redact(value)\nbuilder.Redact(\n  $Condition(\n    $GreaterThan($Size($SetIntersection('$tags', ['STLW', 'G'])), 0),\n    '$$DESCEND',\n    '$$PRUNE'\n  )\n).build();\n\n// pipeline\n[\n  {\n    $redact: {\n      '$cond': [\n        { '$gt': [ { '$size': { '$setIntersection': [ '$tags', [ 'STLW', 'G' ] ] } }, 0 ] },\n        '$$DESCEND',\n        '$$PRUNE'\n      ]\n    }\n  }\n]ReplaceRoot(value)\nbuilder.ReplaceRoot({\n  newRoot: { full_name: { $concat : [ \"$first_name\", \" \", \"$last_name\" ] } }\n}).build();\n\n// pipeline\n[\n  {\n    $replaceRoot: {\n      newRoot: {\n        full_name: { '$concat': [ '$first_name', ' ', '$last_name' ] }\n      }\n    }\n  }\n]ReplaceWith(value)\nbuilder.ReplaceWith('$name').build();\n\n// pipeline\n[ { $replaceWith: '$name' } ]Sample(value)\nHelper: SampleHelper(size)\nbuilder.Sample(SampleHelper(6)).build();\n\n// pipeline\n[ { $sample: { size: 6 } } ]Search(value)\nHelper: SearchHelper(operator | collector, optional)\nbuilder.Search(\n  SearchHelper({\n    near: { path: 'released', origin: date, pivot: 7776000000 },\n  }),\n).build();\n\n// pipeline\n[\n  {\n    $search: {\n      near: { path: 'released', origin: date, pivot: 7776000000 },\n    },\n  }\n]SearchMeta(value)\nHelper: SearchMetaHelper(collector, optional)\nbuilder.SearchMeta(\n  SearchMetaHelper({\n    facet: {\n      operator: {\n        near: { path: 'released', origin: date, pivot: 7776000000 },\n      },\n      facets: {\n        test: { type: 'number', path: 'released', boundaries: [0, 100] },\n      },\n    },\n  })\n).build();\n\n// pipeline\n[\n  {\n    $searchMeta: {\n      facet: {\n        operator: {\n          near: { path: 'released', origin: date, pivot: 7776000000 },\n        },\n        facets: {\n          test: { type: 'number', path: 'released', boundaries: [0, 100] },\n        },\n      },\n    }\n  }\n]Set(...values)\nHelper: Field(name, value)\nbuilder.Set(Field('first', true), Field('second', 2)).build();\n\n// pipeline\n[ { $set: { first: true, second: 2 } } ]SetWindowFields(value)\nbuilder.SetWindowFields({\n  partitionBy: \"$state\",\n  sortBy: { orderDate: 1 },\n  output: {\n    cumulativeQuantityForState: {\n      $sum: \"$quantity\",\n      window: { documents: [ \"unbounded\", \"current\" ] }\n    }\n  }\n}).build();\n\n// pipeline\n[\n  {\n    $setWindowFields: {\n      partitionBy: '$state',\n      sortBy: { orderDate: 1 },\n      output: {\n        cumulativeQuantityForState: {\n          '$sum': '$quantity',\n          window: { documents: [ 'unbounded', 'current' ] }\n        }\n      }\n    }\n  }\n]ShardedDataDistribution(value)\nbuilder.ShardedDataDistribution({}).build();\n\n// pipeline\n[ { $shardedDataDistribution: {} } ]Skip(value)\nbuilder.Skip(100).build();\n\n// pipeline\n[ { $skip: 100 } ]Sort(...values)\nHelper: Field(name, value)\nbuilder.Sort(\n  Field('first', -1),\n  Field('second', 1),\n  Field('third', { $meta: \"textScore\" }),\n).build();\n\n// pipeline\n[\n  {\n    $sort: { first: -1, second: 1, third: { '$meta': 'textScore' } }\n  }\n]SortByCount(value)\nbuilder.SortByCount('$employee').build();\n// pipeline\n\n[ { $sortByCount: '$employee' } ]UnionWith(value)\nHelper: UnionWithHelper(collection, pipeline)\nbuilder.UnionWith(\n  UnionWithHelper('cars'),\n).build();\n\n// pipeline\n[\n  {\n    $unionWith: { coll: 'cars' }\n  }\n]builder.UnionWith(\n  UnionWithHelper(\n    undefined,\n    [{ $document: [{ ref: 1 }, { ref: 2 }, { ref: 3 }],  }]),\n).build();\n\n// pipeline\n[\n  {\n    $unionWith: { pipeline: [ { '$document': [ { ref: 1 }, { ref: 2 }, { ref: 3 } ] } ] }\n  }\n]builder.UnionWith(\n  UnionWithHelper('cars', [{ $match: { color: 'red' } }]),\n).build();\n\n// pipeline\n[\n  {\n    $unionWith: { coll: 'cars', pipeline: [ { '$match': { color: 'red' } } ] }\n  }\n]Unset(...values)\nbuilder.Unset('users', 'roles').build();\n\n// pipeline\n[ { $unset: [ 'users', 'roles' ] } ]Unwind(value)\nbuilder.Unwind({ path: '$sizes', preserveNullAndEmptyArrays: true }).build();\n\n// pipeline\n[ { $unwind: { path: '$sizes', preserveNullAndEmptyArrays: true } } ]\nMONGODB OPERATORS\n$Absolute\n$Absolute(-5)\n\n// operator\n{ $abs: -5 }$Accumulator\n$Accumulator(\n  () => ({ count: 0, sum: 0 }),\n  (state: { count: number; sum: number; }, numCopies: number) => ({\n    count: state.count + 1,\n    sum: state.sum + numCopies,\n  }),\n  ['$copies'],\n  (state1: { count: number; sum: number; }, state2: { count: number; sum: number; }) => ({\n    count: state1.count + state2.count,\n    sum: state1.sum + state2.sum,\n  }),\n  { finalize: (state: { sum: number; count: number; }) => (state.sum / state.count) },\n)\n\n// operator\n{\n  '$accumulator': {\n    init: [ () => ({ count: 0, sum: 0 }) ],\n    accumulate: [\n      (state: { count: number; sum: number; }, numCopies: number) => ({\n        count: state.count + 1,\n        sum: state.sum + numCopies,\n      })\n    ],\n    accumulateArgs: [ '$copies' ],\n    merge: [\n      (state1: { count: number; sum: number; }, state2: { count: number; sum: number; }) => ({\n        count: state1.count + state2.count,\n        sum: state1.sum + state2.sum,\n      })\n    ],\n    finalize: [ (state: { sum: number; count: number; }) => (state.sum / state.count) ],\n    lang: 'js'\n  }\n}$ArcCosine\n$ArcCosine({ $divide : [ '$side_b', '$hypotenuse' ] })\n\n// operator\n{ '$acos': { '$divide': [ '$side_b', '$hypotenuse' ] } }$ArcCosineHyperbolic\n$ArcCosineHyperbolic(3)\n\n// operator\n{ '$acosh': 3 }$Add\n$Add('$price', 10)\n\n// operator\n{ '$add': [ '$price', 10 ] }$AddToSet\n$AddToSet('$item')\n\n// operator\n{ '$addToSet': '$item' }$AllElementsTrue\n$AllElementsTrue([ true, 1, \"someString\" ])\n\n// operator\n{ '$allElementsTrue': [ [ true, 1, 'someString' ] ] }$And\n$And(1, 'green')\n\n// operator\n{ '$and': [ 1, 'green' ] }$AnyElementTrue\n$AnyElementTrue([ true, false ])\n\n// operator\n{ '$anyElementTrue': [ [ true, false ] ] }$ArrayElementAt\n$ArrayElementAt([ 1, 2, 3 ], 0)\n\n// operator\n{ '$arrayElemAt': [ [ 1, 2, 3 ], 0 ] }$ArrayToObject\n$ArrayToObject([ { \"k\": \"item\", \"v\": \"abc123\" }, { \"k\": \"qty\", \"v\": \"$qty\" } ])\n\n// operator\n{ '$arrayToObject': [ { k: 'item', v: 'abc123' }, { k: 'qty', v: '$qty' } ] }$ArrayToObject([ [ \"item\", \"abc123\" ], [ \"qty\", 25 ] ], true)              \n\n// operator\n{ '$arrayToObject': { '$literal': [ [ 'item', 'abc123' ], [ 'qty', 25 ] ] } }$ArcSine\n$ArcSine('$value')\n\n// operator\n{ '$asin': '$value' }$ArcSineHyperbolic\n$ArcSineHyperbolic('$value')\n\n// operator\n{ '$asinh': '$value' }$ArcTangent\n$ArcTangent('$value')\n\n// operator\n{ '$atan': '$value' }$ArcTangent2\n$ArcTangent2('$side_b', '$side_a')\n\n// operator\n{ '$atan2': [ '$side_b', '$side_a' ] }$ArcTangentHyperbolic\n$ArcTangentHyperbolic('$value')\n\n// operator\n{ '$atanh': '$value' }$Average\n$Average('$value')\n\n// operator\n{ '$avg': '$value' }$Average('$value1', '$value2', '$value3')\n\n// operator\n{ '$avg': [ '$value1', '$value2', '$value3' ] }$BinarySize\n$BinarySize('Hello World!')\n\n// operator\n{ '$binarySize': 'Hello World!' }$BitwiseAnd\n$BitwiseAnd('$array')\n\n// operator\n{ '$bitAnd': '$array' }$BitwiseAnd(0, 127, 5)\n\n// operator\n{ '$bitAnd': [ 0, 127, 5 ] }$BitwiseNot\n$BitwiseNot('$long')\n\n// operator\n{ '$bitNot': '$long' }$BitwiseOr\n$BitwiseOr('$array')\n\n// operator\n{ '$bitOr': '$array' }$BitwiseOr(0, 127, 5)\n\n// operator\n{ '$bitOr': [ 0, 127, 5 ] }$BitwiseXor\n$BitwiseXor('$array')\n\n// operator\n{ '$bitXor': '$array' }$BitwiseXor(0, 127, 5)\n\n// operator\n{ '$bitXor': [ 0, 127, 5 ] }$Bottom\n$Bottom(['field1', 'field2'], { field2: -1 })\n\n// operator\n{ '$bottom': { output: [ 'field1', 'field2' ], sortBy: { field2: -1 } } }$BottomN\n$BottomN('field', { field: 1 }, 3)\n\n// operator\n{ '$bottomN': { output: 'field', sortBy: { field: 1 }, n: 3 } }$BsonSize\n$BsonSize('$$ROOT')\n\n// operator\n{ '$bsonSize': '$$ROOT' }$Ceil\n$Ceil('$value')\n\n// operator\n{ '$ceil': '$value' }$Compare\n$Compare('$age', 25)\n\n// operator\n{ '$cmp': [ '$age', 25 ] }$Concat\n$Concat('$first', ' - ', '$second')\n\n// operator\n{ '$concat': [ '$first', ' - ', '$second' ] }$ConcatArrays\n$ConcatArrays('$array', [1, 2, 3])\n\n// operator\n{ '$concatArrays': [ '$array', [ 1, 2, 3 ] ] }$Condition\n$Condition({ $gte: [ '$quantity', 250 ] }, 'true', 'false')\n\n// operator\n{ '$cond': [ { '$gte': [ '$quantity', 250 ] }, 'true', 'false' ] }$Convert\n$Convert(100, 'bool')\n\n// operator\n{ '$convert': { input: 100, to: 'bool' } }$Cosine\n$Cosine('$angle')\n\n// operator\n{ '$cos': '$angle' }$CosineHyperbolic\n$CosineHyperbolic({ $degreesToRadians : \"$angle\" })\n\n// operator\n{ '$cosh': { '$degreesToRadians': '$angle' } }$Count\n$Count()\n\n// operator\n{ '$count': {} }$CovariancePopulation\n$CovariancePopulation('$numeric1', '$numeric2')\n\n// operator\n{ '$covariancePopulation': [ '$numeric1', '$numeric2' ] }$CovarianceSample\n$CovarianceSample('$numeric1', '$numeric2')\n\n// operator\n{ '$covarianceSample': [ '$numeric1', '$numeric2' ] }$DateAdd\n$DateAdd('$startDate', 'hour', 2)\n\n// operator\n{ '$dateAdd': { startDate: '$startDate', unit: 'hour', amount: 2 } }$DateDifference\n$DateDifference('$startDate', '$endDate', 'second')\n\n// operator\n{ '$dateDiff': { startDate: '$startDate', endDate: '$endDate', unit: 'second' } }$DateFromParts\n$DateFromCalendarParts(2000, { month: 12, day: 31, hour: 12, minute: 25, second: 59, timezone: '+01:00' })\n\n// operator\n{\n  '$dateFromParts': {\n    year: 2000,\n    month: 12,\n    day: 31,\n    hour: 12,\n    minute: 25,\n    second: 59,\n    timezone: '+01:00'\n  }\n}$DateFromIsoWeekParts(2000, { isoWeek: 53, isoDayOfWeek: 7, millisecond: 500 })\n\n// operator\n{ '$dateFromParts': { isoWeekYear: 2000, isoWeek: 53, isoDayOfWeek: 7, millisecond: 500 } }$DateFromString\n$DateFromString('2017-02-08T12:10:40.787', { timezone: 'America/New_York' })\n\n// operator\n{\n  '$dateFromString': {\n    dateString: '2017-02-08T12:10:40.787',\n    timezone: 'America/New_York'\n  }\n}$DateSubtract\n$DateSubtract(1697382106124, 'month', 1)\n\n// operator\n{ '$dateSubtract': { startDate: 1697382106124, unit: 'month', amount: 1 } }$DateToParts\n$DateToParts(1697382106124)\n\n// operator\n{ '$dateToParts': { date: 1697382106124 } }$DateToString\n$DateToString(1697382106124)\n\n// operator\n{ '$dateToString': { date: 1697382106124 } }$DateTrunc\n$DateTrunc(1697382106124, 'month')\n\n// operator\n{ '$dateTrunc': { date: 1697382106124, unit: 'month' } }$DayOfMonth\n$DayOfMonth('$date', 'Europe/Paris')\n\n// operator\n{ '$dayOfMonth': { date: '$date', timezone: 'Europe/Paris' } }$DayOfWeek\n$DayOfWeek('$date', '+03:30')\n\n// operator\n{ '$dayOfWeek': { date: '$date', timezone: '+03:30' } }$DayOfYear\n$DayOfYear('$date')\n\n// operator\n{ '$dayOfYear': { date: '$date' } }$DegreesToRadians\n$DegreesToRadians('$angle_a')\n\n// operator\n{ '$degreesToRadians': '$angle_a' }$DenseRank\n\n\n// operator\n$Derivative\n\n\n// operator\n$Divide\n\n\n// operator\n$DocumentNumber\n\n\n// operator\n$Equal\n\n\n// operator\n$Exponent\n\n\n// operator\n$ExponentialMovingAverage\n\n\n// operator\n$Filter\n\n\n// operator\n$First\n\n\n// operator\n$FirstN\n\n\n// operator\n\n\n// operator\n$Floor\n\n\n// operator\n$Function\n\n\n// operator\n$GetField\n\n\n// operator\n$GreaterThan\n\n\n// operator\n$GreaterThanEqual\n\n\n// operator\n$Hour\n\n\n// operator\n$IfNull\n\n\n// operator\n$In\n\n\n// operator\n$IndexOfArray\n\n\n// operator\n$IndexOfBytes\n\n\n// operator\n$IndexOfCodePoint\n\n\n// operator\n$Integral\n\n\n// operator\n$IsArray\n\n\n// operator\n$IsNumber\n\n\n// operator\n$IsoDayOfWeek\n\n\n// operator\n$IsoWeek\n\n\n// operator\n$IsoWeekYear\n\n\n// operator\n$Last\n\n\n// operator\n$LastN\n\n\n// operator\n\n\n// operator\n$LessThan\n\n\n// operator\n$LessThanEqual\n\n\n// operator\n$Let\n\n\n// operator\n$Literal\n\n\n// operator\n$Log\n\n\n// operator\n$Log10\n\n\n// operator\n$Ltrim\n\n\n// operator\n$Map\n\n\n// operator\n$Max\n\n\n// operator\n$MergeObjects\n\n\n// operator\n$Meta\n\n\n// operator\n$Millisecond\n\n\n// operator\n$Min\n\n\n// operator\n$Minute\n\n\n// operator\n$Mod\n\n\n// operator\n$Month\n\n\n// operator\n$Multiply\n\n\n// operator\n$NaturalLog\n\n\n// operator\n$Not\n\n\n// operator\n$NotEqual\n\n\n// operator\n$ObjectToArray\n\n\n// operator\n$Or\n\n\n// operator\n$Pow\n\n\n// operator\n$Push\n\n\n// operator\n$RadiansToDegrees\n\n\n// operator\n$Rand\n\n\n// operator\n$Range\n\n\n// operator\n$Reduce\n\n\n// operator\n$RegexFind\n\n\n// operator\n$RegexFindAll\n\n\n// operator\n$RegexMatch\n\n\n// operator\n$ReplaceAll\n\n\n// operator\n$ReplaceOne\n\n\n// operator\n$ReverseArray\n\n\n// operator\n$Round\n\n\n// operator\n$Rtrim\n\n\n// operator\n$SampleRate\n\n\n// operator\n$Second\n\n\n// operator\n$SetDifference\n\n\n// operator\n$SetEquals\n\n\n// operator\n$SetIntersection\n\n\n// operator\n$SetIsSubset\n\n\n// operator\n$SetUnion\n\n\n// operator\n$Sin\n\n\n// operator\n$Sinh\n\n\n// operator\n$Size\n\n\n// operator\n$Slice\n\n\n// operator\n$Split\n\n\n// operator\n$Sqrt\n\n\n// operator\n$StdDevPop\n\n\n// operator\n$StdDevSamp\n\n\n// operator\n$StrCaseCmp\n\n\n// operator\n$StrLenBytes\n\n\n// operator\n$StrLenCP\n\n\n// operator\n$Substr\n\n\n// operator\n$SubstrBytes\n\n\n// operator\n$SubstrCP\n\n\n// operator\n$Subtract\n\n\n// operator\n$Sum\n\n\n// operator\n$Switch\n\n\n// operator\n$Tan\n\n\n// operator\n$Tanh\n\n\n// operator\n$ToBool\n\n\n// operator\n$ToDate\n\n\n// operator\n$ToDecimal\n\n\n// operator\n$ToDouble\n\n\n// operator\n$ToInt\n\n\n// operator\n$ToLong\n\n\n// operator\n$ToLower\n\n\n// operator\n$ToObjectId\n\n\n// operator\n$ToString\n\n\n// operator\n$ToUpper\n\n\n// operator\n$Trim\n\n\n// operator\n$Trunc\n\n\n// operator\n$Type\n\n\n// operator\n$Week\n\n\n// operator\n$Year\n\n\n// operator\n$Zip\n\n\n// operator\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Mickael Nodanche\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
